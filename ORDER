storage policy
	keep everything
	no text
	no system output
	no form output
	
writer / actor / scribe / transmuter mode:
	recieves target
	runs action / command
		open io stream
			parsing depends on item and type, items @shape
			read by paging
	
	ticker / @interval 
	
	actions[]:
		toggle long/short
		filter: toggle raw / pure
		
		list: toggle
			long - vertical writer each item
			short - vertical break
		
		cycle: go through long list item writers
		
		#	single - writer or top item
		
	
	break = false	
	vertical = false
	
	#long
	#short
	raw with text
	pure / extract / known / clear / without t.
	#stack
	
	+more new writer between lines
	-less shrink large text from the middle 

	new writers default horizontal
	vertical writer only stack
		items autostart #
		
		stops at cols		
		breaks to the right
		
		#continues 
	horizontal
		items sleep and action:start 
		
		stops at rows
		breaks downward
		
	cursor
		shows focus
		
	alternating greys for text
	
item start writer -  

	@output = Writer.new
	content:
	
	default  #or order by time .first 
	type items: ( where short )
		action 
			long, 
			extra, items.count, 
			content
			actions
			maximize
			add 
			rename
			
			
				
			...
		commands 
			cat
			file
			ls
			whatis
			
			exe
				options
				items
			form
				inputs
				query
			
	items / history
		
	link target
	

user chat server
permissions on grams / programs / countergrams

views:
	list:
		short : multiple column list, 
		detail : full name + description
	text
		more text: description between line 
		less text: line remover overview mode

class String 
	@meanings = []
	def parse		
end

class Number < Item
class Text < Item
	description string from url / shape
	
class Word < Text
	description string from wordnet
	class Object < Word
class Adjective < Word
class Verb < Word
class Connector < Word

class Code < Text
	description from ri / doc
class Operator < Code
class Klass < Code
class Method < Code

input echo on command line
add replaces current input
space parses input

web http parsing
horizontal scroll 

config <- 
	/etc / 
	.files )
	/sys <- system setting 

executable
	live process highlight
	signal actions
	modules <- switch loaded kernel modules
	
memory <- 
alias <- .bash/zsh_history parse

#video background
opengl interface
manual font jpeg generation, #cairo, pango
rmagick 	
xlib, window manager

	semantic deflation
	orb way editing language + code
	line skip, increase with quantitiy one page overview

#item/string : 
ticker thread in o.rb

Executable, live?

naming
	/files
	:port host
	@people
	-options
	>command

color
	red yellow green blue
	verb object prepositions adjectives
	method object operators values
	
	
	 words
	 code
	 functions
	 	add
	 	section

coloring - Color.shade [-10..10]
	red executable, sources, modules
	orange directory
	yellow audio video
	green host, ip, socket, symlink,
	cyan 
	blue options, config
	violet
	magenta

name: unix X
	Z
	uni 
	earth
	orb	open objective 
	crown

globals:

coloring 
	extension
	type
	generic
		a-z
		int
		brackets

persistent undo history, only root 
	text 
	files
	modules
	processes
	layout

default order
	.6 recent	timestamp ondemand scan
	.4 frequent .bash/zsh_history

tag mixing in list
	sources:
		for hosts ( localhost or other )
			url ( 
			ip, dns, http meta info
			pathnames ( file system or ftp/smb/nfs/http
			mime types
			tags
			services

menu: 
	default order: default+recent+frequent / char

	
										
types <- all mime types	
	binary utf-8, hex browser
	text <- text browser / editor 
	devices <- block / character / input
	image
	audio
	video
	

network <- port scan - run default app

							http 
								url
								text
								links
								image
								video
								code
							ftp path
								type 
									text
										language
										config
										html
									image												
									video
									exe
							ssh <- run orb
							socks <- connect
							name - register
							time - sync
							file
								smb
								nfs
								gem
								git
								deb
								rpm
							db
								sql


