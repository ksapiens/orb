# Logfile created on 2016-11-19 12:55:51 +0100 by logger.rb/54362
D, [2016-11-19T12:55:51.823995 #2832] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T12:55:51.824635 #2832] DEBUG -- : 10, 1 / 66, 41
D, [2016-11-19T12:55:54.997447 #2832] DEBUG -- : 1, 1 / 11, 21
D, [2016-11-19T12:55:55.000287 #2832] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-19T12:55:56.569819 #2832] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T12:55:56.570404 #2832] DEBUG -- : 9, 1 / 22, 39
D, [2016-11-19T12:56:04.233771 #2832] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T12:56:04.235423 #2832] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T12:56:04.237621 #2832] DEBUG -- : 22, 1 / 66, 41
D, [2016-11-19T12:56:08.601742 #2832] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T12:56:08.602992 #2832] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T12:56:08.605257 #2832] DEBUG -- : 22, 1 / 66, 41
D, [2016-11-19T12:56:15.818503 #2832] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T12:56:15.819911 #2832] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T12:56:15.822097 #2832] DEBUG -- : 22, 1 / 66, 41
D, [2016-11-19T12:56:20.485803 #2832] DEBUG -- : -0, --null
D, [2016-11-19T12:56:20.486758 #2832] DEBUG -- : -a, --all
D, [2016-11-19T12:56:20.487096 #2832] DEBUG -- : --apparent-size
D, [2016-11-19T12:56:20.487412 #2832] DEBUG -- : -B, --block-size=SIZE
D, [2016-11-19T12:56:20.487808 #2832] DEBUG -- : -b, --bytes
D, [2016-11-19T12:56:20.488131 #2832] DEBUG -- : -c, --total
D, [2016-11-19T12:56:20.488449 #2832] DEBUG -- : -D, --dereference-args
D, [2016-11-19T12:56:20.488767 #2832] DEBUG -- : -d, --max-depth=N
D, [2016-11-19T12:56:20.489082 #2832] DEBUG -- : --files0-from=F
D, [2016-11-19T12:56:20.489397 #2832] DEBUG -- : -H  
D, [2016-11-19T12:56:20.489709 #2832] DEBUG -- : -h, --human-readable
D, [2016-11-19T12:56:20.490023 #2832] DEBUG -- : --inodes
D, [2016-11-19T12:56:20.490413 #2832] DEBUG -- : -k  
D, [2016-11-19T12:56:20.490730 #2832] DEBUG -- : -L, --dereference
D, [2016-11-19T12:56:20.491047 #2832] DEBUG -- : -l, --count-links
D, [2016-11-19T12:56:20.491364 #2832] DEBUG -- : -m  
D, [2016-11-19T12:56:20.491676 #2832] DEBUG -- : -P, --no-dereference
D, [2016-11-19T12:56:20.492033 #2832] DEBUG -- : -S, --separate-dirs
D, [2016-11-19T12:56:20.492347 #2832] DEBUG -- : --si
D, [2016-11-19T12:56:20.492660 #2832] DEBUG -- : -s, --summarize
D, [2016-11-19T12:56:20.492974 #2832] DEBUG -- : -t, --threshold=SIZE
D, [2016-11-19T12:56:20.493297 #2832] DEBUG -- : --time=WORD
D, [2016-11-19T12:56:20.493614 #2832] DEBUG -- : --time-style=STYLE
D, [2016-11-19T12:56:20.493983 #2832] DEBUG -- : -X, --exclude-from=FILE
D, [2016-11-19T12:56:20.494298 #2832] DEBUG -- : --exclude=PATTERN
D, [2016-11-19T12:56:20.494610 #2832] DEBUG -- : -x, --one-file-system
D, [2016-11-19T12:56:20.494925 #2832] DEBUG -- : --version
D, [2016-11-19T12:56:20.497495 #2832] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T12:56:20.498217 #2832] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T12:56:20.499472 #2832] DEBUG -- : 22, 1 / 87, 28
D, [2016-11-19T21:28:01.257039 #31158] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T21:28:01.258261 #31158] DEBUG -- : 10, 1 / 66, 41
D, [2016-11-19T21:33:08.546920 #31672] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T21:33:08.548237 #31672] DEBUG -- : 10, 1 / 66, 41
D, [2016-11-19T21:36:10.537318 #31981] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T21:36:10.538588 #31981] DEBUG -- : 10, 1 / 66, 41
D, [2016-11-19T21:36:10.539779 #31981] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T21:41:14.534111 #32488] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T21:41:14.535252 #32488] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T21:41:14.536288 #32488] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T21:46:13.871896 #514] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T21:46:13.873044 #514] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T21:46:13.874029 #514] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T21:46:17.673655 #514] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T21:46:17.675166 #514] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T21:46:22.070198 #514] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T21:55:20.929810 #1446] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T21:55:20.930930 #1446] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T21:55:20.931955 #1446] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T21:55:23.660743 #1446] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T21:55:23.662291 #1446] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T21:55:23.663127 #1446] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:04:26.316929 #2426] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:04:26.318055 #2426] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T22:04:26.319029 #2426] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:04:29.373508 #2426] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:04:29.375008 #2426] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:04:29.399031 #2426] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:04:55.664208 #2504] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:04:55.665353 #2504] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T22:04:55.666341 #2504] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:05:00.232742 #2520] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:05:00.233899 #2520] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T22:05:00.234925 #2520] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:05:02.008487 #2520] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:05:02.010186 #2520] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:05:02.011073 #2520] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:09:42.544416 #3003] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:09:42.545479 #3003] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T22:09:42.546453 #3003] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:15:00.326098 #3532] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:15:00.327143 #3532] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T22:15:00.328173 #3532] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:15:53.130168 #3624] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:15:53.131223 #3624] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T22:15:53.132254 #3624] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:15:55.175787 #3624] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:15:55.177310 #3624] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:15:55.178126 #3624] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:15:58.144909 #3624] DEBUG -- : -P  
D, [2016-11-19T22:15:58.145809 #3624] DEBUG -- : -L  
D, [2016-11-19T22:15:58.146143 #3624] DEBUG -- : -H  
D, [2016-11-19T22:15:58.146464 #3624] DEBUG -- : -D debugoptions
D, [2016-11-19T22:15:58.146785 #3624] DEBUG -- : -Olevel
D, [2016-11-19T22:15:58.149146 #3624] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:15:58.151847 #3624] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:15:58.154200 #3624] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:21:37.199068 #4221] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:21:37.200213 #4221] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T22:21:37.201229 #4221] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:21:39.218728 #4221] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:21:39.220343 #4221] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:21:39.221382 #4221] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:21:41.384238 #4221] DEBUG -- : -P  
D, [2016-11-19T22:21:41.385161 #4221] DEBUG -- : -L  
D, [2016-11-19T22:21:41.385499 #4221] DEBUG -- : -H  
D, [2016-11-19T22:21:41.385818 #4221] DEBUG -- : -D debugoptions
D, [2016-11-19T22:21:41.386136 #4221] DEBUG -- : -Olevel
D, [2016-11-19T22:21:41.388501 #4221] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:21:41.391130 #4221] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:21:41.393507 #4221] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:21:42.694232 #4221] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:21:42.697121 #4221] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:21:42.699508 #4221] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:21:45.171977 #4221] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:21:45.174698 #4221] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:21:45.177120 #4221] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:29:31.292648 #4221] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:29:31.295222 #4221] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:29:31.297976 #4221] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:29:34.997181 #4221] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:29:34.999846 #4221] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:29:35.002481 #4221] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:29:36.701292 #4221] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:29:36.703967 #4221] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:29:36.706717 #4221] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:29:37.772716 #4221] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:29:37.774478 #4221] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:30:24.426083 #5112] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:30:24.427183 #5112] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T22:30:24.428265 #5112] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:30:26.788204 #5112] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:30:26.789856 #5112] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:30:26.790824 #5112] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:30:28.123043 #5112] DEBUG -- : -P  
D, [2016-11-19T22:30:28.124042 #5112] DEBUG -- : -L  
D, [2016-11-19T22:30:28.124410 #5112] DEBUG -- : -H  
D, [2016-11-19T22:30:28.124757 #5112] DEBUG -- : -D debugoptions
D, [2016-11-19T22:30:28.125097 #5112] DEBUG -- : -Olevel
D, [2016-11-19T22:30:28.127427 #5112] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:30:28.130208 #5112] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:30:28.132730 #5112] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:30:29.259115 #5112] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:30:29.262162 #5112] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:30:29.265508 #5112] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:30:31.217563 #5112] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:30:31.220844 #5112] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:30:31.223653 #5112] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:33:05.818698 #5112] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:33:05.821578 #5112] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:33:05.824341 #5112] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:33:07.445958 #5112] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:33:07.448632 #5112] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:33:07.451206 #5112] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:33:09.005419 #5112] DEBUG -- : -P  
D, [2016-11-19T22:33:09.005886 #5112] DEBUG -- : -L  
D, [2016-11-19T22:33:09.006223 #5112] DEBUG -- : -H  
D, [2016-11-19T22:33:09.006652 #5112] DEBUG -- : -D debugoptions
D, [2016-11-19T22:33:09.006981 #5112] DEBUG -- : -Olevel
D, [2016-11-19T22:33:09.009416 #5112] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:33:09.012051 #5112] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:33:09.014567 #5112] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:33:10.057142 #5112] DEBUG -- : 1, 1 / 11, 8
D, [2016-11-19T22:33:10.058799 #5112] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:33:12.336170 #5112] DEBUG -- : 1, 1 / 13, 17
D, [2016-11-19T22:33:12.337840 #5112] DEBUG -- : 15, 1 / 68, 21
D, [2016-11-19T22:33:12.338808 #5112] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:33:12.579099 #5112] DEBUG -- : 1, 1 / 13, 17
D, [2016-11-19T22:33:12.582000 #5112] DEBUG -- : 15, 1 / 68, 21
D, [2016-11-19T22:33:12.584835 #5112] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:33:13.460657 #5112] DEBUG -- : 1, 1 / 13, 17
D, [2016-11-19T22:33:13.463631 #5112] DEBUG -- : 15, 1 / 68, 21
D, [2016-11-19T22:33:13.466382 #5112] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:33:14.167540 #5112] DEBUG -- : 1, 1 / 11, 8
D, [2016-11-19T22:33:14.169477 #5112] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:33:46.229720 #5487] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:33:46.230880 #5487] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T22:33:46.232015 #5487] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:33:47.244589 #5487] DEBUG -- : find
D, [2016-11-19T22:33:47.923139 #5487] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:33:47.925223 #5487] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:33:47.950026 #5487] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:33:50.074226 #5487] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:33:50.077302 #5487] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:33:50.079911 #5487] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:33:50.942924 #5487] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:33:50.946071 #5487] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:33:50.948790 #5487] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:33:53.313930 #5487] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:33:53.315090 #5487] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:33:54.978583 #5487] DEBUG -- : find -H
D, [2016-11-19T22:33:55.756713 #5487] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:33:55.758183 #5487] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:33:55.759025 #5487] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:35:56.649698 #5747] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:35:56.650785 #5747] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T22:35:56.651831 #5747] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:36:01.146689 #5765] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:36:01.147814 #5765] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T22:36:01.148845 #5765] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:36:02.371963 #5765] DEBUG -- : find
D, [2016-11-19T22:36:03.022993 #5765] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:36:03.024713 #5765] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:36:03.025595 #5765] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:36:05.210121 #5765] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:36:05.212811 #5765] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:36:05.215663 #5765] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:36:06.201024 #5765] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:36:06.203844 #5765] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:36:06.206617 #5765] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:36:07.558857 #5765] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:36:07.561776 #5765] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:36:07.564542 #5765] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:36:08.443420 #5765] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:36:08.446107 #5765] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:36:08.448716 #5765] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:36:09.449632 #5765] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:36:09.452500 #5765] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:36:09.455038 #5765] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:36:10.131477 #5765] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:36:10.159886 #5765] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:36:10.161287 #5765] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:36:11.137088 #5765] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:36:11.140096 #5765] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:36:11.142687 #5765] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:36:11.921775 #5765] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:36:11.924532 #5765] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:36:11.927075 #5765] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:41:18.117834 #6315] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:41:18.118910 #6315] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T22:41:18.119974 #6315] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:41:20.387764 #6315] DEBUG -- : 1, 1 / 11, 19
D, [2016-11-19T22:41:20.389641 #6315] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-19T22:41:20.390580 #6315] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:41:21.724015 #6315] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T22:41:21.724634 #6315] DEBUG -- : 9, 1 / 22, 19
D, [2016-11-19T22:41:21.728933 #6315] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:41:22.984560 #6315] DEBUG -- : bash
D, [2016-11-19T22:41:24.646548 #6315] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T22:41:24.647159 #6315] DEBUG -- : 9, 1 / 38, 19
D, [2016-11-19T22:41:24.649366 #6315] DEBUG -- : 40, 1 / 68, 21
D, [2016-11-19T22:41:24.650059 #6315] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:41:26.947662 #6315] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T22:41:26.948836 #6315] DEBUG -- : 9, 1 / 38, 19
D, [2016-11-19T22:41:26.952705 #6315] DEBUG -- : 40, 1 / 68, 21
D, [2016-11-19T22:41:26.954763 #6315] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:41:28.791056 #6315] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T22:41:28.792183 #6315] DEBUG -- : 9, 1 / 38, 19
D, [2016-11-19T22:41:28.796274 #6315] DEBUG -- : 40, 1 / 68, 21
D, [2016-11-19T22:41:28.797140 #6315] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:41:30.211160 #6315] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T22:41:30.212230 #6315] DEBUG -- : 9, 1 / 38, 19
D, [2016-11-19T22:41:30.218465 #6315] DEBUG -- : 40, 1 / 68, 21
D, [2016-11-19T22:41:30.220645 #6315] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:41:32.505469 #6315] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T22:41:32.506466 #6315] DEBUG -- : 9, 1 / 38, 19
D, [2016-11-19T22:41:32.510595 #6315] DEBUG -- : 40, 1 / 68, 21
D, [2016-11-19T22:41:32.512818 #6315] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:41:33.296226 #6315] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T22:41:33.297267 #6315] DEBUG -- : 9, 1 / 38, 19
D, [2016-11-19T22:41:33.301332 #6315] DEBUG -- : 40, 1 / 68, 21
D, [2016-11-19T22:41:33.303503 #6315] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:41:38.121018 #6380] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:41:38.122099 #6380] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T22:41:38.123104 #6380] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:41:40.217832 #6380] DEBUG -- : 1, 1 / 11, 19
D, [2016-11-19T22:41:40.220794 #6380] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-19T22:41:40.222509 #6380] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:41:41.736636 #6380] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T22:41:41.737352 #6380] DEBUG -- : 9, 1 / 22, 19
D, [2016-11-19T22:41:41.741673 #6380] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:41:45.153752 #6380] DEBUG -- : bzip2
D, [2016-11-19T22:41:45.497663 #6380] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T22:41:45.498817 #6380] DEBUG -- : 9, 1 / 43, 11
D, [2016-11-19T22:41:45.500704 #6380] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:41:46.975687 #6380] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T22:41:46.976801 #6380] DEBUG -- : 9, 1 / 43, 11
D, [2016-11-19T22:41:46.978770 #6380] DEBUG -- : 45, 1 / 68, 21
D, [2016-11-19T22:41:46.980728 #6380] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:41:50.267393 #6380] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T22:41:50.268526 #6380] DEBUG -- : 9, 1 / 43, 11
D, [2016-11-19T22:41:50.270236 #6380] DEBUG -- : 45, 1 / 68, 21
D, [2016-11-19T22:41:50.272046 #6380] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:41:56.063636 #6442] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:41:56.064790 #6442] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T22:41:56.065813 #6442] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:41:57.920453 #6442] DEBUG -- : 1, 1 / 11, 19
D, [2016-11-19T22:41:57.923923 #6442] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-19T22:41:57.926123 #6442] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:41:59.357262 #6442] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T22:41:59.357864 #6442] DEBUG -- : 9, 1 / 22, 19
D, [2016-11-19T22:41:59.362219 #6442] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:42:02.723934 #6442] DEBUG -- : cat
D, [2016-11-19T22:42:03.048316 #6442] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T22:42:03.048980 #6442] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T22:42:03.050190 #6442] DEBUG -- : 22, 1 / 68, 21
D, [2016-11-19T22:42:03.050903 #6442] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:42:04.327541 #6442] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T22:42:04.328627 #6442] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T22:42:04.330378 #6442] DEBUG -- : 22, 1 / 74, 12
D, [2016-11-19T22:42:04.333711 #6442] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:42:08.035263 #6442] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T22:42:08.036392 #6442] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T22:42:08.038251 #6442] DEBUG -- : 22, 1 / 74, 12
D, [2016-11-19T22:42:08.041724 #6442] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:42:10.754315 #6442] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T22:42:10.755376 #6442] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T22:42:10.757303 #6442] DEBUG -- : 22, 1 / 74, 12
D, [2016-11-19T22:42:10.760872 #6442] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:42:12.664989 #6442] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T22:42:12.666042 #6442] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T22:42:12.667939 #6442] DEBUG -- : 22, 1 / 74, 12
D, [2016-11-19T22:42:12.671375 #6442] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:48:48.202608 #7126] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:48:48.203839 #7126] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T22:48:48.204959 #7126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:48:49.678870 #7126] DEBUG -- : find
D, [2016-11-19T22:48:50.346537 #7126] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:48:50.348161 #7126] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:48:50.349040 #7126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:48:51.236530 #7126] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:48:51.239325 #7126] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:48:51.241771 #7126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:48:52.171346 #7126] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:48:52.174690 #7126] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:48:52.177817 #7126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:48:53.020377 #7126] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:48:53.022875 #7126] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:48:53.024683 #7126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:49:10.192876 #7194] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:49:10.193976 #7194] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T22:49:10.194999 #7194] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:49:11.328554 #7194] DEBUG -- : find
D, [2016-11-19T22:49:12.011966 #7194] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:49:12.013792 #7194] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:49:12.014951 #7194] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:49:13.233105 #7194] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:49:13.236199 #7194] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:49:13.238769 #7194] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:49:14.251456 #7194] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:49:14.254514 #7194] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:49:14.257091 #7194] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:49:16.067947 #7194] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:49:16.070702 #7194] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:49:16.073297 #7194] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:49:17.058843 #7194] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:49:17.061536 #7194] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:49:17.064241 #7194] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:49:18.284574 #7194] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:49:18.286765 #7194] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:49:18.288972 #7194] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:55:31.043403 #7874] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:55:31.044537 #7874] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T22:55:31.045641 #7874] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:56:31.028629 #7978] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T22:56:31.029733 #7978] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T22:56:31.030748 #7978] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:56:32.915843 #7978] DEBUG -- : find
D, [2016-11-19T22:56:33.573989 #7978] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:56:33.575541 #7978] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:56:33.576474 #7978] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:56:35.474184 #7978] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:56:35.476946 #7978] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:56:35.479322 #7978] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:56:36.375154 #7978] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:56:36.378041 #7978] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:56:36.380607 #7978] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:56:37.796924 #7978] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:56:37.799652 #7978] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:56:37.802129 #7978] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T22:56:39.313173 #7978] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T22:56:39.315869 #7978] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T22:56:39.318455 #7978] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:01:44.098134 #8536] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T23:01:44.099492 #8536] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T23:01:44.100832 #8536] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:01:46.273561 #8536] DEBUG -- : find
D, [2016-11-19T23:01:46.939712 #8536] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:01:46.941449 #8536] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:01:46.942405 #8536] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:03:10.809214 #8703] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T23:03:10.810351 #8703] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T23:03:10.811467 #8703] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:03:37.368329 #8753] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T23:03:37.369423 #8753] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T23:03:37.370445 #8753] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:03:39.288406 #8753] DEBUG -- : find
D, [2016-11-19T23:03:39.975347 #8753] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:03:39.976998 #8753] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:03:39.977863 #8753] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:03:45.403385 #8753] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:03:45.406049 #8753] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:03:45.408511 #8753] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:03:46.549432 #8753] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:03:46.552285 #8753] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:03:46.554703 #8753] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:03:47.907909 #8753] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:03:47.910779 #8753] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:03:47.913359 #8753] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:03:48.689295 #8753] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:03:48.692479 #8753] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:03:48.694904 #8753] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:04:31.903349 #8873] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T23:04:31.904535 #8873] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T23:04:31.905635 #8873] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:04:33.251691 #8873] DEBUG -- : find
D, [2016-11-19T23:04:33.912747 #8873] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:04:33.914335 #8873] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:04:33.915178 #8873] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:05:35.073831 #9007] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T23:05:35.074912 #9007] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T23:05:35.076015 #9007] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:05:37.991289 #9007] DEBUG -- : find
D, [2016-11-19T23:05:38.662463 #9007] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:05:38.664278 #9007] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:05:38.665264 #9007] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:05:39.675179 #9007] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:05:39.678022 #9007] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:05:39.680875 #9007] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:05:40.607655 #9007] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:05:40.610351 #9007] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:05:40.612921 #9007] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:05:41.639297 #9007] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:05:41.642187 #9007] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:05:41.644687 #9007] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:05:42.449024 #9007] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:05:42.451927 #9007] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:05:42.454353 #9007] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:05:43.717699 #9007] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:05:43.720540 #9007] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:05:43.723186 #9007] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:04.423032 #9380] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T23:09:04.424140 #9380] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T23:09:04.425140 #9380] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:06.168456 #9380] DEBUG -- : find
D, [2016-11-19T23:09:06.826640 #9380] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:06.828196 #9380] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:06.829058 #9380] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:07.703465 #9380] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:07.706102 #9380] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:07.708730 #9380] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:08.682471 #9380] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:08.685165 #9380] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:08.687573 #9380] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:10.169234 #9380] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:10.172085 #9380] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:10.174509 #9380] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:11.622047 #9380] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:11.625047 #9380] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:11.627497 #9380] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:13.002487 #9380] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:13.005419 #9380] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:13.007970 #9380] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:14.609193 #9380] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:14.611840 #9380] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:14.614352 #9380] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:15.729193 #9380] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:15.731911 #9380] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:15.734504 #9380] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:16.658136 #9380] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:16.660894 #9380] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:16.663312 #9380] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:17.807896 #9380] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:17.810706 #9380] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:17.813349 #9380] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:18.507691 #9380] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:18.510370 #9380] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:18.512939 #9380] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:36.367453 #9460] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T23:09:36.368555 #9460] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T23:09:36.369566 #9460] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:37.582800 #9460] DEBUG -- : find
D, [2016-11-19T23:09:38.261572 #9460] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:38.263033 #9460] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:38.263876 #9460] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:39.494334 #9460] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:39.496957 #9460] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:39.499456 #9460] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:40.457821 #9460] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:40.461031 #9460] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:40.463485 #9460] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:41.383283 #9460] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:41.385986 #9460] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:41.388444 #9460] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:42.532635 #9460] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:42.535482 #9460] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:42.537964 #9460] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:44.245100 #9460] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:44.248036 #9460] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:44.250511 #9460] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:45.545689 #9460] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:45.548390 #9460] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:45.551069 #9460] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:46.710790 #9460] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:46.713450 #9460] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:46.716026 #9460] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:47.377113 #9460] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:47.379686 #9460] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:47.382159 #9460] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:48.469762 #9460] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:48.472659 #9460] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:48.475058 #9460] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:49.960165 #9460] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:49.962760 #9460] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:49.965393 #9460] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:51.498477 #9460] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:51.501196 #9460] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:51.503698 #9460] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:52.980437 #9460] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:52.983029 #9460] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:52.985500 #9460] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:09:54.380497 #9460] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:09:54.383105 #9460] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:09:54.385724 #9460] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:29.398920 #9973] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T23:14:29.400127 #9973] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T23:14:29.401203 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:31.008877 #9973] DEBUG -- : find
D, [2016-11-19T23:14:31.666373 #9973] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:14:31.667992 #9973] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:14:31.668833 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:34.606131 #9973] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:14:34.609022 #9973] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:14:34.611592 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:37.172592 #9973] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:14:37.175362 #9973] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:14:37.177930 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:39.155468 #9973] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:14:39.158447 #9973] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:14:39.161620 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:39.905880 #9973] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:14:39.908966 #9973] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:14:39.911627 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:41.358527 #9973] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:14:41.361432 #9973] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:14:41.363095 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:42.349752 #9973] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:14:42.352616 #9973] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:14:42.354747 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:43.093738 #9973] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:14:43.096753 #9973] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:14:43.099336 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:46.328145 #9973] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:14:46.331104 #9973] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:14:46.333881 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:47.192941 #9973] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:14:47.195853 #9973] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:14:47.198336 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:48.397394 #9973] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:14:48.400264 #9973] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:14:48.402728 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:49.536113 #9973] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T23:14:49.537804 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:50.845619 #9973] DEBUG -- : 1, 1 / 11, 19
D, [2016-11-19T23:14:50.848436 #9973] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-19T23:14:50.849303 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:52.135112 #9973] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:14:52.135801 #9973] DEBUG -- : 9, 1 / 22, 19
D, [2016-11-19T23:14:52.140761 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:53.784147 #9973] DEBUG -- : attr
D, [2016-11-19T23:14:54.167593 #9973] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:14:54.168718 #9973] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T23:14:54.170686 #9973] DEBUG -- : 22, 1 / 68, 21
D, [2016-11-19T23:14:54.172011 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:55.609271 #9973] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:14:55.610287 #9973] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T23:14:55.612306 #9973] DEBUG -- : 22, 1 / 68, 21
D, [2016-11-19T23:14:55.614332 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:56.919839 #9973] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:14:56.920872 #9973] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T23:14:56.922821 #9973] DEBUG -- : 22, 1 / 68, 21
D, [2016-11-19T23:14:56.923971 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:58.701903 #9973] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:14:58.702732 #9973] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T23:14:58.704465 #9973] DEBUG -- : 22, 1 / 68, 21
D, [2016-11-19T23:14:58.705271 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:14:59.393689 #9973] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:14:59.394753 #9973] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T23:14:59.396833 #9973] DEBUG -- : 22, 1 / 68, 21
D, [2016-11-19T23:14:59.398993 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:15:02.412213 #9973] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:15:02.413398 #9973] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T23:15:02.415316 #9973] DEBUG -- : 22, 1 / 68, 21
D, [2016-11-19T23:15:02.417319 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:15:07.575233 #9973] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:15:07.576406 #9973] DEBUG -- : 9, 1 / 22, 19
D, [2016-11-19T23:15:07.585828 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:15:09.103255 #9973] DEBUG -- : awk
D, [2016-11-19T23:15:09.935462 #9973] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:15:09.936165 #9973] DEBUG -- : 9, 1 / 42, 19
D, [2016-11-19T23:15:09.938255 #9973] DEBUG -- : 44, 1 / 68, 21
D, [2016-11-19T23:15:09.938995 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:15:12.118644 #9973] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:15:12.119861 #9973] DEBUG -- : 9, 1 / 42, 19
D, [2016-11-19T23:15:12.123543 #9973] DEBUG -- : 44, 1 / 68, 21
D, [2016-11-19T23:15:12.125801 #9973] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:15:17.060629 #10126] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T23:15:17.061739 #10126] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T23:15:17.062753 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:15:18.856374 #10126] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T23:15:18.858335 #10126] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T23:15:18.882760 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:15:19.878188 #10126] DEBUG -- : 1, 1 / 11, 19
D, [2016-11-19T23:15:19.880833 #10126] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-19T23:15:19.881771 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:15:21.303253 #10126] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:15:21.303923 #10126] DEBUG -- : 9, 1 / 22, 19
D, [2016-11-19T23:15:21.308954 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:15:23.317145 #10126] DEBUG -- : basename
D, [2016-11-19T23:15:23.701467 #10126] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:15:23.702498 #10126] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T23:15:23.704514 #10126] DEBUG -- : 22, 1 / 68, 21
D, [2016-11-19T23:15:23.705768 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:15:27.457832 #10126] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:15:27.458848 #10126] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T23:15:27.460855 #10126] DEBUG -- : 22, 1 / 68, 21
D, [2016-11-19T23:15:27.462632 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:15:30.103843 #10126] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:15:30.104981 #10126] DEBUG -- : 9, 1 / 22, 19
D, [2016-11-19T23:15:30.116131 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:15:31.433463 #10126] DEBUG -- : basename
D, [2016-11-19T23:15:31.786341 #10126] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:15:31.787466 #10126] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T23:15:31.789280 #10126] DEBUG -- : 22, 1 / 68, 21
D, [2016-11-19T23:15:31.790169 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:15:32.718789 #10126] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:15:32.719923 #10126] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T23:15:32.722013 #10126] DEBUG -- : 22, 1 / 85, 5
D, [2016-11-19T23:15:32.724052 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:16:15.602987 #10126] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:16:15.604125 #10126] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T23:16:15.606169 #10126] DEBUG -- : 22, 1 / 85, 5
D, [2016-11-19T23:16:15.608126 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:16:19.651140 #10126] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:16:19.652262 #10126] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T23:16:19.654244 #10126] DEBUG -- : 22, 1 / 85, 5
D, [2016-11-19T23:16:19.656209 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:16:20.991468 #10126] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:16:20.992639 #10126] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-19T23:16:20.994479 #10126] DEBUG -- : 22, 1 / 85, 5
D, [2016-11-19T23:16:20.996434 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:16:54.427482 #10126] DEBUG -- : 1, 1 / 11, 19
D, [2016-11-19T23:16:54.429689 #10126] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-19T23:16:54.430794 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:16:55.728491 #10126] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T23:16:55.730278 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:17:02.233230 #10126] DEBUG -- : find
D, [2016-11-19T23:17:02.887423 #10126] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:17:02.889136 #10126] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:17:02.889957 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:17:07.591585 #10126] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-19T23:17:07.594449 #10126] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-19T23:17:07.595957 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:17:08.387003 #10126] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T23:17:08.388744 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:17:10.791803 #10126] DEBUG -- : 1, 1 / 7, 12
D, [2016-11-19T23:17:10.793291 #10126] DEBUG -- : 9, 1 / 26, 19
D, [2016-11-19T23:17:10.796952 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:25:31.036205 #10126] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T23:25:31.037876 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:25:32.315883 #10126] DEBUG -- : 1, 1 / 11, 19
D, [2016-11-19T23:25:32.318982 #10126] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-19T23:25:32.320546 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:25:39.517746 #10126] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:25:39.518382 #10126] DEBUG -- : 9, 1 / 22, 19
D, [2016-11-19T23:25:39.523904 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:25:41.818347 #10126] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T23:25:41.820316 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:25:43.126927 #10126] DEBUG -- : 1, 1 / 11, 19
D, [2016-11-19T23:25:43.129261 #10126] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-19T23:25:43.130187 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:25:46.148367 #10126] DEBUG -- : 1, 1 / 11, 6
D, [2016-11-19T23:25:46.149341 #10126] DEBUG -- : 13, 1 / 40, 18
D, [2016-11-19T23:25:46.151310 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:25:48.554835 #10126] DEBUG -- : 1, 1 / 11, 19
D, [2016-11-19T23:25:48.557964 #10126] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-19T23:25:48.559485 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:25:51.044933 #10126] DEBUG -- : 1, 1 / 9, 18
D, [2016-11-19T23:25:51.046433 #10126] DEBUG -- : 11, 1 / 29, 19
D, [2016-11-19T23:25:51.057165 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:26:11.016722 #10126] DEBUG -- : 1, 1 / 13, 10
D, [2016-11-19T23:26:11.018575 #10126] DEBUG -- : 15, 1 / 68, 21
D, [2016-11-19T23:26:11.019814 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:26:12.088942 #10126] DEBUG -- : 1, 1 / 7, 5
D, [2016-11-19T23:26:12.090281 #10126] DEBUG -- : 9, 1 / 15, 2
D, [2016-11-19T23:26:12.091247 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:26:13.542434 #10126] DEBUG -- : 1, 1 / 9, 18
D, [2016-11-19T23:26:13.544120 #10126] DEBUG -- : 11, 1 / 29, 19
D, [2016-11-19T23:26:13.554433 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:26:16.154790 #10126] DEBUG -- : 1, 1 / 8, 6
D, [2016-11-19T23:26:16.156107 #10126] DEBUG -- : 10, 1 / 17, 17
D, [2016-11-19T23:26:16.157748 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:26:17.712692 #10126] DEBUG -- : 1, 1 / 10, 5
D, [2016-11-19T23:26:17.713933 #10126] DEBUG -- : 12, 1 / 54, 7
D, [2016-11-19T23:26:17.715900 #10126] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:40:28.882803 #12675] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T23:40:28.884012 #12675] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-19T23:40:28.885019 #12675] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-19T23:40:33.327069 #12691] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-19T23:40:33.328381 #12691] DEBUG -- : 10, 1 / 66, 41
D, [2016-11-19T23:40:33.329539 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:40:36.974869 #12691] DEBUG -- : 1, 1 / 11, 21
D, [2016-11-19T23:40:36.978173 #12691] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-19T23:40:36.980185 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:40:38.387699 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:40:38.388622 #12691] DEBUG -- : 9, 1 / 22, 39
D, [2016-11-19T23:40:38.394196 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:40:40.654181 #12691] DEBUG -- : echo
D, [2016-11-19T23:40:41.051928 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:40:41.052697 #12691] DEBUG -- : 9, 1 / 20, 10
D, [2016-11-19T23:40:41.053918 #12691] DEBUG -- : 22, 1 / 66, 41
D, [2016-11-19T23:40:41.054732 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:40:43.913587 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:40:43.914809 #12691] DEBUG -- : 9, 1 / 20, 10
D, [2016-11-19T23:40:43.917017 #12691] DEBUG -- : 22, 1 / 66, 41
D, [2016-11-19T23:40:43.918417 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:40:45.565594 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:40:45.566781 #12691] DEBUG -- : 9, 1 / 20, 10
D, [2016-11-19T23:40:45.568886 #12691] DEBUG -- : 22, 1 / 66, 41
D, [2016-11-19T23:40:45.570299 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:40:46.853676 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:40:46.854897 #12691] DEBUG -- : 9, 1 / 20, 10
D, [2016-11-19T23:40:46.857035 #12691] DEBUG -- : 22, 1 / 66, 41
D, [2016-11-19T23:40:46.859004 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:40:47.688305 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:40:47.689606 #12691] DEBUG -- : 9, 1 / 20, 10
D, [2016-11-19T23:40:47.691661 #12691] DEBUG -- : 22, 1 / 66, 41
D, [2016-11-19T23:40:47.693510 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:40:50.741340 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:40:50.742593 #12691] DEBUG -- : 9, 1 / 20, 10
D, [2016-11-19T23:40:50.744591 #12691] DEBUG -- : 22, 1 / 68, 5
D, [2016-11-19T23:40:50.746535 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:40:58.678987 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:40:58.680051 #12691] DEBUG -- : 9, 1 / 20, 10
D, [2016-11-19T23:40:58.684457 #12691] DEBUG -- : 22, 1 / 68, 5
D, [2016-11-19T23:40:58.686329 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:41:01.172095 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:41:01.173316 #12691] DEBUG -- : 9, 1 / 20, 10
D, [2016-11-19T23:41:01.175439 #12691] DEBUG -- : 22, 1 / 68, 5
D, [2016-11-19T23:41:01.177472 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:41:02.592802 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:41:02.593983 #12691] DEBUG -- : 9, 1 / 20, 10
D, [2016-11-19T23:41:02.596175 #12691] DEBUG -- : 22, 1 / 68, 5
D, [2016-11-19T23:41:02.598130 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:41:03.764456 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:41:03.765715 #12691] DEBUG -- : 9, 1 / 20, 10
D, [2016-11-19T23:41:03.767674 #12691] DEBUG -- : 22, 1 / 68, 5
D, [2016-11-19T23:41:03.769724 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:41:04.257456 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:41:04.258628 #12691] DEBUG -- : 9, 1 / 20, 10
D, [2016-11-19T23:41:04.260785 #12691] DEBUG -- : 22, 1 / 68, 5
D, [2016-11-19T23:41:04.262723 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:41:05.376669 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:41:05.377844 #12691] DEBUG -- : 9, 1 / 20, 10
D, [2016-11-19T23:41:05.379951 #12691] DEBUG -- : 22, 1 / 68, 5
D, [2016-11-19T23:41:05.381907 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:41:06.091861 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:41:06.093107 #12691] DEBUG -- : 9, 1 / 20, 10
D, [2016-11-19T23:41:06.095077 #12691] DEBUG -- : 22, 1 / 68, 5
D, [2016-11-19T23:41:06.097168 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:41:06.598235 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:41:06.599398 #12691] DEBUG -- : 9, 1 / 20, 10
D, [2016-11-19T23:41:06.601432 #12691] DEBUG -- : 22, 1 / 68, 5
D, [2016-11-19T23:41:06.603379 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:41:07.392692 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:41:07.393900 #12691] DEBUG -- : 9, 1 / 20, 10
D, [2016-11-19T23:41:07.396012 #12691] DEBUG -- : 22, 1 / 68, 5
D, [2016-11-19T23:41:07.398007 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:41:08.905958 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:41:08.907214 #12691] DEBUG -- : 9, 1 / 20, 10
D, [2016-11-19T23:41:08.909261 #12691] DEBUG -- : 22, 1 / 68, 5
D, [2016-11-19T23:41:08.911197 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:41:10.446115 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:41:10.447298 #12691] DEBUG -- : 9, 1 / 20, 10
D, [2016-11-19T23:41:10.449378 #12691] DEBUG -- : 22, 1 / 68, 5
D, [2016-11-19T23:41:10.451317 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:41:11.117822 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:41:11.118993 #12691] DEBUG -- : 9, 1 / 20, 10
D, [2016-11-19T23:41:11.121024 #12691] DEBUG -- : 22, 1 / 68, 5
D, [2016-11-19T23:41:11.122960 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:41:12.451375 #12691] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-19T23:41:12.452811 #12691] DEBUG -- : 9, 1 / 20, 10
D, [2016-11-19T23:41:12.454831 #12691] DEBUG -- : 22, 1 / 68, 5
D, [2016-11-19T23:41:12.456959 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-19T23:41:16.068309 #12691] DEBUG -- : 1, 1 / 11, 21
D, [2016-11-19T23:41:16.071812 #12691] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-19T23:41:16.073003 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-20T00:10:26.171958 #12691] DEBUG -- : 1, 1 / 8, 39
D, [2016-11-20T00:10:26.180256 #12691] DEBUG -- : 10, 1 / 23, 39
D, [2016-11-20T00:10:26.184887 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-20T00:11:01.327664 #12691] DEBUG -- : 1, 1 / 11, 21
D, [2016-11-20T00:11:01.329819 #12691] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-20T00:11:01.330853 #12691] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T13:35:33.475485 #4953] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T13:35:33.477129 #4953] DEBUG -- : 10, 1 / 68, 41
D, [2016-11-21T13:35:33.477629 #4953] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T13:35:36.496866 #4953] DEBUG -- : 1, 1 / 11, 21
D, [2016-11-21T13:35:36.500175 #4953] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-21T13:35:36.501277 #4953] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T13:35:37.741393 #4953] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T13:35:37.741897 #4953] DEBUG -- : 9, 1 / 22, 39
D, [2016-11-21T13:35:37.745768 #4953] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T13:35:39.804453 #4953] DEBUG -- : bzcat
D, [2016-11-21T13:35:40.061113 #4953] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T13:35:40.061764 #4953] DEBUG -- : 9, 1 / 43, 11
D, [2016-11-21T13:35:40.062807 #4953] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T13:35:45.517488 #4995] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T13:35:45.518177 #4995] DEBUG -- : 10, 1 / 68, 41
D, [2016-11-21T13:35:45.518703 #4995] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T13:35:48.337819 #4995] DEBUG -- : 1, 1 / 11, 21
D, [2016-11-21T13:35:48.340785 #4995] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-21T13:35:48.341802 #4995] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T13:35:49.510838 #4995] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T13:35:49.511454 #4995] DEBUG -- : 9, 1 / 22, 39
D, [2016-11-21T13:35:49.515602 #4995] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T13:35:51.388522 #4995] DEBUG -- : bzcat
D, [2016-11-21T13:35:51.651624 #4995] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T13:35:51.652802 #4995] DEBUG -- : 9, 1 / 43, 11
D, [2016-11-21T13:35:51.654426 #4995] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T13:35:53.978425 #4995] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T13:35:53.979647 #4995] DEBUG -- : 9, 1 / 43, 11
D, [2016-11-21T13:35:53.981857 #4995] DEBUG -- : 45, 1 / 68, 41
D, [2016-11-21T13:35:53.984358 #4995] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T13:35:59.778723 #4995] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T13:35:59.779963 #4995] DEBUG -- : 9, 1 / 43, 11
D, [2016-11-21T13:35:59.782259 #4995] DEBUG -- : 45, 1 / 68, 41
D, [2016-11-21T13:35:59.784890 #4995] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T13:36:01.103640 #4995] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T13:36:01.104254 #4995] DEBUG -- : 9, 1 / 43, 11
D, [2016-11-21T13:36:01.105162 #4995] DEBUG -- : 45, 1 / 68, 41
D, [2016-11-21T13:36:01.106222 #4995] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T13:38:21.323421 #5168] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T13:38:21.323956 #5168] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-21T13:38:21.324466 #5168] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-21T13:38:23.434356 #5168] DEBUG -- : 1, 1 / 11, 19
D, [2016-11-21T13:38:23.436939 #5168] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-21T13:38:23.437828 #5168] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-21T13:38:24.640683 #5168] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T13:38:24.641107 #5168] DEBUG -- : 9, 1 / 19, 19
D, [2016-11-21T13:38:24.643910 #5168] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-21T13:38:26.908233 #5168] DEBUG -- : bzcat
D, [2016-11-21T13:38:27.151565 #5168] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T13:38:27.152189 #5168] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T13:38:27.153127 #5168] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-21T15:22:52.594329 #12421] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T15:22:52.594919 #12421] DEBUG -- : 10, 1 / 64, 21
D, [2016-11-21T15:22:52.595378 #12421] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:22:55.335131 #12421] DEBUG -- : 1, 1 / 11, 19
D, [2016-11-21T15:22:55.338232 #12421] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-21T15:22:55.339795 #12421] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:22:56.632749 #12421] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T15:22:56.633201 #12421] DEBUG -- : 9, 1 / 19, 19
D, [2016-11-21T15:22:56.636726 #12421] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:22:58.167347 #12421] DEBUG -- : bzcat
D, [2016-11-21T15:22:58.432312 #12421] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T15:22:58.433419 #12421] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T15:22:58.435246 #12421] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:23:00.227347 #12421] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T15:23:00.228493 #12421] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T15:23:00.230482 #12421] DEBUG -- : 22, 1 / 64, 21
D, [2016-11-21T15:23:00.232601 #12421] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:30:18.330742 #12782] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T15:30:18.331323 #12782] DEBUG -- : 10, 1 / 64, 21
D, [2016-11-21T15:30:18.331753 #12782] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:30:28.160462 #12782] DEBUG -- : 1, 1 / 11, 19
D, [2016-11-21T15:30:28.162218 #12782] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-21T15:30:28.163103 #12782] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:30:32.533135 #12782] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T15:30:32.533561 #12782] DEBUG -- : 9, 1 / 19, 19
D, [2016-11-21T15:30:32.536893 #12782] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:30:34.617126 #12782] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T15:30:34.617788 #12782] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T15:30:34.618788 #12782] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:30:37.131394 #12782] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T15:30:37.132515 #12782] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T15:30:37.134418 #12782] DEBUG -- : 22, 1 / 64, 21
D, [2016-11-21T15:30:37.136499 #12782] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:30:40.218435 #12782] DEBUG -- : -c --stdout
D, [2016-11-21T15:30:40.219289 #12782] DEBUG -- : #<MatchData "-c --stdout" 1:"-c" 2:" " 3:"--stdout">
D, [2016-11-21T15:30:40.219956 #12782] DEBUG -- : -d --decompress
D, [2016-11-21T15:30:40.220362 #12782] DEBUG -- : #<MatchData "-d --decompress" 1:"-d" 2:" " 3:"--decompress">
D, [2016-11-21T15:30:40.220749 #12782] DEBUG -- : -z --compress
D, [2016-11-21T15:30:40.221047 #12782] DEBUG -- : #<MatchData "-z --compress" 1:"-z" 2:" " 3:"--compress">
D, [2016-11-21T15:30:40.221413 #12782] DEBUG -- : -t --test
D, [2016-11-21T15:30:40.221717 #12782] DEBUG -- : #<MatchData "-t --test" 1:"-t" 2:" " 3:"--test">
D, [2016-11-21T15:30:40.222084 #12782] DEBUG -- : -f --force
D, [2016-11-21T15:30:40.222472 #12782] DEBUG -- : #<MatchData "-f --force" 1:"-f" 2:" " 3:"--force">
D, [2016-11-21T15:30:40.222909 #12782] DEBUG -- : -k --keep
D, [2016-11-21T15:30:40.223212 #12782] DEBUG -- : #<MatchData "-k --keep" 1:"-k" 2:" " 3:"--keep">
D, [2016-11-21T15:30:40.223577 #12782] DEBUG -- : -s --small
D, [2016-11-21T15:30:40.223875 #12782] DEBUG -- : #<MatchData "-s --small" 1:"-s" 2:" " 3:"--small">
D, [2016-11-21T15:30:40.224285 #12782] DEBUG -- : -q --quiet
D, [2016-11-21T15:30:40.224579 #12782] DEBUG -- : #<MatchData "-q --quiet" 1:"-q" 2:" " 3:"--quiet">
D, [2016-11-21T15:30:40.224944 #12782] DEBUG -- : -p --show-progress
D, [2016-11-21T15:30:40.225245 #12782] DEBUG -- : #<MatchData "-p --show-progress" 1:"-p" 2:" " 3:"--show-progress">
D, [2016-11-21T15:30:40.225613 #12782] DEBUG -- : -v --verbose
D, [2016-11-21T15:30:40.225912 #12782] DEBUG -- : #<MatchData "-v --verbose" 1:"-v" 2:" " 3:"--verbose">
D, [2016-11-21T15:30:40.226328 #12782] DEBUG -- : -L --license -V --version
D, [2016-11-21T15:30:40.226622 #12782] DEBUG -- : #<MatchData "-L --license -V --version" 1:"-L" 2:" " 3:"--license -V --version">
D, [2016-11-21T15:30:40.227025 #12782] DEBUG -- : --  
D, [2016-11-21T15:30:40.227316 #12782] DEBUG -- : nil
D, [2016-11-21T15:31:59.232830 #12884] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T15:31:59.233448 #12884] DEBUG -- : 10, 1 / 64, 21
D, [2016-11-21T15:31:59.258205 #12884] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:32:01.588848 #12884] DEBUG -- : 1, 1 / 11, 19
D, [2016-11-21T15:32:01.591452 #12884] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-21T15:32:01.592812 #12884] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:32:02.813591 #12884] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T15:32:02.814003 #12884] DEBUG -- : 9, 1 / 19, 19
D, [2016-11-21T15:32:02.817177 #12884] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:32:04.872499 #12884] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T15:32:04.873358 #12884] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T15:32:04.875025 #12884] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:32:06.299346 #12884] DEBUG -- : -c --stdout
D, [2016-11-21T15:32:06.300291 #12884] DEBUG -- : #<MatchData "-c --stdout" 1:"-c" 2:"c" 3:" " 4:"--stdout">
D, [2016-11-21T15:32:06.300982 #12884] DEBUG -- : -d --decompress
D, [2016-11-21T15:32:06.301298 #12884] DEBUG -- : #<MatchData "-d --decompress" 1:"-d" 2:"d" 3:" " 4:"--decompress">
D, [2016-11-21T15:32:06.301686 #12884] DEBUG -- : -z --compress
D, [2016-11-21T15:32:06.302049 #12884] DEBUG -- : #<MatchData "-z --compress" 1:"-z" 2:"z" 3:" " 4:"--compress">
D, [2016-11-21T15:32:06.302432 #12884] DEBUG -- : -t --test
D, [2016-11-21T15:32:06.302738 #12884] DEBUG -- : #<MatchData "-t --test" 1:"-t" 2:"t" 3:" " 4:"--test">
D, [2016-11-21T15:32:06.303118 #12884] DEBUG -- : -f --force
D, [2016-11-21T15:32:06.303513 #12884] DEBUG -- : #<MatchData "-f --force" 1:"-f" 2:"f" 3:" " 4:"--force">
D, [2016-11-21T15:32:06.303896 #12884] DEBUG -- : -k --keep
D, [2016-11-21T15:32:06.304245 #12884] DEBUG -- : #<MatchData "-k --keep" 1:"-k" 2:"k" 3:" " 4:"--keep">
D, [2016-11-21T15:32:06.304626 #12884] DEBUG -- : -s --small
D, [2016-11-21T15:32:06.304927 #12884] DEBUG -- : #<MatchData "-s --small" 1:"-s" 2:"s" 3:" " 4:"--small">
D, [2016-11-21T15:32:06.305303 #12884] DEBUG -- : -q --quiet
D, [2016-11-21T15:32:06.305600 #12884] DEBUG -- : #<MatchData "-q --quiet" 1:"-q" 2:"q" 3:" " 4:"--quiet">
D, [2016-11-21T15:32:06.305976 #12884] DEBUG -- : -p --show-progress
D, [2016-11-21T15:32:06.306275 #12884] DEBUG -- : #<MatchData "-p --show-progress" 1:"-p" 2:"p" 3:" " 4:"--show-progress">
D, [2016-11-21T15:32:06.306705 #12884] DEBUG -- : -v --verbose
D, [2016-11-21T15:32:06.307003 #12884] DEBUG -- : #<MatchData "-v --verbose" 1:"-v" 2:"v" 3:" " 4:"--verbose">
D, [2016-11-21T15:32:06.307451 #12884] DEBUG -- : -L --license -V --version
D, [2016-11-21T15:32:06.307756 #12884] DEBUG -- : #<MatchData "-L --license -V --version" 1:"-L" 2:"L" 3:" " 4:"--license -V --version">
D, [2016-11-21T15:32:06.308196 #12884] DEBUG -- : --  
D, [2016-11-21T15:32:06.308553 #12884] DEBUG -- : #<MatchData "--  " 1:"--" 2:nil 3:" " 4:" ">
D, [2016-11-21T15:32:06.309887 #12884] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T15:32:06.310571 #12884] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T15:32:06.311910 #12884] DEBUG -- : 22, 1 / 64, 21
D, [2016-11-21T15:32:06.314339 #12884] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:32:14.504061 #12884] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T15:32:14.505185 #12884] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T15:32:14.507090 #12884] DEBUG -- : 22, 1 / 64, 21
D, [2016-11-21T15:32:14.510570 #12884] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:32:15.750620 #12884] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T15:32:15.754171 #12884] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T15:32:15.756119 #12884] DEBUG -- : 22, 1 / 64, 21
D, [2016-11-21T15:32:15.759762 #12884] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:32:16.323217 #12884] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T15:32:16.324345 #12884] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T15:32:16.326219 #12884] DEBUG -- : 22, 1 / 64, 21
D, [2016-11-21T15:32:16.329817 #12884] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:32:17.546088 #12884] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T15:32:17.547212 #12884] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T15:32:17.549098 #12884] DEBUG -- : 22, 1 / 64, 21
D, [2016-11-21T15:32:17.552623 #12884] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:32:18.895455 #12884] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T15:32:18.896644 #12884] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T15:32:18.898573 #12884] DEBUG -- : 22, 1 / 64, 21
D, [2016-11-21T15:32:18.902221 #12884] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:32:20.218506 #12884] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T15:32:20.219565 #12884] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T15:32:20.221595 #12884] DEBUG -- : 22, 1 / 64, 21
D, [2016-11-21T15:32:20.225218 #12884] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T15:32:37.245908 #12884] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T15:32:37.248002 #12884] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T15:32:37.249904 #12884] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T16:10:56.547120 #12884] DEBUG -- : -c --stdout
D, [2016-11-21T16:10:56.547568 #12884] DEBUG -- : #<MatchData "-c --stdout" 1:"-c" 2:"c" 3:" " 4:"--stdout">
D, [2016-11-21T16:10:56.547971 #12884] DEBUG -- : -d --decompress
D, [2016-11-21T16:10:56.548351 #12884] DEBUG -- : #<MatchData "-d --decompress" 1:"-d" 2:"d" 3:" " 4:"--decompress">
D, [2016-11-21T16:10:56.548767 #12884] DEBUG -- : -z --compress
D, [2016-11-21T16:10:56.549063 #12884] DEBUG -- : #<MatchData "-z --compress" 1:"-z" 2:"z" 3:" " 4:"--compress">
D, [2016-11-21T16:10:56.549442 #12884] DEBUG -- : -t --test
D, [2016-11-21T16:10:56.549745 #12884] DEBUG -- : #<MatchData "-t --test" 1:"-t" 2:"t" 3:" " 4:"--test">
D, [2016-11-21T16:10:56.550123 #12884] DEBUG -- : -f --force
D, [2016-11-21T16:10:56.550488 #12884] DEBUG -- : #<MatchData "-f --force" 1:"-f" 2:"f" 3:" " 4:"--force">
D, [2016-11-21T16:10:56.550864 #12884] DEBUG -- : -k --keep
D, [2016-11-21T16:10:56.551187 #12884] DEBUG -- : #<MatchData "-k --keep" 1:"-k" 2:"k" 3:" " 4:"--keep">
D, [2016-11-21T16:10:56.551565 #12884] DEBUG -- : -s --small
D, [2016-11-21T16:10:56.551868 #12884] DEBUG -- : #<MatchData "-s --small" 1:"-s" 2:"s" 3:" " 4:"--small">
D, [2016-11-21T16:10:56.552294 #12884] DEBUG -- : -q --quiet
D, [2016-11-21T16:10:56.552595 #12884] DEBUG -- : #<MatchData "-q --quiet" 1:"-q" 2:"q" 3:" " 4:"--quiet">
D, [2016-11-21T16:10:56.552974 #12884] DEBUG -- : -p --show-progress
D, [2016-11-21T16:10:56.553271 #12884] DEBUG -- : #<MatchData "-p --show-progress" 1:"-p" 2:"p" 3:" " 4:"--show-progress">
D, [2016-11-21T16:10:56.553683 #12884] DEBUG -- : -v --verbose
D, [2016-11-21T16:10:56.553983 #12884] DEBUG -- : #<MatchData "-v --verbose" 1:"-v" 2:"v" 3:" " 4:"--verbose">
D, [2016-11-21T16:10:56.554460 #12884] DEBUG -- : -L --license -V --version
D, [2016-11-21T16:10:56.554757 #12884] DEBUG -- : #<MatchData "-L --license -V --version" 1:"-L" 2:"L" 3:" " 4:"--license -V --version">
D, [2016-11-21T16:10:56.555146 #12884] DEBUG -- : --  
D, [2016-11-21T16:10:56.555533 #12884] DEBUG -- : #<MatchData "--  " 1:"--" 2:nil 3:" " 4:" ">
D, [2016-11-21T16:10:56.557864 #12884] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T16:10:56.559517 #12884] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T16:10:56.561057 #12884] DEBUG -- : 22, 1 / 64, 21
D, [2016-11-21T16:10:56.563144 #12884] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T16:10:58.418322 #12884] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T16:10:58.420038 #12884] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T16:10:58.422312 #12884] DEBUG -- : 22, 1 / 64, 21
D, [2016-11-21T16:10:58.426125 #12884] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T16:10:58.765910 #12884] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T16:10:58.767726 #12884] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T16:10:58.769918 #12884] DEBUG -- : 22, 1 / 64, 21
D, [2016-11-21T16:10:58.773580 #12884] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T16:10:59.602614 #12884] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T16:10:59.604728 #12884] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T16:10:59.607069 #12884] DEBUG -- : 22, 1 / 64, 21
D, [2016-11-21T16:10:59.610895 #12884] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T16:14:59.741696 #15639] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T16:14:59.742273 #15639] DEBUG -- : 10, 1 / 64, 21
D, [2016-11-21T16:14:59.742734 #15639] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T16:15:02.421043 #15639] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T16:15:02.422041 #15639] DEBUG -- : 14, 1 / 64, 21
D, [2016-11-21T16:15:02.422566 #15639] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T16:15:04.512433 #15639] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T16:15:04.515260 #15639] DEBUG -- : 14, 1 / 64, 21
D, [2016-11-21T16:15:04.516852 #15639] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T16:15:06.395677 #15639] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T16:15:06.398537 #15639] DEBUG -- : 14, 1 / 64, 21
D, [2016-11-21T16:15:06.400244 #15639] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T16:15:07.157833 #15639] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T16:15:07.160864 #15639] DEBUG -- : 14, 1 / 64, 21
D, [2016-11-21T16:15:07.162613 #15639] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T16:17:49.262052 #15779] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T16:17:49.262610 #15779] DEBUG -- : 10, 1 / 64, 21
D, [2016-11-21T16:17:49.263067 #15779] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T16:17:51.315792 #15779] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T16:17:51.317112 #15779] DEBUG -- : 14, 1 / 64, 21
D, [2016-11-21T16:17:51.317938 #15779] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T16:18:15.226610 #15828] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T16:18:15.227290 #15828] DEBUG -- : 10, 1 / 64, 21
D, [2016-11-21T16:18:15.227800 #15828] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T16:18:17.206178 #15828] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T16:18:17.207585 #15828] DEBUG -- : 14, 1 / 64, 21
D, [2016-11-21T16:18:17.208425 #15828] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T16:18:18.337252 #15828] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T16:18:18.340061 #15828] DEBUG -- : 14, 1 / 64, 21
D, [2016-11-21T16:18:18.341804 #15828] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T16:18:20.421402 #15828] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T16:18:20.424313 #15828] DEBUG -- : 14, 1 / 64, 21
D, [2016-11-21T16:18:20.425822 #15828] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T16:18:21.168495 #15828] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T16:18:21.171475 #15828] DEBUG -- : 14, 1 / 64, 21
D, [2016-11-21T16:18:21.173039 #15828] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T16:18:22.366982 #15828] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T16:18:22.370054 #15828] DEBUG -- : 14, 1 / 64, 21
D, [2016-11-21T16:18:22.371573 #15828] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T16:18:24.113507 #15828] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T16:18:24.116406 #15828] DEBUG -- : 14, 1 / 64, 21
D, [2016-11-21T16:18:24.117982 #15828] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T16:18:24.728709 #15828] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T16:18:24.731653 #15828] DEBUG -- : 14, 1 / 64, 21
D, [2016-11-21T16:18:24.733425 #15828] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-21T17:07:57.181977 #18874] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:07:57.182689 #18874] DEBUG -- : 10, 1 / 68, 41
D, [2016-11-21T17:07:57.183230 #18874] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T17:07:59.261489 #18874] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:07:59.262934 #18874] DEBUG -- : 14, 1 / 68, 41
D, [2016-11-21T17:07:59.263791 #18874] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T17:08:01.188209 #18874] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:08:01.191188 #18874] DEBUG -- : 14, 1 / 68, 41
D, [2016-11-21T17:08:01.193022 #18874] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T17:08:03.347971 #18874] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:08:03.351007 #18874] DEBUG -- : 14, 1 / 68, 41
D, [2016-11-21T17:08:03.352829 #18874] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T17:08:04.809483 #18874] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:08:04.812722 #18874] DEBUG -- : 14, 1 / 68, 41
D, [2016-11-21T17:08:04.816863 #18874] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T17:08:05.936450 #18874] DEBUG -- : -P  
D, [2016-11-21T17:08:05.937274 #18874] DEBUG -- : #<MatchData "-P  " 1:"-P" 2:"P" 3:" " 4:" ">
D, [2016-11-21T17:08:05.937963 #18874] DEBUG -- : -L  
D, [2016-11-21T17:08:05.938250 #18874] DEBUG -- : #<MatchData "-L  " 1:"-L" 2:"L" 3:" " 4:" ">
D, [2016-11-21T17:08:05.938609 #18874] DEBUG -- : -H  
D, [2016-11-21T17:08:05.938883 #18874] DEBUG -- : #<MatchData "-H  " 1:"-H" 2:"H" 3:" " 4:" ">
D, [2016-11-21T17:08:05.939239 #18874] DEBUG -- : -D debugoptions
D, [2016-11-21T17:08:05.939511 #18874] DEBUG -- : #<MatchData "-D debugoptions" 1:"-D" 2:"D" 3:" " 4:"debugoptions">
D, [2016-11-21T17:08:05.940049 #18874] DEBUG -- : -Olevel
D, [2016-11-21T17:08:05.940506 #18874] DEBUG -- : #<MatchData "-Olevel" 1:"-Olevel" 2:"Olevel" 3:"" 4:"">
D, [2016-11-21T17:08:05.943467 #18874] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:08:05.946488 #18874] DEBUG -- : 14, 1 / 68, 41
D, [2016-11-21T17:08:05.948827 #18874] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T17:08:07.532811 #18874] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:08:07.535788 #18874] DEBUG -- : 14, 1 / 68, 41
D, [2016-11-21T17:08:07.538461 #18874] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T17:10:13.054367 #19005] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:10:13.055047 #19005] DEBUG -- : 10, 1 / 68, 41
D, [2016-11-21T17:10:13.055578 #19005] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T17:10:14.633409 #19005] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:10:14.634851 #19005] DEBUG -- : 14, 1 / 68, 41
D, [2016-11-21T17:10:14.635619 #19005] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T17:10:16.445344 #19005] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:10:16.448354 #19005] DEBUG -- : 14, 1 / 68, 41
D, [2016-11-21T17:10:16.450217 #19005] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T17:10:18.166756 #19005] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:10:18.169887 #19005] DEBUG -- : 14, 1 / 68, 41
D, [2016-11-21T17:10:18.193876 #19005] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T17:12:53.105804 #19005] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:12:53.108974 #19005] DEBUG -- : 14, 1 / 68, 41
D, [2016-11-21T17:12:53.110698 #19005] DEBUG -- : 1, 40 / 68, 41
D, [2016-11-21T17:13:05.403318 #19167] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:13:05.403912 #19167] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-21T17:13:05.404436 #19167] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-21T17:13:07.828737 #19167] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:13:07.829742 #19167] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-21T17:13:07.830320 #19167] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-21T17:13:08.840153 #19167] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:13:08.842954 #19167] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-21T17:13:08.844774 #19167] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-21T17:13:46.761544 #19225] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:13:46.762133 #19225] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-21T17:13:46.762722 #19225] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-21T17:13:48.869383 #19225] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:13:48.870523 #19225] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-21T17:13:48.871078 #19225] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-21T17:13:50.561706 #19225] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:13:50.565254 #19225] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-21T17:13:50.566960 #19225] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-21T17:14:56.437428 #19300] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:14:56.438077 #19300] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-21T17:14:56.438625 #19300] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-21T17:14:58.376005 #19300] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:14:58.377439 #19300] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-21T17:14:58.378130 #19300] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-21T17:14:59.430633 #19300] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:14:59.433745 #19300] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-21T17:14:59.435282 #19300] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-21T17:15:08.429481 #19341] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:15:08.430070 #19341] DEBUG -- : 10, 1 / 68, 21
D, [2016-11-21T17:15:08.430670 #19341] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-21T17:15:09.798838 #19341] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:15:09.799934 #19341] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-21T17:15:09.800550 #19341] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-21T17:15:11.034899 #19341] DEBUG -- : urxvt -hold -e  find
D, [2016-11-21T17:15:15.921982 #19341] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:15:15.925224 #19341] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-21T17:15:15.926819 #19341] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-21T17:15:18.757981 #19341] DEBUG -- : -P  
D, [2016-11-21T17:15:18.758960 #19341] DEBUG -- : #<MatchData "-P  " 1:"-P" 2:"P" 3:" " 4:" ">
D, [2016-11-21T17:15:18.759679 #19341] DEBUG -- : -L  
D, [2016-11-21T17:15:18.760015 #19341] DEBUG -- : #<MatchData "-L  " 1:"-L" 2:"L" 3:" " 4:" ">
D, [2016-11-21T17:15:18.760487 #19341] DEBUG -- : -H  
D, [2016-11-21T17:15:18.760802 #19341] DEBUG -- : #<MatchData "-H  " 1:"-H" 2:"H" 3:" " 4:" ">
D, [2016-11-21T17:15:18.761193 #19341] DEBUG -- : -D debugoptions
D, [2016-11-21T17:15:18.761498 #19341] DEBUG -- : #<MatchData "-D debugoptions" 1:"-D" 2:"D" 3:" " 4:"debugoptions">
D, [2016-11-21T17:15:18.761887 #19341] DEBUG -- : -Olevel
D, [2016-11-21T17:15:18.762198 #19341] DEBUG -- : #<MatchData "-Olevel" 1:"-Olevel" 2:"Olevel" 3:"" 4:"">
D, [2016-11-21T17:15:18.764699 #19341] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:15:18.767621 #19341] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-21T17:15:18.769244 #19341] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-21T17:15:25.960327 #19341] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:15:25.963319 #19341] DEBUG -- : 14, 1 / 68, 21
D, [2016-11-21T17:15:25.965807 #19341] DEBUG -- : 1, 20 / 68, 21
D, [2016-11-21T17:15:27.697409 #19341] DEBUG -- : urxvt -hold -e  find -D
D, [2016-11-21T17:15:39.935404 #19395] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:15:39.936156 #19395] DEBUG -- : 10, 1 / 66, 41
D, [2016-11-21T17:15:39.936765 #19395] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:15:42.327534 #19395] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:15:42.329584 #19395] DEBUG -- : 10, 1 / 66, 41
D, [2016-11-21T17:15:42.331686 #19395] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:15:43.302189 #19395] DEBUG -- : 1, 1 / 11, 21
D, [2016-11-21T17:15:43.305031 #19395] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-21T17:15:43.305986 #19395] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:15:44.566446 #19395] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T17:15:44.566939 #19395] DEBUG -- : 9, 1 / 19, 39
D, [2016-11-21T17:15:44.571269 #19395] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:15:47.385334 #19395] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T17:15:47.385811 #19395] DEBUG -- : 9, 1 / 20, 39
D, [2016-11-21T17:15:47.387119 #19395] DEBUG -- : 22, 1 / 66, 41
D, [2016-11-21T17:15:47.387616 #19395] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:15:49.245952 #19395] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T17:15:49.247215 #19395] DEBUG -- : 9, 1 / 20, 39
D, [2016-11-21T17:15:49.252563 #19395] DEBUG -- : 22, 1 / 66, 41
D, [2016-11-21T17:15:49.256957 #19395] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:15:50.870908 #19395] DEBUG -- : -c     
D, [2016-11-21T17:15:50.871982 #19395] DEBUG -- : #<MatchData "-c     " 1:"-c" 2:"c" 3:" " 4:"    ">
D, [2016-11-21T17:15:50.872763 #19395] DEBUG -- : -i     
D, [2016-11-21T17:15:50.873097 #19395] DEBUG -- : #<MatchData "-i     " 1:"-i" 2:"i" 3:" " 4:"    ">
D, [2016-11-21T17:15:50.873488 #19395] DEBUG -- : -l     
D, [2016-11-21T17:15:50.873804 #19395] DEBUG -- : #<MatchData "-l     " 1:"-l" 2:"l" 3:" " 4:"    ">
D, [2016-11-21T17:15:50.874187 #19395] DEBUG -- : -r     
D, [2016-11-21T17:15:50.874498 #19395] DEBUG -- : #<MatchData "-r     " 1:"-r" 2:"r" 3:" " 4:"    ">
D, [2016-11-21T17:15:50.874879 #19395] DEBUG -- : -s     
D, [2016-11-21T17:15:50.875252 #19395] DEBUG -- : #<MatchData "-s     " 1:"-s" 2:"s" 3:" " 4:"    ">
D, [2016-11-21T17:15:50.875637 #19395] DEBUG -- : -D     
D, [2016-11-21T17:15:50.875950 #19395] DEBUG -- : #<MatchData "-D     " 1:"-D" 2:"D" 3:" " 4:"    ">
D, [2016-11-21T17:15:50.876390 #19395] DEBUG -- : --     
D, [2016-11-21T17:15:50.876687 #19395] DEBUG -- : #<MatchData "--     " 1:"--" 2:nil 3:" " 4:"    ">
D, [2016-11-21T17:15:50.877059 #19395] DEBUG -- : --debugger
D, [2016-11-21T17:15:50.877359 #19395] DEBUG -- : #<MatchData "--debugger" 1:"--debugger" 2:"debugger" 3:"" 4:"">
D, [2016-11-21T17:15:50.877816 #19395] DEBUG -- : --dump-po-strings
D, [2016-11-21T17:15:50.878112 #19395] DEBUG -- : #<MatchData "--dump-po-strings" 1:"--dump" 2:"dump" 3:"" 4:"-po-strings">
D, [2016-11-21T17:15:50.878498 #19395] DEBUG -- : --dump-strings
D, [2016-11-21T17:15:50.878794 #19395] DEBUG -- : #<MatchData "--dump-strings" 1:"--dump" 2:"dump" 3:"" 4:"-strings">
D, [2016-11-21T17:15:50.879173 #19395] DEBUG -- : --init-file file
D, [2016-11-21T17:15:50.879471 #19395] DEBUG -- : #<MatchData "--init-file file" 1:"--init" 2:"init" 3:"" 4:"-file file">
D, [2016-11-21T17:15:50.879924 #19395] DEBUG -- : --login
D, [2016-11-21T17:15:50.880264 #19395] DEBUG -- : #<MatchData "--login" 1:"--login" 2:"login" 3:"" 4:"">
D, [2016-11-21T17:15:50.880645 #19395] DEBUG -- : --noediting
D, [2016-11-21T17:15:50.880939 #19395] DEBUG -- : #<MatchData "--noediting" 1:"--noediting" 2:"noediting" 3:"" 4:"">
D, [2016-11-21T17:15:50.881319 #19395] DEBUG -- : --noprofile
D, [2016-11-21T17:15:50.881610 #19395] DEBUG -- : #<MatchData "--noprofile" 1:"--noprofile" 2:"noprofile" 3:"" 4:"">
D, [2016-11-21T17:15:50.882026 #19395] DEBUG -- : --posix
D, [2016-11-21T17:15:50.882322 #19395] DEBUG -- : #<MatchData "--posix" 1:"--posix" 2:"posix" 3:"" 4:"">
D, [2016-11-21T17:15:50.882750 #19395] DEBUG -- : --restricted
D, [2016-11-21T17:15:50.883047 #19395] DEBUG -- : #<MatchData "--restricted" 1:"--restricted" 2:"restricted" 3:"" 4:"">
D, [2016-11-21T17:15:50.883430 #19395] DEBUG -- : --verbose
D, [2016-11-21T17:15:50.883814 #19395] DEBUG -- : #<MatchData "--verbose" 1:"--verbose" 2:"verbose" 3:"" 4:"">
D, [2016-11-21T17:15:50.884240 #19395] DEBUG -- : --version
D, [2016-11-21T17:15:50.884421 #19395] DEBUG -- : #<MatchData "--version" 1:"--version" 2:"version" 3:"" 4:"">
D, [2016-11-21T17:15:50.886142 #19395] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T17:15:50.886935 #19395] DEBUG -- : 9, 1 / 20, 39
D, [2016-11-21T17:15:50.889887 #19395] DEBUG -- : 22, 1 / 66, 41
D, [2016-11-21T17:15:50.893120 #19395] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:16:06.352591 #19395] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T17:16:06.353856 #19395] DEBUG -- : 9, 1 / 20, 39
D, [2016-11-21T17:16:06.356917 #19395] DEBUG -- : 22, 1 / 66, 41
D, [2016-11-21T17:16:06.360281 #19395] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:16:08.374639 #19395] DEBUG -- : urxvt -hold -e  bash --verbose
D, [2016-11-21T17:16:41.702357 #19475] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:16:41.703004 #19475] DEBUG -- : 10, 1 / 66, 41
D, [2016-11-21T17:16:41.703609 #19475] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:17:12.624925 #19514] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:17:12.625522 #19514] DEBUG -- : 10, 1 / 68, 19
D, [2016-11-21T17:17:12.626012 #19514] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:19:28.873223 #19600] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:19:28.873565 #19600] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:19:28.874026 #19600] DEBUG -- : 10, 1 / 68, 19
D, [2016-11-21T17:19:32.277858 #19600] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:19:32.278715 #19600] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:19:32.280520 #19600] DEBUG -- : 10, 1 / 68, 19
D, [2016-11-21T17:19:33.264209 #19600] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:19:33.265046 #19600] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:19:33.266887 #19600] DEBUG -- : 10, 1 / 68, 19
D, [2016-11-21T17:19:43.008005 #19630] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:19:43.008436 #19630] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:19:43.008974 #19630] DEBUG -- : 10, 1 / 66, 41
D, [2016-11-21T17:19:46.191631 #19630] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:19:46.192196 #19630] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:19:46.193553 #19630] DEBUG -- : 14, 1 / 66, 41
D, [2016-11-21T17:19:52.655917 #19669] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:19:52.656271 #19669] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:19:52.656771 #19669] DEBUG -- : 10, 1 / 66, 41
D, [2016-11-21T17:19:54.285984 #19669] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:19:54.286904 #19669] DEBUG -- : 1, 1 / 11, 21
D, [2016-11-21T17:19:54.289506 #19669] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-21T17:19:55.938736 #19669] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:19:55.939022 #19669] DEBUG -- : 1, 1 / 11, 6
D, [2016-11-21T17:19:55.939507 #19669] DEBUG -- : 13, 1 / 25, 18
D, [2016-11-21T17:19:57.675864 #19669] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:19:57.676920 #19669] DEBUG -- : 1, 1 / 11, 9
D, [2016-11-21T17:19:57.679722 #19669] DEBUG -- : 13, 1 / 23, 5
D, [2016-11-21T17:19:58.884762 #19669] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:19:58.885674 #19669] DEBUG -- : 1, 1 / 11, 21
D, [2016-11-21T17:19:58.888775 #19669] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-21T17:20:00.233597 #19669] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:20:00.234624 #19669] DEBUG -- : 1, 1 / 8, 3
D, [2016-11-21T17:20:00.235815 #19669] DEBUG -- : 10, 1 / 66, 41
D, [2016-11-21T17:20:01.302225 #19669] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:20:01.303108 #19669] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:20:02.580612 #19669] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:20:02.581536 #19669] DEBUG -- : 1, 1 / 11, 21
D, [2016-11-21T17:20:02.584600 #19669] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-21T17:20:04.428946 #19669] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:20:04.429276 #19669] DEBUG -- : 1, 1 / 8, 39
D, [2016-11-21T17:20:04.432890 #19669] DEBUG -- : 10, 1 / 22, 39
D, [2016-11-21T17:20:05.785929 #19669] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:20:05.786510 #19669] DEBUG -- : 1, 1 / 10, 11
D, [2016-11-21T17:20:05.787858 #19669] DEBUG -- : 12, 1 / 23, 39
D, [2016-11-21T17:20:06.926250 #19669] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:20:06.926726 #19669] DEBUG -- : 1, 1 / 10, 9
D, [2016-11-21T17:20:06.927701 #19669] DEBUG -- : 12, 1 / 24, 33
D, [2016-11-21T17:20:10.384308 #19669] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:20:10.385209 #19669] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:20:11.375121 #19669] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:20:11.376047 #19669] DEBUG -- : 1, 1 / 11, 21
D, [2016-11-21T17:20:11.379440 #19669] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-21T17:20:12.957128 #19669] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:20:12.957492 #19669] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T17:20:12.957911 #19669] DEBUG -- : 9, 1 / 19, 39
D, [2016-11-21T17:20:14.883330 #19669] DEBUG -- : 1, 40 / 66, 41
D, [2016-11-21T17:20:14.883663 #19669] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T17:20:14.883972 #19669] DEBUG -- : 9, 1 / 20, 39
D, [2016-11-21T17:20:14.885227 #19669] DEBUG -- : 22, 1 / 66, 41
D, [2016-11-21T17:23:08.301170 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:23:08.301450 #19857] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:23:08.301892 #19857] DEBUG -- : 10, 1 / 68, 19
D, [2016-11-21T17:23:10.343909 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:23:10.344420 #19857] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:23:10.345331 #19857] DEBUG -- : 14, 1 / 68, 19
D, [2016-11-21T17:23:11.507758 #19857] DEBUG -- : urxvt -hold -e  find
D, [2016-11-21T17:23:17.563729 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:23:17.564672 #19857] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:23:17.567665 #19857] DEBUG -- : 14, 1 / 68, 19
D, [2016-11-21T17:26:41.286769 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:26:41.287672 #19857] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:26:41.290587 #19857] DEBUG -- : 14, 1 / 68, 19
D, [2016-11-21T17:26:43.815075 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:26:43.815940 #19857] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:26:43.819045 #19857] DEBUG -- : 14, 1 / 68, 19
D, [2016-11-21T17:26:44.143563 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:26:44.144499 #19857] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:26:44.147559 #19857] DEBUG -- : 14, 1 / 68, 19
D, [2016-11-21T17:26:44.785339 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:26:44.786196 #19857] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:26:44.789088 #19857] DEBUG -- : 14, 1 / 68, 19
D, [2016-11-21T17:26:46.055614 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:26:46.056546 #19857] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:26:46.059363 #19857] DEBUG -- : 14, 1 / 73, 19
D, [2016-11-21T17:26:47.463984 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:26:47.464905 #19857] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:26:47.467867 #19857] DEBUG -- : 14, 1 / 73, 19
D, [2016-11-21T17:26:49.566973 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:26:49.567484 #19857] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:26:49.570338 #19857] DEBUG -- : 14, 1 / 73, 19
D, [2016-11-21T17:26:50.274440 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:26:50.275282 #19857] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:26:50.278268 #19857] DEBUG -- : 14, 1 / 73, 19
D, [2016-11-21T17:26:51.584451 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:26:51.585273 #19857] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:26:51.588180 #19857] DEBUG -- : 14, 1 / 73, 19
D, [2016-11-21T17:26:52.108577 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:26:52.109419 #19857] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:26:52.112479 #19857] DEBUG -- : 14, 1 / 73, 19
D, [2016-11-21T17:26:53.831006 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:26:53.831818 #19857] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:26:53.834752 #19857] DEBUG -- : 14, 1 / 73, 19
D, [2016-11-21T17:26:58.117467 #19857] DEBUG -- : urxvt -hold -e  find
D, [2016-11-21T17:27:00.941453 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:27:00.942287 #19857] DEBUG -- : 1, 1 / 12, 17
D, [2016-11-21T17:27:00.945200 #19857] DEBUG -- : 14, 1 / 73, 19
D, [2016-11-21T17:27:03.829620 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:27:03.830434 #19857] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:27:05.022518 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:27:05.023256 #19857] DEBUG -- : 1, 1 / 11, 17
D, [2016-11-21T17:27:05.025984 #19857] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-21T17:27:06.239388 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:27:06.239770 #19857] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T17:27:06.240206 #19857] DEBUG -- : 9, 1 / 19, 17
D, [2016-11-21T17:27:14.477470 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:27:14.478258 #19857] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T17:27:14.479354 #19857] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T17:27:14.481225 #19857] DEBUG -- : 22, 1 / 73, 19
D, [2016-11-21T17:27:16.678153 #19857] DEBUG -- : urxvt -hold -e  basename
D, [2016-11-21T17:27:19.237960 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:27:19.238829 #19857] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T17:27:19.239941 #19857] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T17:27:19.241941 #19857] DEBUG -- : 22, 1 / 73, 19
D, [2016-11-21T17:27:20.891663 #19857] DEBUG -- : -a, --multiple
D, [2016-11-21T17:27:20.892490 #19857] DEBUG -- : #<MatchData "--multiple" 1:"--multiple" 2:"multiple" 3:"" 4:"">
D, [2016-11-21T17:27:20.893154 #19857] DEBUG -- : -s, --suffix=SUFFIX
D, [2016-11-21T17:27:20.893442 #19857] DEBUG -- : #<MatchData "--suffix=SUFFIX" 1:"--suffix" 2:"suffix" 3:"=" 4:"SUFFIX">
D, [2016-11-21T17:27:20.893812 #19857] DEBUG -- : -z, --zero
D, [2016-11-21T17:27:20.894091 #19857] DEBUG -- : #<MatchData "--zero" 1:"--zero" 2:"zero" 3:"" 4:"">
D, [2016-11-21T17:27:20.894596 #19857] DEBUG -- : --version
D, [2016-11-21T17:27:20.894872 #19857] DEBUG -- : #<MatchData "--version" 1:"--version" 2:"version" 3:"" 4:"">
D, [2016-11-21T17:27:20.896910 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:27:20.897680 #19857] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T17:27:20.898638 #19857] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T17:27:20.900656 #19857] DEBUG -- : 22, 1 / 73, 19
D, [2016-11-21T17:27:28.410792 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:27:28.411451 #19857] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T17:27:28.412582 #19857] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T17:27:28.414651 #19857] DEBUG -- : 22, 1 / 73, 19
D, [2016-11-21T17:27:34.877826 #19857] DEBUG -- : urxvt -hold -e  basename
D, [2016-11-21T17:27:36.821520 #19857] DEBUG -- : 1, 18 / 68, 19
D, [2016-11-21T17:27:36.822395 #19857] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T17:27:36.823386 #19857] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T17:27:36.825486 #19857] DEBUG -- : 22, 1 / 73, 19
D, [2016-11-21T17:27:45.964819 #19857] DEBUG -- : 1, 18 / 62, 19
D, [2016-11-21T17:27:45.965862 #19857] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T17:27:45.967062 #19857] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T17:27:45.969347 #19857] DEBUG -- : 22, 1 / 73, 19
D, [2016-11-21T17:27:48.022041 #19857] DEBUG -- : 1, 18 / 62, 19
D, [2016-11-21T17:27:48.022999 #19857] DEBUG -- : 1, 1 / 7, 3
D, [2016-11-21T17:27:48.024198 #19857] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-21T17:27:48.026273 #19857] DEBUG -- : 22, 1 / 61, 41
D, [2016-11-21T17:27:49.386383 #19857] DEBUG -- : 1, 18 / 62, 19
D, [2016-11-21T17:27:49.387482 #19857] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-21T17:27:49.389400 #19857] DEBUG -- : 9, 1 / 20, 11
D, [2016-11-28T13:47:47.039664 #8031] DEBUG -- : prompt
D, [2016-11-28T13:47:47.066895 #8031] DEBUG -- : command
D, [2016-11-28T13:47:47.067010 #8031] DEBUG -- : 0
D, [2016-11-28T13:48:03.435999 #8064] DEBUG -- : prompt
D, [2016-11-28T13:48:03.436185 #8064] DEBUG -- : command
D, [2016-11-28T13:48:03.436257 #8064] DEBUG -- : 0
D, [2016-11-28T13:49:00.629678 #8100] DEBUG -- : prompt
D, [2016-11-28T13:49:00.629925 #8100] DEBUG -- : command
D, [2016-11-28T13:49:00.630026 #8100] DEBUG -- : default
D, [2016-11-28T13:49:00.630129 #8100] DEBUG -- : default
D, [2016-11-28T13:49:00.630376 #8100] DEBUG -- : directory
D, [2016-11-28T13:49:00.630504 #8100] DEBUG -- : directory
D, [2016-11-28T13:49:00.630646 #8100] DEBUG -- : directory
D, [2016-11-28T13:49:00.630759 #8100] DEBUG -- : special
D, [2016-11-28T13:49:00.630865 #8100] DEBUG -- : special
D, [2016-11-28T13:49:00.630961 #8100] DEBUG -- : directory
D, [2016-11-28T13:49:00.631060 #8100] DEBUG -- : executable
D, [2016-11-28T13:49:00.631149 #8100] DEBUG -- : default
D, [2016-11-28T13:49:00.631237 #8100] DEBUG -- : default
D, [2016-11-28T13:49:00.631543 #8100] DEBUG -- : text
D, [2016-11-28T13:49:00.631714 #8100] DEBUG -- : default
D, [2016-11-28T13:49:00.631826 #8100] DEBUG -- : default
D, [2016-11-28T13:49:16.722073 #8100] DEBUG -- : prompt
D, [2016-11-28T13:49:16.722544 #8100] DEBUG -- : command
D, [2016-11-28T13:49:16.722875 #8100] DEBUG -- : default
D, [2016-11-28T13:49:16.723248 #8100] DEBUG -- : default
D, [2016-11-28T13:49:16.724129 #8100] DEBUG -- : directory
D, [2016-11-28T13:49:16.724530 #8100] DEBUG -- : directory
D, [2016-11-28T13:49:16.724917 #8100] DEBUG -- : directory
D, [2016-11-28T13:49:16.725294 #8100] DEBUG -- : special
D, [2016-11-28T13:49:16.725654 #8100] DEBUG -- : special
D, [2016-11-28T13:49:16.726007 #8100] DEBUG -- : directory
D, [2016-11-28T13:49:16.726358 #8100] DEBUG -- : executable
D, [2016-11-28T13:49:16.726801 #8100] DEBUG -- : default
D, [2016-11-28T13:49:16.727128 #8100] DEBUG -- : default
D, [2016-11-28T13:49:16.728202 #8100] DEBUG -- : text
D, [2016-11-28T13:49:16.729070 #8100] DEBUG -- : default
D, [2016-11-28T13:49:16.729524 #8100] DEBUG -- : default
D, [2016-11-28T13:49:17.924160 #8114] DEBUG -- : default
D, [2016-11-28T13:49:17.924392 #8114] DEBUG -- : prompt
D, [2016-11-28T13:49:17.924468 #8114] DEBUG -- : command
D, [2016-11-28T13:49:17.924537 #8114] DEBUG -- : default
D, [2016-11-28T13:49:17.924699 #8114] DEBUG -- : default
D, [2016-11-28T13:49:17.924839 #8114] DEBUG -- : directory
D, [2016-11-28T13:49:17.924942 #8114] DEBUG -- : directory
D, [2016-11-28T13:49:17.925064 #8114] DEBUG -- : directory
D, [2016-11-28T13:49:17.925160 #8114] DEBUG -- : special
D, [2016-11-28T13:49:17.925277 #8114] DEBUG -- : special
D, [2016-11-28T13:49:17.925357 #8114] DEBUG -- : directory
D, [2016-11-28T13:49:17.925441 #8114] DEBUG -- : executable
D, [2016-11-28T13:49:17.925514 #8114] DEBUG -- : default
D, [2016-11-28T13:49:17.925780 #8114] DEBUG -- : default
D, [2016-11-28T13:49:17.925893 #8114] DEBUG -- : text
D, [2016-11-28T13:49:17.926023 #8114] DEBUG -- : default
D, [2016-11-28T15:20:53.431603 #8114] DEBUG -- : default
D, [2016-11-28T15:20:53.432086 #8114] DEBUG -- : prompt
D, [2016-11-28T15:20:53.432408 #8114] DEBUG -- : command
D, [2016-11-28T15:20:53.432722 #8114] DEBUG -- : default
D, [2016-11-28T15:20:53.433369 #8114] DEBUG -- : default
D, [2016-11-28T15:20:53.433837 #8114] DEBUG -- : directory
D, [2016-11-28T15:20:53.434193 #8114] DEBUG -- : directory
D, [2016-11-28T15:20:53.434538 #8114] DEBUG -- : directory
D, [2016-11-28T15:20:53.434896 #8114] DEBUG -- : special
D, [2016-11-28T15:20:53.435249 #8114] DEBUG -- : special
D, [2016-11-28T15:20:53.435651 #8114] DEBUG -- : directory
D, [2016-11-28T15:20:53.436113 #8114] DEBUG -- : executable
D, [2016-11-28T15:20:53.436419 #8114] DEBUG -- : default
D, [2016-11-28T15:20:53.437441 #8114] DEBUG -- : default
D, [2016-11-28T15:20:53.437784 #8114] DEBUG -- : text
D, [2016-11-28T15:20:53.438444 #8114] DEBUG -- : default
D, [2016-11-28T15:20:53.846251 #8114] DEBUG -- : default
D, [2016-11-28T15:20:53.846707 #8114] DEBUG -- : prompt
D, [2016-11-28T15:20:53.847009 #8114] DEBUG -- : command
D, [2016-11-28T15:33:37.468456 #12773] DEBUG -- : prompt
D, [2016-11-28T15:33:37.468694 #12773] DEBUG -- : command
D, [2016-11-28T15:33:37.468909 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:37.469048 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:37.469124 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:37.469319 #12773] DEBUG -- : special
D, [2016-11-28T15:33:37.469431 #12773] DEBUG -- : special
D, [2016-11-28T15:33:37.469528 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:37.469627 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:37.469895 #12773] DEBUG -- : text
D, [2016-11-28T15:33:41.226756 #12773] DEBUG -- : prompt
D, [2016-11-28T15:33:41.227859 #12773] DEBUG -- : command
D, [2016-11-28T15:33:41.228402 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.228928 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.229148 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.229367 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.229696 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.229915 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.230117 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.230334 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.230535 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.230745 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.230958 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.231164 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.231396 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.231608 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.231817 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.232025 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.232233 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.232440 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.232646 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.232854 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:41.233850 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:50.297726 #12773] DEBUG -- : prompt
D, [2016-11-28T15:33:50.297956 #12773] DEBUG -- : command
D, [2016-11-28T15:33:50.298280 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:50.298467 #12773] DEBUG -- : directory
D, [2016-11-28T15:33:50.298719 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:50.298900 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:50.299045 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:50.299189 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:50.299290 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:50.299372 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:50.299449 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:50.299527 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:50.299602 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:50.299676 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:50.299752 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:50.299831 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:50.300008 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:50.300160 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:50.300308 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:50.300456 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:50.300600 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:50.300747 #12773] DEBUG -- : executable
D, [2016-11-28T15:33:50.300936 #12773] DEBUG -- : default
D, [2016-11-28T15:34:08.223430 #12796] DEBUG -- : prompt
D, [2016-11-28T15:34:08.223664 #12796] DEBUG -- : command
D, [2016-11-28T15:34:08.223909 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:08.224009 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:08.224086 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:08.224179 #12796] DEBUG -- : special
D, [2016-11-28T15:34:08.224269 #12796] DEBUG -- : special
D, [2016-11-28T15:34:08.224365 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:08.224443 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:08.224691 #12796] DEBUG -- : text
D, [2016-11-28T15:34:10.056678 #12796] DEBUG -- : prompt
D, [2016-11-28T15:34:10.057117 #12796] DEBUG -- : command
D, [2016-11-28T15:34:10.058301 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.058685 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.059193 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.059511 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.059694 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.059868 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.060039 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.060211 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.060382 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.060559 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.060730 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.060900 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.061071 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.061244 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.061414 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.061580 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.061751 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.061921 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.062090 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.062261 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:10.063129 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:11.432013 #12796] DEBUG -- : prompt
D, [2016-11-28T15:34:11.432560 #12796] DEBUG -- : command
D, [2016-11-28T15:34:11.433330 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:11.433616 #12796] DEBUG -- : directory
D, [2016-11-28T15:34:11.434148 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:11.434607 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:11.434828 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:11.435022 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:11.435214 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:11.435450 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:11.435643 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:11.435827 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:11.436018 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:11.436264 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:11.436457 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:11.436742 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:11.436934 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:11.437125 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:11.437315 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:11.437505 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:11.437695 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:11.437886 #12796] DEBUG -- : executable
D, [2016-11-28T15:34:11.438061 #12796] DEBUG -- : default
D, [2016-11-28T15:35:24.808563 #12847] DEBUG -- : 18
D, [2016-11-28T15:36:35.071634 #12903] DEBUG -- : 18
D, [2016-11-28T15:36:52.261521 #12917] DEBUG -- : 18
D, [2016-11-28T15:36:54.613270 #12917] DEBUG -- : 18
D, [2016-11-28T17:50:47.008513 #19770] DEBUG -- : 19
D, [2016-11-28T17:50:52.141863 #19770] DEBUG -- : 19
D, [2016-11-28T17:50:54.020181 #19770] DEBUG -- : 19
D, [2016-11-28T17:50:55.113850 #19770] DEBUG -- : 19
D, [2016-11-28T17:51:42.566672 #19863] DEBUG -- : 19
D, [2016-11-28T17:51:44.139602 #19863] DEBUG -- : 19
D, [2016-11-28T17:51:45.111797 #19863] DEBUG -- : 19
D, [2016-11-28T17:51:45.559567 #19863] DEBUG -- : 19
D, [2016-11-28T18:00:10.509234 #20223] DEBUG -- : 1
D, [2016-11-28T18:00:11.577472 #20223] DEBUG -- : 1
D, [2016-11-28T18:00:24.808758 #20223] DEBUG -- : 1
D, [2016-11-28T18:00:26.724339 #20223] DEBUG -- : 1
D, [2016-11-28T18:00:31.518960 #20223] DEBUG -- : 1
D, [2016-11-28T18:00:32.390573 #20223] DEBUG -- : 1
D, [2016-11-28T18:14:52.669343 #20799] DEBUG -- : 1
D, [2016-11-28T18:18:37.793933 #20799] DEBUG -- : 1
D, [2016-11-28T18:18:40.802381 #20799] DEBUG -- : 1
D, [2016-11-28T18:18:42.079908 #20799] DEBUG -- : urxvt -hold -e  
D, [2016-11-28T18:18:45.608706 #20799] DEBUG -- : urxvt -hold -e  
D, [2016-11-28T18:19:07.809241 #20799] DEBUG -- : 1
D, [2016-11-28T18:22:22.895779 #21150] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-28T18:22:22.896206 #21150] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-28T18:22:22.896808 #21150] DEBUG -- : 10, 1 / 64, 21
D, [2016-11-28T18:22:24.278097 #21150] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-28T18:22:24.279038 #21150] DEBUG -- : 1, 1 / 11, 20
D, [2016-11-28T18:22:24.283662 #21150] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-28T18:22:25.284606 #21150] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-28T18:22:25.285047 #21150] DEBUG -- : 1, 1 / 11, 16
D, [2016-11-28T18:22:25.287528 #21150] DEBUG -- : 13, 1 / 36, 20
D, [2016-11-28T18:22:35.098021 #21160] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-28T18:22:35.098412 #21160] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-28T18:22:35.099045 #21160] DEBUG -- : 10, 1 / 64, 21
D, [2016-11-28T18:22:36.255907 #21160] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-28T18:22:36.257048 #21160] DEBUG -- : 1, 1 / 11, 20
D, [2016-11-28T18:22:36.259937 #21160] DEBUG -- : 13, 1 / 16, 2
D, [2016-11-28T18:22:37.594585 #21160] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-28T18:22:37.594961 #21160] DEBUG -- : 1, 1 / 8, 3
D, [2016-11-28T18:22:37.595507 #21160] DEBUG -- : 10, 1 / 33, 20
D, [2016-11-28T18:22:39.481104 #21160] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-28T18:22:39.482037 #21160] DEBUG -- : 1, 1 / 8, 3
D, [2016-11-28T18:22:39.483214 #21160] DEBUG -- : 10, 1 / 33, 20
D, [2016-11-28T18:22:41.105913 #21160] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-28T18:22:41.106845 #21160] DEBUG -- : 1, 1 / 8, 3
D, [2016-11-28T18:22:41.108123 #21160] DEBUG -- : 10, 1 / 33, 20
D, [2016-11-28T18:22:51.826078 #21160] DEBUG -- : 1
D, [2016-11-28T18:22:51.826876 #21160] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-28T18:22:51.827815 #21160] DEBUG -- : 1, 1 / 8, 3
D, [2016-11-28T18:22:51.829052 #21160] DEBUG -- : 10, 1 / 33, 20
D, [2016-11-28T18:22:53.316182 #21160] DEBUG -- : 1
D, [2016-11-28T18:22:53.317103 #21160] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-28T18:22:53.317966 #21160] DEBUG -- : 1, 1 / 8, 3
D, [2016-11-28T18:22:53.319178 #21160] DEBUG -- : 10, 1 / 33, 20
D, [2016-11-28T18:22:53.958996 #21160] DEBUG -- : 1
D, [2016-11-28T18:22:53.959891 #21160] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-28T18:22:53.960735 #21160] DEBUG -- : 1, 1 / 8, 3
D, [2016-11-28T18:22:53.961799 #21160] DEBUG -- : 10, 1 / 33, 20
D, [2016-11-28T18:22:56.532681 #21160] DEBUG -- : 1
D, [2016-11-28T18:22:56.533519 #21160] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-28T18:22:56.534392 #21160] DEBUG -- : 1, 1 / 8, 3
D, [2016-11-28T18:22:56.535687 #21160] DEBUG -- : 10, 1 / 33, 20
D, [2016-11-28T18:22:57.299221 #21160] DEBUG -- : 1
D, [2016-11-28T18:22:57.300094 #21160] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-28T18:22:57.300988 #21160] DEBUG -- : 1, 1 / 8, 3
D, [2016-11-28T18:22:57.302257 #21160] DEBUG -- : 10, 1 / 33, 20
D, [2016-11-28T18:39:36.669176 #21612] DEBUG -- : urxvt -hold -e  
D, [2016-11-28T19:26:49.404785 #27266] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-28T19:26:49.405187 #27266] DEBUG -- : 1, 1 / 9, 8
D, [2016-11-28T19:26:49.405809 #27266] DEBUG -- : 10, 1 / 64, 21
D, [2016-11-28T19:26:56.948497 #27266] DEBUG -- : 1, 20 / 64, 21
D, [2016-11-28T19:26:56.949678 #27266] DEBUG -- : 1, 1 / 7, 9
D, [2016-11-28T19:26:56.950996 #27266] DEBUG -- : 9, 1 / 12, 2
D, [2016-11-28T19:44:59.345306 #29140] DEBUG -- : [#<Executable:0x005591a0be5dc0 @path="//lib32/ld-2.22.so", @name="ld-2.22.so">, #<Executable:0x005591a0be54d8 @path="//lib32/ld-linux.so.2", @name="ld-linux.so.2">, #<Executable:0x005591a0be4bf0 @path="//lib32/libanl-2.22.so", @name="libanl-2.22.so">, #<Executable:0x005591a0be4330 @path="//lib32/libanl.so.1", @name="libanl.so.1">, #<Executable:0x005591a0b6f878 @path="//lib32/libBrokenLocale-2.22.so", @name="libBrokenLocale-2.22.so">, #<Executable:0x005591a0b6eea0 @path="//lib32/libBrokenLocale.so.1", @name="libBrokenLocale.so.1">, #<Executable:0x005591a0b6e540 @path="//lib32/libc-2.22.so", @name="libc-2.22.so">, #<Executable:0x005591a0b6db68 @path="//lib32/libcidn-2.22.so", @name="libcidn-2.22.so">, #<Executable:0x005591a0b6d208 @path="//lib32/libcidn.so.1", @name="libcidn.so.1">, #<Executable:0x005591a0b6c970 @path="//lib32/libcrypt-2.22.so", @name="libcrypt-2.22.so">, #<Executable:0x005591a0b6c088 @path="//lib32/libcrypt.so.1", @name="libcrypt.so.1">, #<Executable:0x005591a0b6b750 @path="//lib32/libc.so.6", @name="libc.so.6">, #<Executable:0x005591a0b6ad78 @path="//lib32/libdl-2.22.so", @name="libdl-2.22.so">, #<Executable:0x005591a0b6a490 @path="//lib32/libdl.so.2", @name="libdl.so.2">, #<Executable:0x005591a0b69b58 @path="//lib32/libm-2.22.so", @name="libm-2.22.so">, #<Executable:0x005591a0b68e38 @path="//lib32/libmemusage.so", @name="libmemusage.so">, #<Executable:0x005591a0b68488 @path="//lib32/libm.so.6", @name="libm.so.6">, #<Executable:0x005591a0b67ab0 @path="//lib32/libnsl-2.22.so", @name="libnsl-2.22.so">, #<Executable:0x005591a0b67128 @path="//lib32/libnsl.so.1", @name="libnsl.so.1">, #<Executable:0x005591a0b666d8 @path="//lib32/libnss_compat-2.22.so", @name="libnss_compat-2.22.so">]
D, [2016-11-28T19:45:56.798880 #29236] DEBUG -- : [#<Entry:0x0055f870cf1d68 @path="/home/key/--Frag19", @name="--Frag19">, #<Entry:0x0055f870cf1480 @path="/home/key/--Frag2", @name="--Frag2">]
D, [2016-11-28T19:55:15.744268 #30397] DEBUG -- : 19
D, [2016-11-29T15:53:43.323634 #27704] DEBUG -- : 39
D, [2016-11-29T15:53:45.187355 #27704] DEBUG -- : [#<Executable:0x00561f176403c0 @path="//lib32/librt-2.22.so", @name="librt-2.22.so">, #<Executable:0x00561f1763b988 @path="//lib32/librt.so.1", @name="librt.so.1">]
D, [2016-11-29T15:53:47.353472 #27704] DEBUG -- : 39
D, [2016-11-29T15:53:48.822054 #27704] DEBUG -- : [#<Executable:0x00561f176403c0 @path="//lib32/librt-2.22.so", @name="librt-2.22.so">, #<Executable:0x00561f1763b988 @path="//lib32/librt.so.1", @name="librt.so.1">]
D, [2016-11-29T15:53:50.733042 #27704] DEBUG -- : [#<Executable:0x00561f1765d650 @path="//lib32/ld-linux.so.2", @name="ld-linux.so.2">, #<Executable:0x00561f1765cd18 @path="//lib32/libanl-2.22.so", @name="libanl-2.22.so">, #<Executable:0x00561f1765c458 @path="//lib32/libanl.so.1", @name="libanl.so.1">, #<Executable:0x00561f175e79f0 @path="//lib32/libBrokenLocale-2.22.so", @name="libBrokenLocale-2.22.so">, #<Executable:0x00561f175e7068 @path="//lib32/libBrokenLocale.so.1", @name="libBrokenLocale.so.1">, #<Executable:0x00561f175e66b8 @path="//lib32/libc-2.22.so", @name="libc-2.22.so">, #<Executable:0x00561f175e5d08 @path="//lib32/libcidn-2.22.so", @name="libcidn-2.22.so">, #<Executable:0x00561f175e53a8 @path="//lib32/libcidn.so.1", @name="libcidn.so.1">, #<Executable:0x00561f175e4ae8 @path="//lib32/libcrypt-2.22.so", @name="libcrypt-2.22.so">, #<Executable:0x00561f175e4200 @path="//lib32/libcrypt.so.1", @name="libcrypt.so.1">, #<Executable:0x00561f175e38f0 @path="//lib32/libc.so.6", @name="libc.so.6">, #<Executable:0x00561f175e2f18 @path="//lib32/libdl-2.22.so", @name="libdl-2.22.so">, #<Executable:0x00561f175e2630 @path="//lib32/libdl.so.2", @name="libdl.so.2">, #<Executable:0x00561f175e1cf8 @path="//lib32/libm-2.22.so", @name="libm-2.22.so">, #<Executable:0x00561f175e0fd8 @path="//lib32/libmemusage.so", @name="libmemusage.so">, #<Executable:0x00561f175e0628 @path="//lib32/libm.so.6", @name="libm.so.6">, #<Executable:0x00561f175dfc78 @path="//lib32/libnsl-2.22.so", @name="libnsl-2.22.so">, #<Executable:0x00561f175df368 @path="//lib32/libnsl.so.1", @name="libnsl.so.1">, #<Executable:0x00561f175de8a0 @path="//lib32/libnss_compat-2.22.so", @name="libnss_compat-2.22.so">, #<Executable:0x00561f175ddea0 @path="//lib32/libnss_compat.so.2", @name="libnss_compat.so.2">, #<Executable:0x00561f175dd4c8 @path="//lib32/libnss_db-2.22.so", @name="libnss_db-2.22.so">, #<Executable:0x00561f175dcb40 @path="//lib32/libnss_db.so.2", @name="libnss_db.so.2">, #<Executable:0x00561f175dc190 @path="//lib32/libnss_dns-2.22.so", @name="libnss_dns-2.22.so">, #<Executable:0x00561f1764f000 @path="//lib32/libnss_dns.so.2", @name="libnss_dns.so.2">, #<Executable:0x00561f1764c8c8 @path="//lib32/libnss_files-2.22.so", @name="libnss_files-2.22.so">, #<Executable:0x00561f1764bf40 @path="//lib32/libnss_files.so.2", @name="libnss_files.so.2">, #<Executable:0x00561f1764b478 @path="//lib32/libnss_hesiod-2.22.so", @name="libnss_hesiod-2.22.so">, #<Executable:0x00561f1764aa00 @path="//lib32/libnss_hesiod.so.2", @name="libnss_hesiod.so.2">, #<Executable:0x00561f1764a078 @path="//lib32/libnss_nis-2.22.so", @name="libnss_nis-2.22.so">, #<Executable:0x00561f17649628 @path="//lib32/libnss_nisplus-2.22.so", @name="libnss_nisplus-2.22.so">, #<Executable:0x00561f17648c00 @path="//lib32/libnss_nisplus.so.2", @name="libnss_nisplus.so.2">, #<Executable:0x00561f17648200 @path="//lib32/libnss_nis.so.2", @name="libnss_nis.so.2">, #<Executable:0x00561f176438e0 @path="//lib32/libpcprofile.so", @name="libpcprofile.so">, #<Executable:0x00561f17642e90 @path="//lib32/libpthread-2.22.so", @name="libpthread-2.22.so">, #<Executable:0x00561f17642580 @path="//lib32/libpthread.so.0", @name="libpthread.so.0">, #<Executable:0x00561f17641c48 @path="//lib32/libresolv-2.22.so", @name="libresolv-2.22.so">, #<Executable:0x00561f17640d48 @path="//lib32/libresolv.so.2", @name="libresolv.so.2">, #<Executable:0x00561f176403c0 @path="//lib32/librt-2.22.so", @name="librt-2.22.so">, #<Executable:0x00561f1763b988 @path="//lib32/librt.so.1", @name="librt.so.1">]
D, [2016-11-29T15:53:52.708742 #27704] DEBUG -- : [#<Executable:0x00561f175e4ae8 @path="//lib32/libcrypt-2.22.so", @name="libcrypt-2.22.so">, #<Executable:0x00561f175e4200 @path="//lib32/libcrypt.so.1", @name="libcrypt.so.1">, #<Executable:0x00561f175e38f0 @path="//lib32/libc.so.6", @name="libc.so.6">, #<Executable:0x00561f175e2f18 @path="//lib32/libdl-2.22.so", @name="libdl-2.22.so">, #<Executable:0x00561f175e2630 @path="//lib32/libdl.so.2", @name="libdl.so.2">, #<Executable:0x00561f175e1cf8 @path="//lib32/libm-2.22.so", @name="libm-2.22.so">, #<Executable:0x00561f175e0fd8 @path="//lib32/libmemusage.so", @name="libmemusage.so">, #<Executable:0x00561f175e0628 @path="//lib32/libm.so.6", @name="libm.so.6">, #<Executable:0x00561f175dfc78 @path="//lib32/libnsl-2.22.so", @name="libnsl-2.22.so">, #<Executable:0x00561f175df368 @path="//lib32/libnsl.so.1", @name="libnsl.so.1">, #<Executable:0x00561f175de8a0 @path="//lib32/libnss_compat-2.22.so", @name="libnss_compat-2.22.so">, #<Executable:0x00561f175ddea0 @path="//lib32/libnss_compat.so.2", @name="libnss_compat.so.2">, #<Executable:0x00561f175dd4c8 @path="//lib32/libnss_db-2.22.so", @name="libnss_db-2.22.so">, #<Executable:0x00561f175dcb40 @path="//lib32/libnss_db.so.2", @name="libnss_db.so.2">, #<Executable:0x00561f175dc190 @path="//lib32/libnss_dns-2.22.so", @name="libnss_dns-2.22.so">, #<Executable:0x00561f1764f000 @path="//lib32/libnss_dns.so.2", @name="libnss_dns.so.2">, #<Executable:0x00561f1764c8c8 @path="//lib32/libnss_files-2.22.so", @name="libnss_files-2.22.so">, #<Executable:0x00561f1764bf40 @path="//lib32/libnss_files.so.2", @name="libnss_files.so.2">, #<Executable:0x00561f1764b478 @path="//lib32/libnss_hesiod-2.22.so", @name="libnss_hesiod-2.22.so">, #<Executable:0x00561f1764aa00 @path="//lib32/libnss_hesiod.so.2", @name="libnss_hesiod.so.2">, #<Executable:0x00561f1764a078 @path="//lib32/libnss_nis-2.22.so", @name="libnss_nis-2.22.so">, #<Executable:0x00561f17649628 @path="//lib32/libnss_nisplus-2.22.so", @name="libnss_nisplus-2.22.so">, #<Executable:0x00561f17648c00 @path="//lib32/libnss_nisplus.so.2", @name="libnss_nisplus.so.2">, #<Executable:0x00561f17648200 @path="//lib32/libnss_nis.so.2", @name="libnss_nis.so.2">, #<Executable:0x00561f176438e0 @path="//lib32/libpcprofile.so", @name="libpcprofile.so">, #<Executable:0x00561f17642e90 @path="//lib32/libpthread-2.22.so", @name="libpthread-2.22.so">, #<Executable:0x00561f17642580 @path="//lib32/libpthread.so.0", @name="libpthread.so.0">, #<Executable:0x00561f17641c48 @path="//lib32/libresolv-2.22.so", @name="libresolv-2.22.so">, #<Executable:0x00561f17640d48 @path="//lib32/libresolv.so.2", @name="libresolv.so.2">, #<Executable:0x00561f176403c0 @path="//lib32/librt-2.22.so", @name="librt-2.22.so">, #<Executable:0x00561f1763b988 @path="//lib32/librt.so.1", @name="librt.so.1">]
D, [2016-11-29T15:54:30.968060 #27783] DEBUG -- : 19
D, [2016-11-29T15:54:36.165184 #27783] DEBUG -- : [#<Executable:0x005651f8a77420 @path="//lib32/libnsl.so.1", @name="libnsl.so.1">, #<Executable:0x005651f8a769d0 @path="//lib32/libnss_compat-2.22.so", @name="libnss_compat-2.22.so">]
D, [2016-11-29T16:18:45.554340 #28468] DEBUG -- : 4
D, [2016-11-29T16:18:45.554510 #28468] DEBUG -- : 4
D, [2016-11-29T16:18:45.554572 #28468] DEBUG -- : 4
D, [2016-11-29T16:18:45.554638 #28468] DEBUG -- : 6
D, [2016-11-29T16:18:45.554699 #28468] DEBUG -- : 8
D, [2016-11-29T16:18:50.843926 #28468] DEBUG -- : 6
D, [2016-11-29T16:18:50.845106 #28468] DEBUG -- : 3
D, [2016-11-29T16:19:04.583353 #28468] DEBUG -- : 4
D, [2016-11-29T16:19:04.583739 #28468] DEBUG -- : 4
D, [2016-11-29T16:19:04.584004 #28468] DEBUG -- : 4
D, [2016-11-29T16:19:04.584274 #28468] DEBUG -- : 6
D, [2016-11-29T16:19:04.584534 #28468] DEBUG -- : 8
D, [2016-11-29T16:19:09.842092 #28468] DEBUG -- : 6
D, [2016-11-29T16:19:09.842676 #28468] DEBUG -- : 8
D, [2016-11-29T16:19:09.869787 #28468] DEBUG -- : 9
D, [2016-11-29T16:19:09.869868 #28468] DEBUG -- : 11
D, [2016-11-29T16:19:09.869940 #28468] DEBUG -- : 11
D, [2016-11-29T16:19:09.870013 #28468] DEBUG -- : 11
D, [2016-11-29T16:19:33.047175 #28468] DEBUG -- : 4
D, [2016-11-29T16:19:33.047584 #28468] DEBUG -- : 4
D, [2016-11-29T16:19:33.047867 #28468] DEBUG -- : 4
D, [2016-11-29T16:19:33.048131 #28468] DEBUG -- : 6
D, [2016-11-29T16:19:33.048393 #28468] DEBUG -- : 8
D, [2016-11-29T16:19:34.610586 #28468] DEBUG -- : 6
D, [2016-11-29T16:19:34.611537 #28468] DEBUG -- : 3
D, [2016-11-29T16:19:36.364470 #28468] DEBUG -- : 6
D, [2016-11-29T16:19:36.364793 #28468] DEBUG -- : 7
D, [2016-11-29T16:19:36.365554 #28468] DEBUG -- : 10
D, [2016-11-29T16:19:36.365811 #28468] DEBUG -- : 13
D, [2016-11-29T16:19:36.366134 #28468] DEBUG -- : 14
D, [2016-11-29T16:19:36.366310 #28468] DEBUG -- : 23
D, [2016-11-29T16:19:37.499484 #28468] DEBUG -- : 4
D, [2016-11-29T16:19:37.499961 #28468] DEBUG -- : 4
D, [2016-11-29T16:19:37.500247 #28468] DEBUG -- : 4
D, [2016-11-29T16:19:39.579108 #28468] DEBUG -- : 6
D, [2016-11-29T16:19:39.580093 #28468] DEBUG -- : 3
D, [2016-11-29T16:19:41.435422 #28468] DEBUG -- : 4
D, [2016-11-29T16:19:41.435814 #28468] DEBUG -- : 4
D, [2016-11-29T16:19:41.436094 #28468] DEBUG -- : 4
D, [2016-11-29T16:19:41.436370 #28468] DEBUG -- : 6
D, [2016-11-29T16:19:41.436641 #28468] DEBUG -- : 8
D, [2016-11-29T16:19:43.903007 #28468] DEBUG -- : 6
D, [2016-11-29T16:19:43.903926 #28468] DEBUG -- : 3
D, [2016-11-29T16:20:55.975547 #28468] DEBUG -- : 4
D, [2016-11-29T16:20:55.975951 #28468] DEBUG -- : 4
D, [2016-11-29T16:20:55.976227 #28468] DEBUG -- : 4
D, [2016-11-29T16:20:55.976493 #28468] DEBUG -- : 6
D, [2016-11-29T16:20:55.976858 #28468] DEBUG -- : 8
D, [2016-11-29T16:20:57.618766 #28468] DEBUG -- : 6
D, [2016-11-29T16:20:57.618963 #28468] DEBUG -- : 8
D, [2016-11-29T16:20:57.619060 #28468] DEBUG -- : 11
D, [2016-11-29T16:22:07.228835 #28599] DEBUG -- : 4
D, [2016-11-29T16:22:07.228997 #28599] DEBUG -- : 4
D, [2016-11-29T16:22:07.229060 #28599] DEBUG -- : 4
D, [2016-11-29T16:22:07.229120 #28599] DEBUG -- : 6
D, [2016-11-29T16:22:07.229179 #28599] DEBUG -- : 8
D, [2016-11-29T16:22:09.108519 #28599] DEBUG -- : 6
D, [2016-11-29T16:22:09.108735 #28599] DEBUG -- : 8
D, [2016-11-29T16:22:09.108845 #28599] DEBUG -- : 11
D, [2016-11-29T16:23:40.163934 #28665] DEBUG -- : 4
D, [2016-11-29T16:23:40.164103 #28665] DEBUG -- : 4
D, [2016-11-29T16:23:40.164166 #28665] DEBUG -- : 4
D, [2016-11-29T16:23:40.164316 #28665] DEBUG -- : 6
D, [2016-11-29T16:23:40.164382 #28665] DEBUG -- : 8
D, [2016-11-29T16:23:41.837352 #28665] DEBUG -- : 6
D, [2016-11-29T16:23:41.837630 #28665] DEBUG -- : 8
D, [2016-11-29T16:23:41.837825 #28665] DEBUG -- : 11
D, [2016-11-29T16:23:45.100402 #28665] DEBUG -- : 4
D, [2016-11-29T16:23:45.100796 #28665] DEBUG -- : 4
D, [2016-11-29T16:23:45.101079 #28665] DEBUG -- : 4
D, [2016-11-29T16:23:45.101335 #28665] DEBUG -- : 6
D, [2016-11-29T16:23:45.101593 #28665] DEBUG -- : 8
D, [2016-11-29T16:23:46.834748 #28665] DEBUG -- : 6
D, [2016-11-29T16:23:46.834943 #28665] DEBUG -- : 8
D, [2016-11-29T16:23:46.835032 #28665] DEBUG -- : 11
D, [2016-11-29T16:23:47.886355 #28665] DEBUG -- : 4
D, [2016-11-29T16:23:47.886742 #28665] DEBUG -- : 4
D, [2016-11-29T16:23:47.887084 #28665] DEBUG -- : 4
D, [2016-11-29T16:23:47.887361 #28665] DEBUG -- : 6
D, [2016-11-29T16:23:47.887631 #28665] DEBUG -- : 8
D, [2016-11-29T16:23:48.953313 #28665] DEBUG -- : 6
D, [2016-11-29T16:23:48.954226 #28665] DEBUG -- : 3
D, [2016-11-29T16:23:52.356921 #28665] DEBUG -- : 4
D, [2016-11-29T16:23:52.357417 #28665] DEBUG -- : 4
D, [2016-11-29T16:23:52.357790 #28665] DEBUG -- : 4
D, [2016-11-29T16:23:52.358067 #28665] DEBUG -- : 6
D, [2016-11-29T16:23:52.358351 #28665] DEBUG -- : 8
D, [2016-11-29T16:23:53.751912 #28665] DEBUG -- : 6
D, [2016-11-29T16:23:53.752100 #28665] DEBUG -- : 8
D, [2016-11-29T16:23:53.752197 #28665] DEBUG -- : 11
D, [2016-11-29T16:23:56.295770 #28665] DEBUG -- : 4
D, [2016-11-29T16:23:56.296155 #28665] DEBUG -- : 4
D, [2016-11-29T16:23:56.296588 #28665] DEBUG -- : 4
D, [2016-11-29T16:23:56.296864 #28665] DEBUG -- : 6
D, [2016-11-29T16:23:56.297163 #28665] DEBUG -- : 8
D, [2016-11-29T16:24:22.945042 #28755] DEBUG -- : 4
D, [2016-11-29T16:24:22.945202 #28755] DEBUG -- : 4
D, [2016-11-29T16:24:22.945263 #28755] DEBUG -- : 4
D, [2016-11-29T16:24:22.945323 #28755] DEBUG -- : 6
D, [2016-11-29T16:24:22.945381 #28755] DEBUG -- : 8
D, [2016-11-29T16:24:50.531809 #28767] DEBUG -- : 4
D, [2016-11-29T16:24:50.531975 #28767] DEBUG -- : 4
D, [2016-11-29T16:24:50.532038 #28767] DEBUG -- : 4
D, [2016-11-29T16:24:50.532131 #28767] DEBUG -- : 6
D, [2016-11-29T16:24:50.532198 #28767] DEBUG -- : 8
D, [2016-11-29T16:24:56.808957 #28767] DEBUG -- : 6
D, [2016-11-29T16:24:56.810165 #28767] DEBUG -- : 3
D, [2016-11-29T16:39:45.842797 #28767] DEBUG -- : 4
D, [2016-11-29T16:39:45.843277 #28767] DEBUG -- : 4
D, [2016-11-29T16:39:45.843555 #28767] DEBUG -- : 4
D, [2016-11-29T16:39:45.843834 #28767] DEBUG -- : 6
D, [2016-11-29T16:39:45.844104 #28767] DEBUG -- : 8
D, [2016-11-29T16:39:49.444186 #28767] DEBUG -- : 6
D, [2016-11-29T16:39:49.445091 #28767] DEBUG -- : 3
D, [2016-11-29T16:42:38.703423 #29262] DEBUG -- : 4
D, [2016-11-29T16:42:38.703601 #29262] DEBUG -- : 4
D, [2016-11-29T16:42:38.703662 #29262] DEBUG -- : 4
D, [2016-11-29T16:42:38.703719 #29262] DEBUG -- : 4
D, [2016-11-29T16:42:38.703813 #29262] DEBUG -- : 4
D, [2016-11-29T16:42:38.703897 #29262] DEBUG -- : 4
D, [2016-11-29T16:42:38.703960 #29262] DEBUG -- : 6
D, [2016-11-29T16:42:38.704018 #29262] DEBUG -- : 6
D, [2016-11-29T16:42:38.704081 #29262] DEBUG -- : 8
D, [2016-11-29T16:42:38.704142 #29262] DEBUG -- : 8
D, [2016-11-29T16:42:38.704201 #29262] DEBUG -- : 3
D, [2016-11-29T16:42:38.704265 #29262] DEBUG -- : 4
D, [2016-11-29T16:42:42.711455 #29262] DEBUG -- : 6
D, [2016-11-29T16:42:42.711859 #29262] DEBUG -- : 6
D, [2016-11-29T16:42:42.712116 #29262] DEBUG -- : 3
D, [2016-11-29T16:42:42.712577 #29262] DEBUG -- : 4
D, [2016-11-29T16:42:42.713111 #29262] DEBUG -- : 3
D, [2016-11-29T16:42:42.713384 #29262] DEBUG -- : 3
D, [2016-11-29T16:42:42.713643 #29262] DEBUG -- : 4
D, [2016-11-29T16:42:42.713911 #29262] DEBUG -- : 5
D, [2016-11-29T16:42:42.714167 #29262] DEBUG -- : 5
D, [2016-11-29T16:42:42.715329 #29262] DEBUG -- : 3
D, [2016-11-29T16:42:42.715673 #29262] DEBUG -- : 3
D, [2016-11-29T16:46:42.091200 #29364] DEBUG -- : 7
D, [2016-11-29T16:46:43.595323 #29364] DEBUG -- : 8
D, [2016-11-29T16:46:43.596690 #29364] DEBUG -- : 1
D, [2016-11-29T16:46:47.768158 #29364] DEBUG -- : 7
D, [2016-11-29T16:46:50.303770 #29364] DEBUG -- : 8
D, [2016-11-29T16:46:50.304699 #29364] DEBUG -- : 1
D, [2016-11-29T16:54:14.753523 #29586] DEBUG -- : 19
D, [2016-11-29T16:54:22.695693 #29586] DEBUG -- : 19
D, [2016-11-29T16:54:46.147651 #29598] DEBUG -- : 19
D, [2016-11-29T16:54:55.040941 #29598] DEBUG -- : 19
D, [2016-11-29T17:09:12.854640 #30025] DEBUG -- : urxvt -hold -e  
D, [2016-11-29T17:30:52.299966 #30625] DEBUG -- : #<Directory:0x0055c9f3211b10 @path="/", @name="root">
D, [2016-11-29T17:30:54.791495 #30625] DEBUG -- : #<Directory:0x0055c9f3201f08 @path="//usr", @name="usr">
D, [2016-11-29T18:08:07.671194 #31617] DEBUG -- : {:right=>[#<Executable:0x005583054d9be8 @path="//lib", @name="lib">], :down=>[#<Directory:0x005583054dd680 @path="//bin", @name="bin">, #<Directory:0x005583054dce10 @path="//boot", @name="boot">, #<Directory:0x005583054dc5a0 @path="//dev", @name="dev">, #<Directory:0x005583054dbba0 @path="//etc", @name="etc">, #<Directory:0x005583054dadb8 @path="//home", @name="home">, #<Directory:0x005583054d91c0 @path="//lib32", @name="lib32">, #<Directory:0x005583054d8810 @path="//lib64", @name="lib64">, #<Directory:0x005583054d7e10 @path="//lost+found", @name="lost+found">, #<Directory:0x005583054d74d8 @path="//media", @name="media">, #<Directory:0x005583054d6b50 @path="//mnt", @name="mnt">, #<Directory:0x005583054d6290 @path="//opt", @name="opt">, #<Directory:0x005583054d5a20 @path="//proc", @name="proc">, #<Directory:0x005583054d5160 @path="//root", @name="root">, #<Directory:0x005583054d48a0 @path="//run", @name="run">, #<Directory:0x005583054d58e0 @path="//sbin", @name="sbin">, #<Directory:0x005583054d33b0 @path="//sys", @name="sys">, #<Directory:0x005583054d2a78 @path="//tmp", @name="tmp">, #<Directory:0x005583054d2168 @path="//usr", @name="usr">, #<Directory:0x005583054d1858 @path="//var", @name="var">]}
D, [2016-11-29T18:08:10.571491 #31617] DEBUG -- : {:right=>[#<Executable:0x00558305454218 @path="//usr/lib", @name="lib">, #<Executable:0x0055830544eb88 @path="//usr/tmp", @name="tmp">], :down=>[#<Directory:0x005583054565e0 @path="//usr/bin", @name="bin">, #<Directory:0x00558305455c80 @path="//usr/etc", @name="etc">, #<Directory:0x00558305455348 @path="//usr/games", @name="games">, #<Directory:0x00558305454b00 @path="//usr/include", @name="include">, #<Directory:0x00558305453958 @path="//usr/lib32", @name="lib32">, #<Directory:0x00558305452fd0 @path="//usr/lib64", @name="lib64">, #<Directory:0x00558305452710 @path="//usr/libexec", @name="libexec">, #<Directory:0x00558305451ea0 @path="//usr/local", @name="local">, #<Directory:0x005583054512c0 @path="//usr/portage", @name="portage">, #<Directory:0x00558305450848 @path="//usr/sbin", @name="sbin">, #<Directory:0x0055830544ff10 @path="//usr/share", @name="share">, #<Directory:0x0055830544f600 @path="//usr/src", @name="src">, #<Directory:0x0055830544e1b0 @path="//usr/x86_64-pc-linux-gnu", @name="x86_64-pc-linux-gnu">]}
D, [2016-11-29T18:24:36.956976 #32064] DEBUG -- : [#<Directory:0x0055eda601d8c8 @path="/", @name="root">, #<Directory:0x0055eda601d828 @path="/home/key", @name="home">, #<Directory:0x0055eda601d788 @path="/home/key/out/active/orb", @name="work">, #<Recent:0x0055eda601d760 @name="recent">, #<Frequent:0x0055eda601d6e8 @name="frequent">, #<Directory:0x0055eda601d5d0 @path="/home/key/.hostlist/", @name="web">, #<Executable:0x0055eda601d580 @path="/usr/bin/find", @name="find">]
D, [2016-11-29T18:24:38.367684 #32064] DEBUG -- : {:right=>[#<Executable:0x0055eda6015218 @path="//lib", @name="lib">], :down=>[#<Directory:0x0055eda6018e68 @path="//bin", @name="bin">, #<Directory:0x0055eda60185f8 @path="//boot", @name="boot">, #<Directory:0x0055eda6017cc0 @path="//dev", @name="dev">, #<Directory:0x0055eda6016e88 @path="//etc", @name="etc">, #<Directory:0x0055eda6016078 @path="//home", @name="home">, #<Directory:0x0055eda6014890 @path="//lib32", @name="lib32">, #<Directory:0x0055eda6013e90 @path="//lib64", @name="lib64">, #<Directory:0x0055eda6013558 @path="//lost+found", @name="lost+found">, #<Directory:0x0055eda6012ba8 @path="//media", @name="media">, #<Directory:0x0055eda60122e8 @path="//mnt", @name="mnt">, #<Directory:0x0055eda6011a78 @path="//opt", @name="opt">, #<Directory:0x0055eda60111b8 @path="//proc", @name="proc">, #<Directory:0x0055eda60108f8 @path="//root", @name="root">, #<Directory:0x0055eda6010038 @path="//run", @name="run">, #<Directory:0x0055eda600f6b0 @path="//sbin", @name="sbin">, #<Directory:0x0055eda600ead0 @path="//sys", @name="sys">, #<Directory:0x0055eda600e1c0 @path="//tmp", @name="tmp">, #<Directory:0x0055eda600d8d8 @path="//usr", @name="usr">, #<Directory:0x0055eda600d018 @path="//var", @name="var">]}
D, [2016-11-29T18:24:38.370163 #32064] DEBUG -- : [#<Directory:0x0055eda601d8c8 @path="/", @name="root", @entries={:right=>[#<Executable:0x0055eda6015218 @path="//lib", @name="lib">], :down=>[#<Directory:0x0055eda6018e68 @path="//bin", @name="bin">, #<Directory:0x0055eda60185f8 @path="//boot", @name="boot">, #<Directory:0x0055eda6017cc0 @path="//dev", @name="dev">, #<Directory:0x0055eda6016e88 @path="//etc", @name="etc">, #<Directory:0x0055eda6016078 @path="//home", @name="home">, #<Directory:0x0055eda6014890 @path="//lib32", @name="lib32">, #<Directory:0x0055eda6013e90 @path="//lib64", @name="lib64">, #<Directory:0x0055eda6013558 @path="//lost+found", @name="lost+found">, #<Directory:0x0055eda6012ba8 @path="//media", @name="media">, #<Directory:0x0055eda60122e8 @path="//mnt", @name="mnt">, #<Directory:0x0055eda6011a78 @path="//opt", @name="opt">, #<Directory:0x0055eda60111b8 @path="//proc", @name="proc">, #<Directory:0x0055eda60108f8 @path="//root", @name="root">, #<Directory:0x0055eda6010038 @path="//run", @name="run">, #<Directory:0x0055eda600f6b0 @path="//sbin", @name="sbin">, #<Directory:0x0055eda600ead0 @path="//sys", @name="sys">, #<Directory:0x0055eda600e1c0 @path="//tmp", @name="tmp">, #<Directory:0x0055eda600d8d8 @path="//usr", @name="usr">, #<Directory:0x0055eda600d018 @path="//var", @name="var">]}, @active=true>, #<Directory:0x0055eda6018e68 @path="//bin", @name="bin">, #<Directory:0x0055eda60185f8 @path="//boot", @name="boot">, #<Directory:0x0055eda6017cc0 @path="//dev", @name="dev">, #<Directory:0x0055eda6016e88 @path="//etc", @name="etc">, #<Directory:0x0055eda6016078 @path="//home", @name="home">, #<Directory:0x0055eda6014890 @path="//lib32", @name="lib32">, #<Directory:0x0055eda6013e90 @path="//lib64", @name="lib64">, #<Directory:0x0055eda6013558 @path="//lost+found", @name="lost+found">, #<Directory:0x0055eda6012ba8 @path="//media", @name="media">, #<Directory:0x0055eda60122e8 @path="//mnt", @name="mnt">, #<Directory:0x0055eda6011a78 @path="//opt", @name="opt">, #<Directory:0x0055eda60111b8 @path="//proc", @name="proc">, #<Directory:0x0055eda60108f8 @path="//root", @name="root">, #<Directory:0x0055eda6010038 @path="//run", @name="run">, #<Directory:0x0055eda600f6b0 @path="//sbin", @name="sbin">, #<Directory:0x0055eda600ead0 @path="//sys", @name="sys">, #<Directory:0x0055eda600e1c0 @path="//tmp", @name="tmp">, #<Directory:0x0055eda600d8d8 @path="//usr", @name="usr">, #<Directory:0x0055eda600d018 @path="//var", @name="var">]
D, [2016-11-29T18:24:38.373597 #32064] DEBUG -- : [#<Executable:0x0055eda6015218 @path="//lib", @name="lib">]
D, [2016-11-29T18:24:41.507745 #32064] DEBUG -- : {:right=>[#<Executable:0x0055eda5f8d9a8 @path="//usr/lib", @name="lib">, #<Executable:0x0055eda5f880e8 @path="//usr/tmp", @name="tmp">], :down=>[#<Directory:0x0055eda5f8fdc0 @path="//usr/bin", @name="bin">, #<Directory:0x0055eda5f8f438 @path="//usr/etc", @name="etc">, #<Directory:0x0055eda5f8eb50 @path="//usr/games", @name="games">, #<Directory:0x0055eda5f8e308 @path="//usr/include", @name="include">, #<Directory:0x0055eda5f8ccd8 @path="//usr/lib32", @name="lib32">, #<Directory:0x0055eda5f8c378 @path="//usr/lib64", @name="lib64">, #<Directory:0x0055eda5f8b9f0 @path="//usr/libexec", @name="libexec">, #<Directory:0x0055eda5f8b040 @path="//usr/local", @name="local">, #<Directory:0x0055eda5f8a690 @path="//usr/portage", @name="portage">, #<Directory:0x0055eda5f89d30 @path="//usr/sbin", @name="sbin">, #<Directory:0x0055eda5f893a8 @path="//usr/share", @name="share">, #<Directory:0x0055eda5f88a70 @path="//usr/src", @name="src">, #<Directory:0x0055eda5ffad50 @path="//usr/x86_64-pc-linux-gnu", @name="x86_64-pc-linux-gnu">]}
D, [2016-11-29T18:24:41.509585 #32064] DEBUG -- : nil
D, [2016-11-29T18:25:18.009695 #32087] DEBUG -- : [#<Directory:0x0055abc9345b28 @path="/", @name="root">, #<Directory:0x0055abc9345a88 @path="/home/key", @name="home">, #<Directory:0x0055abc93459c0 @path="/home/key/out/active/orb", @name="work">, #<Recent:0x0055abc9345998 @name="recent">, #<Frequent:0x0055abc9345920 @name="frequent">, #<Directory:0x0055abc9345808 @path="/home/key/.hostlist/", @name="web">, #<Executable:0x0055abc93457b8 @path="/usr/bin/find", @name="find">]
D, [2016-11-29T18:25:19.357098 #32087] DEBUG -- : {:right=>[#<Executable:0x0055abc933d428 @path="//lib", @name="lib">], :down=>[#<Directory:0x0055abc9341078 @path="//bin", @name="bin">, #<Directory:0x0055abc9340808 @path="//boot", @name="boot">, #<Directory:0x0055abc933ff20 @path="//dev", @name="dev">, #<Directory:0x0055abc933f0c0 @path="//etc", @name="etc">, #<Directory:0x0055abc933e2d8 @path="//home", @name="home">, #<Directory:0x0055abc933cac8 @path="//lib32", @name="lib32">, #<Directory:0x0055abc933c0a0 @path="//lib64", @name="lib64">, #<Directory:0x0055abc933b7b8 @path="//lost+found", @name="lost+found">, #<Directory:0x0055abc933ae08 @path="//media", @name="media">, #<Directory:0x0055abc933a548 @path="//mnt", @name="mnt">, #<Directory:0x0055abc9339cd8 @path="//opt", @name="opt">, #<Directory:0x0055abc93393f0 @path="//proc", @name="proc">, #<Directory:0x0055abc9338b80 @path="//root", @name="root">, #<Directory:0x0055abc9338270 @path="//run", @name="run">, #<Directory:0x0055abc9337910 @path="//sbin", @name="sbin">, #<Directory:0x0055abc9336d08 @path="//sys", @name="sys">, #<Directory:0x0055abc93363d0 @path="//tmp", @name="tmp">, #<Directory:0x0055abc9335ae8 @path="//usr", @name="usr">, #<Directory:0x0055abc9335228 @path="//var", @name="var">]}
D, [2016-11-29T18:25:19.359311 #32087] DEBUG -- : [#<Directory:0x0055abc9345b28 @path="/", @name="root", @entries={:right=>[#<Executable:0x0055abc933d428 @path="//lib", @name="lib">], :down=>[#<Directory:0x0055abc9341078 @path="//bin", @name="bin">, #<Directory:0x0055abc9340808 @path="//boot", @name="boot">, #<Directory:0x0055abc933ff20 @path="//dev", @name="dev">, #<Directory:0x0055abc933f0c0 @path="//etc", @name="etc">, #<Directory:0x0055abc933e2d8 @path="//home", @name="home">, #<Directory:0x0055abc933cac8 @path="//lib32", @name="lib32">, #<Directory:0x0055abc933c0a0 @path="//lib64", @name="lib64">, #<Directory:0x0055abc933b7b8 @path="//lost+found", @name="lost+found">, #<Directory:0x0055abc933ae08 @path="//media", @name="media">, #<Directory:0x0055abc933a548 @path="//mnt", @name="mnt">, #<Directory:0x0055abc9339cd8 @path="//opt", @name="opt">, #<Directory:0x0055abc93393f0 @path="//proc", @name="proc">, #<Directory:0x0055abc9338b80 @path="//root", @name="root">, #<Directory:0x0055abc9338270 @path="//run", @name="run">, #<Directory:0x0055abc9337910 @path="//sbin", @name="sbin">, #<Directory:0x0055abc9336d08 @path="//sys", @name="sys">, #<Directory:0x0055abc93363d0 @path="//tmp", @name="tmp">, #<Directory:0x0055abc9335ae8 @path="//usr", @name="usr">, #<Directory:0x0055abc9335228 @path="//var", @name="var">]}, @active=true>, #<Directory:0x0055abc9341078 @path="//bin", @name="bin">, #<Directory:0x0055abc9340808 @path="//boot", @name="boot">, #<Directory:0x0055abc933ff20 @path="//dev", @name="dev">, #<Directory:0x0055abc933f0c0 @path="//etc", @name="etc">, #<Directory:0x0055abc933e2d8 @path="//home", @name="home">, #<Directory:0x0055abc933cac8 @path="//lib32", @name="lib32">, #<Directory:0x0055abc933c0a0 @path="//lib64", @name="lib64">]
D, [2016-11-29T18:25:19.362455 #32087] DEBUG -- : [#<Executable:0x0055abc933d428 @path="//lib", @name="lib">]
D, [2016-11-29T18:25:22.003848 #32087] DEBUG -- : {:right=>[#<Executable:0x0055abc92b63d8 @path="//usr/lib", @name="lib">, #<Executable:0x0055abc92b0af0 @path="//usr/tmp", @name="tmp">], :down=>[#<Directory:0x0055abc92b8750 @path="//usr/bin", @name="bin">, #<Directory:0x0055abc92b7ee0 @path="//usr/etc", @name="etc">, #<Directory:0x0055abc92b7558 @path="//usr/games", @name="games">, #<Directory:0x0055abc92b6c70 @path="//usr/include", @name="include">, #<Directory:0x0055abc92b5a28 @path="//usr/lib32", @name="lib32">, #<Directory:0x0055abc92b4df8 @path="//usr/lib64", @name="lib64">, #<Directory:0x0055abc92b43f8 @path="//usr/libexec", @name="libexec">, #<Directory:0x0055abc92b3b60 @path="//usr/local", @name="local">, #<Directory:0x0055abc92b31b0 @path="//usr/portage", @name="portage">, #<Directory:0x0055abc92b27d8 @path="//usr/sbin", @name="sbin">, #<Directory:0x0055abc92b1e78 @path="//usr/share", @name="share">, #<Directory:0x0055abc92b14f0 @path="//usr/src", @name="src">, #<Directory:0x0055abc92b0230 @path="//usr/x86_64-pc-linux-gnu", @name="x86_64-pc-linux-gnu">]}
D, [2016-11-29T18:25:22.005806 #32087] DEBUG -- : nil
D, [2016-11-29T18:26:39.887234 #32125] DEBUG -- : nil
D, [2016-11-29T18:26:41.120326 #32125] DEBUG -- : {:right=>[#<Executable:0x00564346b71828 @path="//lib", @name="lib">], :down=>[#<Directory:0x00564346b75360 @path="//bin", @name="bin">, #<Directory:0x00564346b74b18 @path="//boot", @name="boot">, #<Directory:0x00564346b74280 @path="//dev", @name="dev">, #<Directory:0x00564346b73678 @path="//etc", @name="etc">, #<Directory:0x00564346b728b8 @path="//home", @name="home">, #<Directory:0x00564346b70e00 @path="//lib32", @name="lib32">, #<Directory:0x00564346b704f0 @path="//lib64", @name="lib64">, #<Directory:0x00564346b6faa0 @path="//lost+found", @name="lost+found">, #<Directory:0x00564346b6f118 @path="//media", @name="media">, #<Directory:0x00564346b6e830 @path="//mnt", @name="mnt">, #<Directory:0x00564346b6df98 @path="//opt", @name="opt">, #<Directory:0x00564346b6d6d8 @path="//proc", @name="proc">, #<Directory:0x00564346b6ce40 @path="//root", @name="root">, #<Directory:0x00564346b6c530 @path="//run", @name="run">, #<Directory:0x00564346b6be28 @path="//sbin", @name="sbin">, #<Directory:0x00564346b6b090 @path="//sys", @name="sys">, #<Directory:0x00564346b6a708 @path="//tmp", @name="tmp">, #<Directory:0x00564346b69dd0 @path="//usr", @name="usr">, #<Directory:0x00564346b69510 @path="//var", @name="var">]}
D, [2016-11-29T18:26:41.122562 #32125] DEBUG -- : nil
D, [2016-11-29T18:26:41.124193 #32125] DEBUG -- : nil
D, [2016-11-29T18:26:43.372043 #32125] DEBUG -- : {:right=>[#<Executable:0x00564346aeb318 @path="//var/lock", @name="lock">, #<Executable:0x00564346ae97c0 @path="//var/run", @name="run">], :down=>[#<Directory:0x00564346aedfa0 @path="//var/cache", @name="cache">, #<Directory:0x00564346aed668 @path="//var/db", @name="db">, #<Directory:0x00564346aecdf8 @path="//var/empty", @name="empty">, #<Directory:0x00564346aec588 @path="//var/games", @name="games">, #<Directory:0x00564346aebcc8 @path="//var/lib", @name="lib">, #<Directory:0x00564346aeaa30 @path="//var/log", @name="log">, #<Directory:0x00564346aea1c0 @path="//var/nullmailer", @name="nullmailer">, #<Directory:0x00564346ae8b68 @path="//var/spool", @name="spool">, #<Directory:0x00564346ae8118 @path="//var/tmp", @name="tmp">]}
D, [2016-11-29T18:26:43.373629 #32125] DEBUG -- : nil
D, [2016-11-29T18:26:43.374547 #32125] DEBUG -- : nil
D, [2016-11-29T18:28:20.131709 #32169] DEBUG -- : nil
D, [2016-11-29T18:28:21.358591 #32169] DEBUG -- : {:right=>[#<Executable:0x0056043ba696f0 @path="//lib", @name="lib">], :down=>[#<Directory:0x0056043ba6d250 @path="//bin", @name="bin">, #<Directory:0x0056043ba6ca08 @path="//boot", @name="boot">, #<Directory:0x0056043ba6c148 @path="//dev", @name="dev">, #<Directory:0x0056043ba6b4c8 @path="//etc", @name="etc">, #<Directory:0x0056043ba6a708 @path="//home", @name="home">, #<Directory:0x0056043ba68cc8 @path="//lib32", @name="lib32">, #<Directory:0x0056043ba68368 @path="//lib64", @name="lib64">, #<Directory:0x0056043ba67990 @path="//lost+found", @name="lost+found">, #<Directory:0x0056043ba66fb8 @path="//media", @name="media">, #<Directory:0x0056043ba66748 @path="//mnt", @name="mnt">, #<Directory:0x0056043ba65eb0 @path="//opt", @name="opt">, #<Directory:0x0056043ba655f0 @path="//proc", @name="proc">, #<Directory:0x0056043ba64d30 @path="//root", @name="root">, #<Directory:0x0056043ba64420 @path="//run", @name="run">, #<Directory:0x0056043ba63d40 @path="//sbin", @name="sbin">, #<Directory:0x0056043ba62f58 @path="//sys", @name="sys">, #<Directory:0x0056043ba625f8 @path="//tmp", @name="tmp">, #<Directory:0x0056043ba61cc0 @path="//usr", @name="usr">, #<Directory:0x0056043ba61400 @path="//var", @name="var">]}
D, [2016-11-29T18:28:21.360285 #32169] DEBUG -- : nil
D, [2016-11-29T18:28:21.361965 #32169] DEBUG -- : nil
D, [2016-11-29T18:28:23.655560 #32169] DEBUG -- : {:right=>[#<Executable:0x0056043b9e3bb8 @path="//usr/lib", @name="lib">, #<Executable:0x0056043b9de438 @path="//usr/tmp", @name="tmp">], :down=>[#<Directory:0x0056043b9e5eb8 @path="//usr/bin", @name="bin">, #<Directory:0x0056043b9e55a8 @path="//usr/etc", @name="etc">, #<Directory:0x0056043b9e4d10 @path="//usr/games", @name="games">, #<Directory:0x0056043b9e4478 @path="//usr/include", @name="include">, #<Directory:0x0056043b9e3230 @path="//usr/lib32", @name="lib32">, #<Directory:0x0056043b9e2970 @path="//usr/lib64", @name="lib64">, #<Directory:0x0056043b9e2128 @path="//usr/libexec", @name="libexec">, #<Directory:0x0056043b9e1520 @path="//usr/local", @name="local">, #<Directory:0x0056043b9e0ad0 @path="//usr/portage", @name="portage">, #<Directory:0x0056043b9e0080 @path="//usr/sbin", @name="sbin">, #<Directory:0x0056043b9df838 @path="//usr/share", @name="share">, #<Directory:0x0056043b9dee38 @path="//usr/src", @name="src">, #<Directory:0x0056043b9dda88 @path="//usr/x86_64-pc-linux-gnu", @name="x86_64-pc-linux-gnu">]}
D, [2016-11-29T18:28:23.657310 #32169] DEBUG -- : nil
D, [2016-11-29T18:28:57.242384 #32188] DEBUG -- : nil
D, [2016-11-29T18:28:58.599462 #32188] DEBUG -- : {:right=>[#<Executable:0x0055e591035698 @path="//lib", @name="lib">], :down=>[#<Directory:0x0055e5910391f8 @path="//bin", @name="bin">, #<Directory:0x0055e5910389b0 @path="//boot", @name="boot">, #<Directory:0x0055e5910380f0 @path="//dev", @name="dev">, #<Directory:0x0055e591037470 @path="//etc", @name="etc">, #<Directory:0x0055e591036688 @path="//home", @name="home">, #<Directory:0x0055e591034c48 @path="//lib32", @name="lib32">, #<Directory:0x0055e5910342e8 @path="//lib64", @name="lib64">, #<Directory:0x0055e591033938 @path="//lost+found", @name="lost+found">, #<Directory:0x0055e591032f60 @path="//media", @name="media">, #<Directory:0x0055e5910326f0 @path="//mnt", @name="mnt">, #<Directory:0x0055e591031e58 @path="//opt", @name="opt">, #<Directory:0x0055e591031598 @path="//proc", @name="proc">, #<Directory:0x0055e591030cd8 @path="//root", @name="root">, #<Directory:0x0055e5910303c8 @path="//run", @name="run">, #<Directory:0x0055e59102fce8 @path="//sbin", @name="sbin">, #<Directory:0x0055e59102ef00 @path="//sys", @name="sys">, #<Directory:0x0055e59102e5a0 @path="//tmp", @name="tmp">, #<Directory:0x0055e59102dc68 @path="//usr", @name="usr">, #<Directory:0x0055e59102d3a8 @path="//var", @name="var">]}
D, [2016-11-29T18:28:58.601708 #32188] DEBUG -- : nil
D, [2016-11-29T18:28:58.603505 #32188] DEBUG -- : nil
D, [2016-11-29T18:30:28.212488 #32248] DEBUG -- : nil
D, [2016-11-29T18:30:29.397317 #32248] DEBUG -- : {:right=>[#<Executable:0x0055d7c6e9d858 @path="//lib", @name="lib">], :down=>[#<Directory:0x0055d7c6ea1368 @path="//bin", @name="bin">, #<Directory:0x0055d7c6ea0b20 @path="//boot", @name="boot">, #<Directory:0x0055d7c6ea0288 @path="//dev", @name="dev">, #<Directory:0x0055d7c6e9f680 @path="//etc", @name="etc">, #<Directory:0x0055d7c6e9e8c0 @path="//home", @name="home">, #<Directory:0x0055d7c6e9ce08 @path="//lib32", @name="lib32">, #<Directory:0x0055d7c6e9c4f8 @path="//lib64", @name="lib64">, #<Directory:0x0055d7c6e9bad0 @path="//lost+found", @name="lost+found">, #<Directory:0x0055d7c6e9b120 @path="//media", @name="media">, #<Directory:0x0055d7c6e9a838 @path="//mnt", @name="mnt">, #<Directory:0x0055d7c6e99fa0 @path="//opt", @name="opt">, #<Directory:0x0055d7c6e99708 @path="//proc", @name="proc">, #<Directory:0x0055d7c6e98e48 @path="//root", @name="root">, #<Directory:0x0055d7c6e98538 @path="//run", @name="run">, #<Directory:0x0055d7c6e97e30 @path="//sbin", @name="sbin">, #<Directory:0x0055d7c6e97098 @path="//sys", @name="sys">, #<Directory:0x0055d7c6e96710 @path="//tmp", @name="tmp">, #<Directory:0x0055d7c6e95dd8 @path="//usr", @name="usr">, #<Directory:0x0055d7c6e95540 @path="//var", @name="var">]}
D, [2016-11-29T18:30:29.399532 #32248] DEBUG -- : nil
D, [2016-11-29T18:30:29.401065 #32248] DEBUG -- : nil
D, [2016-11-29T18:30:32.017144 #32248] DEBUG -- : {:right=>[#<Executable:0x0055d7c6e17ca8 @path="//usr/lib", @name="lib">, #<Executable:0x0055d7c6e12550 @path="//usr/tmp", @name="tmp">], :down=>[#<Directory:0x0055d7c6e19fa8 @path="//usr/bin", @name="bin">, #<Directory:0x0055d7c6e19698 @path="//usr/etc", @name="etc">, #<Directory:0x0055d7c6e18e00 @path="//usr/games", @name="games">, #<Directory:0x0055d7c6e18568 @path="//usr/include", @name="include">, #<Directory:0x0055d7c6e17320 @path="//usr/lib32", @name="lib32">, #<Directory:0x0055d7c6e16a38 @path="//usr/lib64", @name="lib64">, #<Directory:0x0055d7c6e161f0 @path="//usr/libexec", @name="libexec">, #<Directory:0x0055d7c6e15840 @path="//usr/local", @name="local">, #<Directory:0x0055d7c6e14be8 @path="//usr/portage", @name="portage">, #<Directory:0x0055d7c6e14210 @path="//usr/sbin", @name="sbin">, #<Directory:0x0055d7c6e13928 @path="//usr/share", @name="share">, #<Directory:0x0055d7c6e12f50 @path="//usr/src", @name="src">, #<Directory:0x0055d7c6e11ba0 @path="//usr/x86_64-pc-linux-gnu", @name="x86_64-pc-linux-gnu">]}
D, [2016-11-29T18:30:32.018922 #32248] DEBUG -- : nil
D, [2016-11-29T18:30:32.019877 #32248] DEBUG -- : nil
D, [2016-11-29T18:30:51.160958 #32260] DEBUG -- : nil
D, [2016-11-29T18:30:52.250446 #32260] DEBUG -- : {:right=>[#<Executable:0x005630ca9398a0 @path="//lib", @name="lib">], :down=>[#<Directory:0x005630ca93d3d8 @path="//bin", @name="bin">, #<Directory:0x005630ca93cb90 @path="//boot", @name="boot">, #<Directory:0x005630ca93c2f8 @path="//dev", @name="dev">, #<Directory:0x005630ca93b6a0 @path="//etc", @name="etc">, #<Directory:0x005630ca93a890 @path="//home", @name="home">, #<Directory:0x005630ca938e50 @path="//lib32", @name="lib32">, #<Directory:0x005630ca9384f0 @path="//lib64", @name="lib64">, #<Directory:0x005630ca937b90 @path="//lost+found", @name="lost+found">, #<Directory:0x005630ca9371e0 @path="//media", @name="media">, #<Directory:0x005630ca936920 @path="//mnt", @name="mnt">, #<Directory:0x005630ca936060 @path="//opt", @name="opt">, #<Directory:0x005630ca9357a0 @path="//proc", @name="proc">, #<Directory:0x005630ca934ee0 @path="//root", @name="root">, #<Directory:0x005630ca9345f8 @path="//run", @name="run">, #<Directory:0x005630ca933ec8 @path="//sbin", @name="sbin">, #<Directory:0x005630ca933108 @path="//sys", @name="sys">, #<Directory:0x005630ca9327a8 @path="//tmp", @name="tmp">, #<Directory:0x005630ca931e70 @path="//usr", @name="usr">, #<Directory:0x005630ca931588 @path="//var", @name="var">]}
D, [2016-11-29T18:30:52.252429 #32260] DEBUG -- : nil
D, [2016-11-29T18:30:52.254239 #32260] DEBUG -- : nil
D, [2016-11-29T18:30:54.740510 #32260] DEBUG -- : {:right=>[#<Executable:0x005630ca8b3d18 @path="//usr/lib", @name="lib">, #<Executable:0x005630ca8ae638 @path="//usr/tmp", @name="tmp">], :down=>[#<Directory:0x005630ca8b6040 @path="//usr/bin", @name="bin">, #<Directory:0x005630ca8b5758 @path="//usr/etc", @name="etc">, #<Directory:0x005630ca8b4e98 @path="//usr/games", @name="games">, #<Directory:0x005630ca8b4628 @path="//usr/include", @name="include">, #<Directory:0x005630ca8b33b8 @path="//usr/lib32", @name="lib32">, #<Directory:0x005630ca8b2ad0 @path="//usr/lib64", @name="lib64">, #<Directory:0x005630ca8b2288 @path="//usr/libexec", @name="libexec">, #<Directory:0x005630ca8b18d8 @path="//usr/local", @name="local">, #<Directory:0x005630ca8b0c80 @path="//usr/portage", @name="portage">, #<Directory:0x005630ca8b0258 @path="//usr/sbin", @name="sbin">, #<Directory:0x005630ca8af9e8 @path="//usr/share", @name="share">, #<Directory:0x005630ca8af010 @path="//usr/src", @name="src">, #<Directory:0x005630ca8adc38 @path="//usr/x86_64-pc-linux-gnu", @name="x86_64-pc-linux-gnu">]}
D, [2016-11-29T18:30:54.742275 #32260] DEBUG -- : nil
D, [2016-11-29T18:30:54.743279 #32260] DEBUG -- : nil
D, [2016-11-29T18:31:23.952937 #32260] DEBUG -- : {:right=>[#<Executable:0x005630ca911c88 @path="//usr/lib64/BugpointPasses.so", @name="BugpointPasses.so">, #<Executable:0x005630ca90a708 @path="//usr/lib64/consolekit", @name="consolekit">, #<Entry:0x005630ca909060 @path="//usr/lib64/cracklib_dict.hwm", @name="cracklib_dict.hwm">, #<Entry:0x005630ca907f80 @path="//usr/lib64/cracklib_dict.pwd", @name="cracklib_dict.pwd">, #<Entry:0x005630ca907670 @path="//usr/lib64/cracklib_dict.pwi", @name="cracklib_dict.pwi">, #<Entry:0x005630ca9058e8 @path="//usr/lib64/crt1.o", @name="crt1.o">, #<Entry:0x005630ca904880 @path="//usr/lib64/crti.o", @name="crti.o">, #<Entry:0x005630ca9030c0 @path="//usr/lib64/crtn.o", @name="crtn.o">, #<Executable:0x005630ca8fe660 @path="//usr/lib64/e2initrd_helper", @name="e2initrd_helper">, #<Entry:0x005630ca8f9a48 @path="//usr/lib64/gcrt1.o", @name="gcrt1.o">, #<Executable:0x005630ca8a91b0 @path="//usr/lib64/libaacplus.so", @name="libaacplus.so">, #<Executable:0x005630ca8a75e0 @path="//usr/lib64/libaacplus.so.2", @name="libaacplus.so.2">, #<Executable:0x005630ca8a5650 @path="//usr/lib64/libaacplus.so.2.0.2", @name="libaacplus.so.2.0.2">, #<Executable:0x005630ca88b9f8 @path="//usr/lib64/libacl.so", @name="libacl.so">, #<Executable:0x005630ca88a698 @path="//usr/lib64/libaio.so", @name="libaio.so">, #<Executable:0x005630ca889860 @path="//usr/lib64/libalut.so", @name="libalut.so">, #<Executable:0x005630ca888a78 @path="//usr/lib64/libalut.so.0", @name="libalut.so.0">, #<Executable:0x005630ca888050 @path="//usr/lib64/libalut.so.0.1.0", @name="libalut.so.0.1.0">, #<Entry:0x005630ca751588 @path="//usr/lib64/libanl.a", @name="libanl.a">, #<Executable:0x005630ca74d168 @path="//usr/lib64/libanl.so", @name="libanl.so">, #<Executable:0x005630ca74ab70 @path="//usr/lib64/libapparmor.so", @name="libapparmor.so">, #<Executable:0x005630ca748938 @path="//usr/lib64/libapparmor.so.1", @name="libapparmor.so.1">, #<Executable:0x005630ca7462f0 @path="//usr/lib64/libapparmor.so.1.3.0", @name="libapparmor.so.1.3.0">, #<Executable:0x005630ca741f70 @path="//usr/lib64/libarchive.so", @name="libarchive.so">, #<Executable:0x005630ca73e708 @path="//usr/lib64/libarchive.so.13", @name="libarchive.so.13">, #<Executable:0x005630ca73bbc0 @path="//usr/lib64/libarchive.so.13.1.2", @name="libarchive.so.13.1.2">, #<Executable:0x005630ca737610 @path="//usr/lib64/libasm-0.166.so", @name="libasm-0.166.so">, #<Executable:0x005630ca735ae0 @path="//usr/lib64/libasm.so", @name="libasm.so">, #<Executable:0x005630ca732b88 @path="//usr/lib64/libasm.so.1", @name="libasm.so.1">, #<Executable:0x005630ca72ef60 @path="//usr/lib64/libasound.so", @name="libasound.so">, #<Executable:0x005630ca72c238 @path="//usr/lib64/libasound.so.2", @name="libasound.so.2">, #<Executable:0x005630ca725910 @path="//usr/lib64/libasound.so.2.0.0", @name="libasound.so.2.0.0">, #<Executable:0x005630ca723548 @path="//usr/lib64/libasprintf.so", @name="libasprintf.so">, #<Executable:0x005630ca722148 @path="//usr/lib64/libasprintf.so.0", @name="libasprintf.so.0">, #<Executable:0x005630ca71f588 @path="//usr/lib64/libasprintf.so.0.0.0", @name="libasprintf.so.0.0.0">, #<Executable:0x005630ca71d350 @path="//usr/lib64/libass.so", @name="libass.so">, #<Executable:0x005630ca71aee8 @path="//usr/lib64/libass.so.5", @name="libass.so.5">, #<Executable:0x005630ca7179f0 @path="//usr/lib64/libass.so.5.1.2", @name="libass.so.5.1.2">, #<Executable:0x005630ca7160a0 @path="//usr/lib64/libassuan.so", @name="libassuan.so">, #<Executable:0x005630ca7145c0 @path="//usr/lib64/libassuan.so.0", @name="libassuan.so.0">, #<Executable:0x005630ca712a68 @path="//usr/lib64/libassuan.so.0.5.1", @name="libassuan.so.0.5.1">, #<Executable:0x005630ca711460 @path="//usr/lib64/libasyncns.so", @name="libasyncns.so">, #<Executable:0x005630ca710790 @path="//usr/lib64/libasyncns.so.0", @name="libasyncns.so.0">, #<Executable:0x005630ca70fc78 @path="//usr/lib64/libasyncns.so.0.3.1", @name="libasyncns.so.0.3.1">, #<Executable:0x005630ca70f160 @path="//usr/lib64/libatk-1.0.so", @name="libatk-1.0.so">, #<Executable:0x005630ca70e418 @path="//usr/lib64/libatk-1.0.so.0", @name="libatk-1.0.so.0">, #<Executable:0x005630ca70d590 @path="//usr/lib64/libatk-1.0.so.0.21809.1", @name="libatk-1.0.so.0.21809.1">, #<Executable:0x005630ca70c8c0 @path="//usr/lib64/libatk-bridge-2.0.so", @name="libatk-bridge-2.0.so">, #<Executable:0x005630ca70bdd0 @path="//usr/lib64/libatk-bridge-2.0.so.0", @name="libatk-bridge-2.0.so.0">, #<Executable:0x005630ca70af98 @path="//usr/lib64/libatk-bridge-2.0.so.0.0.0", @name="libatk-bridge-2.0.so.0.0.0">, #<Entry:0x005630ca70a368 @path="//usr/lib64/libatomic_ops.a", @name="libatomic_ops.a">, #<Entry:0x005630ca7098f0 @path="//usr/lib64/libatomic_ops_gpl.a", @name="libatomic_ops_gpl.a">, #<Entry:0x005630ca708f40 @path="//usr/lib64/libatomic_ops_gpl.la", @name="libatomic_ops_gpl.la">, #<Entry:0x005630ca708158 @path="//usr/lib64/libatomic_ops.la", @name="libatomic_ops.la">, #<Executable:0x005630ca7075a0 @path="//usr/lib64/libatspi.so", @name="libatspi.so">, #<Executable:0x005630ca706a10 @path="//usr/lib64/libatspi.so.0", @name="libatspi.so.0">, #<Executable:0x005630ca705d68 @path="//usr/lib64/libatspi.so.0.0.1", @name="libatspi.so.0.0.1">, #<Executable:0x005630ca7051b0 @path="//usr/lib64/libattr.so", @name="libattr.so">, #<Executable:0x005630ca704738 @path="//usr/lib64/libaudiofile.so", @name="libaudiofile.so">, #<Executable:0x005630ca703b30 @path="//usr/lib64/libaudiofile.so.1", @name="libaudiofile.so.1">, #<Executable:0x005630ca702ff0 @path="//usr/lib64/libaudiofile.so.1.0.0", @name="libaudiofile.so.1.0.0">, #<Executable:0x005630ca702438 @path="//usr/lib64/libavcodec.so", @name="libavcodec.so">, #<Executable:0x005630ca701a38 @path="//usr/lib64/libavcodec.so.56", @name="libavcodec.so.56">, #<Executable:0x005630ca701010 @path="//usr/lib64/libavcodec.so.56.60.100", @name="libavcodec.so.56.60.100">, #<Executable:0x005630ca700570 @path="//usr/lib64/libavdevice.so", @name="libavdevice.so">, #<Executable:0x005630ca6ffa08 @path="//usr/lib64/libavdevice.so.56", @name="libavdevice.so.56">, #<Executable:0x005630ca6fef40 @path="//usr/lib64/libavdevice.so.56.4.100", @name="libavdevice.so.56.4.100">, #<Executable:0x005630ca6fe388 @path="//usr/lib64/libavfilter.so", @name="libavfilter.so">, #<Executable:0x005630ca6fd708 @path="//usr/lib64/libavfilter.so.5", @name="libavfilter.so.5">, #<Executable:0x005630ca6fcda8 @path="//usr/lib64/libavfilter.so.5.40.101", @name="libavfilter.so.5.40.101">, #<Executable:0x005630ca6fc308 @path="//usr/lib64/libavformat.so", @name="libavformat.so">, #<Executable:0x005630ca6fb868 @path="//usr/lib64/libavformat.so.56", @name="libavformat.so.56">, #<Executable:0x005630ca6fae68 @path="//usr/lib64/libavformat.so.56.40.101", @name="libavformat.so.56.40.101">, #<Executable:0x005630ca6fa418 @path="//usr/lib64/libavresample.so", @name="libavresample.so">, #<Executable:0x005630ca6f9770 @path="//usr/lib64/libavresample.so.2", @name="libavresample.so.2">, #<Executable:0x005630ca6f8b68 @path="//usr/lib64/libavresample.so.2.1.0", @name="libavresample.so.2.1.0">, #<Executable:0x005630ca6f80a0 @path="//usr/lib64/libavutil.so", @name="libavutil.so">, #<Executable:0x005630ca6f75d8 @path="//usr/lib64/libavutil.so.54", @name="libavutil.so.54">, #<Executable:0x005630ca6f6ac0 @path="//usr/lib64/libavutil.so.54.31.100", @name="libavutil.so.54.31.100">, #<Executable:0x005630ca6f60c0 @path="//usr/lib64/libax25io.so", @name="libax25io.so">, #<Executable:0x005630ca6f5558 @path="//usr/lib64/libax25io.so.0", @name="libax25io.so.0">, #<Executable:0x005630ca6f4950 @path="//usr/lib64/libax25io.so.0.0.0", @name="libax25io.so.0.0.0">, #<Executable:0x005630caa828d8 @path="//usr/lib64/libax25.so", @name="libax25.so">, #<Executable:0x005630caa80fd8 @path="//usr/lib64/libax25.so.0", @name="libax25.so.0">, #<Executable:0x005630caa77ac8 @path="//usr/lib64/libax25.so.0.0.0", @name="libax25.so.0.0.0">, #<Executable:0x005630caa76880 @path="//usr/lib64/libbabl-0.1.so", @name="libbabl-0.1.so">, #<Executable:0x005630caa754d0 @path="//usr/lib64/libbabl-0.1.so.0", @name="libbabl-0.1.so.0">, #<Executable:0x005630caa6ff58 @path="//usr/lib64/libbabl-0.1.so.0.117.1", @name="libbabl-0.1.so.0.117.1">, #<Executable:0x005630caa6ece8 @path="//usr/lib64/libbfd-2.25.1.so", @name="libbfd-2.25.1.so">, #<Executable:0x005630caa6d898 @path="//usr/lib64/libbfd.so", @name="libbfd.so">, #<Executable:0x005630caa6ce98 @path="//usr/lib64/libblkid.so", @name="libblkid.so">, #<Executable:0x005630caa6c498 @path="//usr/lib64/libBLT24.so", @name="libBLT24.so">, #<Executable:0x005630caa669a8 @path="//usr/lib64/libBLTlite24.so", @name="libBLTlite24.so">, #<Executable:0x005630caa65f08 @path="//usr/lib64/libBLTlite.so", @name="libBLTlite.so">, #<Executable:0x005630caa64f68 @path="//usr/lib64/libBLT.so", @name="libBLT.so">, #<Executable:0x005630caa64568 @path="//usr/lib64/libbluetooth.so", @name="libbluetooth.so">, #<Executable:0x005630caa574d0 @path="//usr/lib64/libbluetooth.so.3", @name="libbluetooth.so.3">, #<Executable:0x005630caa56788 @path="//usr/lib64/libbluetooth.so.3.18.11", @name="libbluetooth.so.3.18.11">, #<Executable:0x005630caa555e0 @path="//usr/lib64/libboost_atomic-mt.so", @name="libboost_atomic-mt.so">, #<Executable:0x005630caa4f398 @path="//usr/lib64/libboost_atomic.so", @name="libboost_atomic.so">, #<Executable:0x005630caa4e920 @path="//usr/lib64/libboost_atomic.so.1.56.0", @name="libboost_atomic.so.1.56.0">, #<Executable:0x005630caa4dc78 @path="//usr/lib64/libboost_chrono-mt.so", @name="libboost_chrono-mt.so">, #<Executable:0x005630caa43e80 @path="//usr/lib64/libboost_chrono.so", @name="libboost_chrono.so">, #<Executable:0x005630caa43228 @path="//usr/lib64/libboost_chrono.so.1.56.0", @name="libboost_chrono.so.1.56.0">, #<Executable:0x005630caa42878 @path="//usr/lib64/libboost_container-mt.so", @name="libboost_container-mt.so">, #<Executable:0x005630caa41e78 @path="//usr/lib64/libboost_container.so", @name="libboost_container.so">, #<Executable:0x005630caa414a0 @path="//usr/lib64/libboost_container.so.1.56.0", @name="libboost_container.so.1.56.0">, #<Executable:0x005630caa405f0 @path="//usr/lib64/libboost_date_time-mt.so", @name="libboost_date_time-mt.so">, #<Executable:0x005630caa3fad8 @path="//usr/lib64/libboost_date_time.so", @name="libboost_date_time.so">, #<Executable:0x005630caa3edb8 @path="//usr/lib64/libboost_date_time.so.1.56.0", @name="libboost_date_time.so.1.56.0">, #<Entry:0x005630caa3c568 @path="//usr/lib64/libboost_exception.a", @name="libboost_exception.a">, #<Executable:0x005630caa2b498 @path="//usr/lib64/libboost_filesystem-mt.so", @name="libboost_filesystem-mt.so">, #<Executable:0x005630caa2a1d8 @path="//usr/lib64/libboost_filesystem.so", @name="libboost_filesystem.so">, #<Executable:0x005630caa28c98 @path="//usr/lib64/libboost_filesystem.so.1.56.0", @name="libboost_filesystem.so.1.56.0">, #<Executable:0x005630caa28130 @path="//usr/lib64/libboost_graph-mt.so", @name="libboost_graph-mt.so">, #<Executable:0x005630caa27398 @path="//usr/lib64/libboost_graph.so", @name="libboost_graph.so">, #<Executable:0x005630caa26510 @path="//usr/lib64/libboost_graph.so.1.56.0", @name="libboost_graph.so.1.56.0">, #<Executable:0x005630caa258e0 @path="//usr/lib64/libboost_iostreams-mt.so", @name="libboost_iostreams-mt.so">, #<Executable:0x005630caa24cb0 @path="//usr/lib64/libboost_iostreams.so", @name="libboost_iostreams.so">, #<Executable:0x005630caa24030 @path="//usr/lib64/libboost_iostreams.so.1.56.0", @name="libboost_iostreams.so.1.56.0">, #<Executable:0x005630caa239a0 @path="//usr/lib64/libboost_log-mt.so", @name="libboost_log-mt.so">, #<Executable:0x005630caa22e10 @path="//usr/lib64/libboost_log_setup-mt.so", @name="libboost_log_setup-mt.so">, #<Executable:0x005630caa221b8 @path="//usr/lib64/libboost_log_setup.so", @name="libboost_log_setup.so">, #<Executable:0x005630caa215b0 @path="//usr/lib64/libboost_log_setup.so.1.56.0", @name="libboost_log_setup.so.1.56.0">, #<Executable:0x005630caa20958 @path="//usr/lib64/libboost_log.so", @name="libboost_log.so">, #<Executable:0x005630caa13f50 @path="//usr/lib64/libboost_log.so.1.56.0", @name="libboost_log.so.1.56.0">, #<Executable:0x005630caa12560 @path="//usr/lib64/libboost_math_c99f-mt.so", @name="libboost_math_c99f-mt.so">, #<Executable:0x005630caa11890 @path="//usr/lib64/libboost_math_c99f.so", @name="libboost_math_c99f.so">, #<Executable:0x005630caa10cd8 @path="//usr/lib64/libboost_math_c99f.so.1.56.0", @name="libboost_math_c99f.so.1.56.0">, #<Executable:0x005630caa100f8 @path="//usr/lib64/libboost_math_c99l-mt.so", @name="libboost_math_c99l-mt.so">, #<Executable:0x005630caa0b7b0 @path="//usr/lib64/libboost_math_c99l.so", @name="libboost_math_c99l.so">, #<Executable:0x005630caa0ab58 @path="//usr/lib64/libboost_math_c99l.so.1.56.0", @name="libboost_math_c99l.so.1.56.0">, #<Executable:0x005630caa09f28 @path="//usr/lib64/libboost_math_c99-mt.so", @name="libboost_math_c99-mt.so">, #<Executable:0x005630caa09168 @path="//usr/lib64/libboost_math_c99.so", @name="libboost_math_c99.so">, #<Executable:0x005630caa084e8 @path="//usr/lib64/libboost_math_c99.so.1.56.0", @name="libboost_math_c99.so.1.56.0">, #<Executable:0x005630caa03b00 @path="//usr/lib64/libboost_math_tr1f-mt.so", @name="libboost_math_tr1f-mt.so">, #<Executable:0x005630caa02ea8 @path="//usr/lib64/libboost_math_tr1f.so", @name="libboost_math_tr1f.so">, #<Executable:0x005630caa02160 @path="//usr/lib64/libboost_math_tr1f.so.1.56.0", @name="libboost_math_tr1f.so.1.56.0">, #<Executable:0x005630caa01328 @path="//usr/lib64/libboost_math_tr1l-mt.so", @name="libboost_math_tr1l-mt.so">, #<Executable:0x005630caa006a8 @path="//usr/lib64/libboost_math_tr1l.so", @name="libboost_math_tr1l.so">, #<Executable:0x005630ca9fbe78 @path="//usr/lib64/libboost_math_tr1l.so.1.56.0", @name="libboost_math_tr1l.so.1.56.0">, #<Executable:0x005630ca9fb220 @path="//usr/lib64/libboost_math_tr1-mt.so", @name="libboost_math_tr1-mt.so">, #<Executable:0x005630ca9fa5a0 @path="//usr/lib64/libboost_math_tr1.so", @name="libboost_math_tr1.so">, #<Executable:0x005630ca9f9268 @path="//usr/lib64/libboost_math_tr1.so.1.56.0", @name="libboost_math_tr1.so.1.56.0">, #<Executable:0x005630ca9f80c0 @path="//usr/lib64/libboost_prg_exec_monitor-mt.so", @name="libboost_prg_exec_monitor-mt.so">, #<Executable:0x005630ca9f2a80 @path="//usr/lib64/libboost_prg_exec_monitor.so", @name="libboost_prg_exec_monitor.so">, #<Executable:0x005630ca9f0c58 @path="//usr/lib64/libboost_prg_exec_monitor.so.1.56.0", @name="libboost_prg_exec_monitor.so.1.56.0">, #<Executable:0x005630ca9ef5d8 @path="//usr/lib64/libboost_program_options-mt.so", @name="libboost_program_options-mt.so">, #<Executable:0x005630ca9ed698 @path="//usr/lib64/libboost_program_options.so", @name="libboost_program_options.so">, #<Executable:0x005630ca9ec338 @path="//usr/lib64/libboost_program_options.so.1.56.0", @name="libboost_program_options.so.1.56.0">, #<Executable:0x005630ca9eb9b0 @path="//usr/lib64/libboost_python-2.7-mt.so", @name="libboost_python-2.7-mt.so">, #<Executable:0x005630ca9ead08 @path="//usr/lib64/libboost_python-2.7.so", @name="libboost_python-2.7.so">, #<Executable:0x005630ca9e9e08 @path="//usr/lib64/libboost_python-2.7.so.1.56.0", @name="libboost_python-2.7.so.1.56.0">, #<Executable:0x005630ca9e9048 @path="//usr/lib64/libboost_python-3.4-mt.so", @name="libboost_python-3.4-mt.so">, #<Executable:0x005630ca9e8440 @path="//usr/lib64/libboost_python-3.4.so", @name="libboost_python-3.4.so">, #<Executable:0x005630ca9e7c98 @path="//usr/lib64/libboost_python-3.4.so.1.56.0", @name="libboost_python-3.4.so.1.56.0">, #<Executable:0x005630ca9e6ff0 @path="//usr/lib64/libboost_random-mt.so", @name="libboost_random-mt.so">, #<Executable:0x005630ca9e5d58 @path="//usr/lib64/libboost_random.so", @name="libboost_random.so">, #<Executable:0x005630ca9e49d0 @path="//usr/lib64/libboost_random.so.1.56.0", @name="libboost_random.so.1.56.0">, #<Executable:0x005630ca9e4688 @path="//usr/lib64/libboost_regex-mt.so", @name="libboost_regex-mt.so">, #<Executable:0x005630ca9e3788 @path="//usr/lib64/libboost_regex.so", @name="libboost_regex.so">, #<Executable:0x005630ca9e2d10 @path="//usr/lib64/libboost_regex.so.1.56.0", @name="libboost_regex.so.1.56.0">, #<Executable:0x005630ca9e22e8 @path="//usr/lib64/libboost_serialization-mt.so", @name="libboost_serialization-mt.so">, #<Executable:0x005630ca9e1848 @path="//usr/lib64/libboost_serialization.so", @name="libboost_serialization.so">, #<Executable:0x005630ca9e0df8 @path="//usr/lib64/libboost_serialization.so.1.56.0", @name="libboost_serialization.so.1.56.0">, #<Executable:0x005630ca9e03d0 @path="//usr/lib64/libboost_signals-mt.so", @name="libboost_signals-mt.so">, #<Executable:0x005630ca9cf828 @path="//usr/lib64/libboost_signals.so", @name="libboost_signals.so">, #<Executable:0x005630ca9ce0e0 @path="//usr/lib64/libboost_signals.so.1.56.0", @name="libboost_signals.so.1.56.0">, #<Executable:0x005630ca9cd7d0 @path="//usr/lib64/libboost_system-mt.so", @name="libboost_system-mt.so">, #<Executable:0x005630ca9ccb50 @path="//usr/lib64/libboost_system.so", @name="libboost_system.so">, #<Executable:0x005630ca9ce590 @path="//usr/lib64/libboost_system.so.1.56.0", @name="libboost_system.so.1.56.0">, #<Entry:0x005630ca9aae10 @path="//usr/lib64/libboost_test_exec_monitor.a", @name="libboost_test_exec_monitor.a">, #<Executable:0x005630ca9a8ae8 @path="//usr/lib64/libboost_thread-mt.so", @name="libboost_thread-mt.so">, #<Executable:0x005630ca987c08 @path="//usr/lib64/libboost_thread.so", @name="libboost_thread.so">, #<Executable:0x005630ca986d30 @path="//usr/lib64/libboost_thread.so.1.56.0", @name="libboost_thread.so.1.56.0">, #<Executable:0x005630ca985e30 @path="//usr/lib64/libboost_timer-mt.so", @name="libboost_timer-mt.so">, #<Executable:0x005630ca984df0 @path="//usr/lib64/libboost_timer.so", @name="libboost_timer.so">, #<Executable:0x005630ca963f10 @path="//usr/lib64/libboost_timer.so.1.56.0", @name="libboost_timer.so.1.56.0">, #<Executable:0x005630ca963218 @path="//usr/lib64/libboost_unit_test_framework-mt.so", @name="libboost_unit_test_framework-mt.so">, #<Executable:0x005630ca962318 @path="//usr/lib64/libboost_unit_test_framework.so", @name="libboost_unit_test_framework.so">, #<Executable:0x005630ca9614b8 @path="//usr/lib64/libboost_unit_test_framework.so.1.56.0", @name="libboost_unit_test_framework.so.1.56.0">, #<Executable:0x005630ca94b5c8 @path="//usr/lib64/libboost_wave-mt.so", @name="libboost_wave-mt.so">, #<Executable:0x005630ca94a510 @path="//usr/lib64/libboost_wave.so", @name="libboost_wave.so">, #<Executable:0x005630ca949548 @path="//usr/lib64/libboost_wave.so.1.56.0", @name="libboost_wave.so.1.56.0">, #<Executable:0x005630ca948620 @path="//usr/lib64/libboost_wserialization-mt.so", @name="libboost_wserialization-mt.so">, #<Executable:0x005630ca9477e8 @path="//usr/lib64/libboost_wserialization.so", @name="libboost_wserialization.so">, #<Executable:0x005630ca946c58 @path="//usr/lib64/libboost_wserialization.so.1.56.0", @name="libboost_wserialization.so.1.56.0">, #<Entry:0x005630ca945790 @path="//usr/lib64/libBrokenLocale.a", @name="libBrokenLocale.a">, #<Executable:0x005630ca944ea8 @path="//usr/lib64/libBrokenLocale.so", @name="libBrokenLocale.so">, #<Executable:0x005630ca944548 @path="//usr/lib64/libbz2.so", @name="libbz2.so">, #<Entry:0x005630ca943be8 @path="//usr/lib64/libc.a", @name="libc.a">, #<Executable:0x005630ca943300 @path="//usr/lib64/libcairo-gobject.so", @name="libcairo-gobject.so">, #<Executable:0x005630ca942a18 @path="//usr/lib64/libcairo-gobject.so.2", @name="libcairo-gobject.so.2">, #<Executable:0x005630ca942108 @path="//usr/lib64/libcairo-gobject.so.2.11400.6", @name="libcairo-gobject.so.2.11400.6">, #<Executable:0x005630ca941140 @path="//usr/lib64/libcairo-script-interpreter.so", @name="libcairo-script-interpreter.so">, #<Executable:0x005630ca9405b0 @path="//usr/lib64/libcairo-script-interpreter.so.2", @name="libcairo-script-interpreter.so.2">, #<Executable:0x005630ca93f980 @path="//usr/lib64/libcairo-script-interpreter.so.2.11400.6", @name="libcairo-script-interpreter.so.2.11400.6">, #<Executable:0x005630ca93ef58 @path="//usr/lib64/libcairo.so", @name="libcairo.so">, #<Executable:0x005630ca93e5f8 @path="//usr/lib64/libcairo.so.2", @name="libcairo.so.2">, #<Executable:0x005630ca93dbd0 @path="//usr/lib64/libcairo.so.2.11400.6", @name="libcairo.so.2.11400.6">, #<Entry:0x005630ca93d220 @path="//usr/lib64/libcal3d.la", @name="libcal3d.la">, #<Executable:0x005630ca93c870 @path="//usr/lib64/libcal3d.so", @name="libcal3d.so">, #<Executable:0x005630ca93bee8 @path="//usr/lib64/libcal3d.so.12", @name="libcal3d.so.12">, #<Executable:0x005630ca93ae80 @path="//usr/lib64/libcal3d.so.12.0.0", @name="libcal3d.so.12.0.0">, #<Executable:0x005630ca939080 @path="//usr/lib64/libcanberra-gtk3.so", @name="libcanberra-gtk3.so">, #<Executable:0x005630ca938590 @path="//usr/lib64/libcanberra-gtk3.so.0", @name="libcanberra-gtk3.so.0">, #<Executable:0x005630ca937b68 @path="//usr/lib64/libcanberra-gtk3.so.0.1.9", @name="libcanberra-gtk3.so.0.1.9">, #<Executable:0x005630ca9370c8 @path="//usr/lib64/libcanberra.so", @name="libcanberra.so">, #<Executable:0x005630ca9366f0 @path="//usr/lib64/libcanberra.so.0", @name="libcanberra.so.0">, #<Executable:0x005630ca935cc8 @path="//usr/lib64/libcanberra.so.0.2.5", @name="libcanberra.so.0.2.5">, #<Executable:0x005630ca9352c8 @path="//usr/lib64/libcap-ng.so", @name="libcap-ng.so">, #<Executable:0x005630ca9348a0 @path="//usr/lib64/libcap-ng.so.0", @name="libcap-ng.so.0">, #<Executable:0x005630ca935868 @path="//usr/lib64/libcap-ng.so.0.0.0", @name="libcap-ng.so.0.0.0">, #<Executable:0x005630ca9331f8 @path="//usr/lib64/libcap.so", @name="libcap.so">, #<Executable:0x005630ca932708 @path="//usr/lib64/libc-client.so", @name="libc-client.so">, #<Executable:0x005630ca931c68 @path="//usr/lib64/libc-client.so.1", @name="libc-client.so.1">, #<Executable:0x005630ca931268 @path="//usr/lib64/libc-client.so.1.0.0", @name="libc-client.so.1.0.0">, #<Executable:0x005630ca9309a8 @path="//usr/lib64/libcdrdeflt.so", @name="libcdrdeflt.so">, #<Executable:0x005630ca930070 @path="//usr/lib64/libcdrdeflt.so.1.0", @name="libcdrdeflt.so.1.0">, #<Executable:0x005630ca92f6c0 @path="//usr/lib64/libcidn.so", @name="libcidn.so">, #<Executable:0x005630ca92eb80 @path="//usr/lib64/libck-connector.so", @name="libck-connector.so">, #<Executable:0x005630ca92e1d0 @path="//usr/lib64/libck-connector.so.0", @name="libck-connector.so.0">, #<Executable:0x005630ca92d7d0 @path="//usr/lib64/libck-connector.so.0.0.0", @name="libck-connector.so.0.0.0">, #<Executable:0x005630ca92cec0 @path="//usr/lib64/libclamav.so", @name="libclamav.so">, #<Executable:0x005630ca92c5d8 @path="//usr/lib64/libclamav.so.7", @name="libclamav.so.7">, #<Executable:0x005630ca8b7ad0 @path="//usr/lib64/libclamav.so.7.1.1", @name="libclamav.so.7.1.1">, #<Executable:0x005630ca8b7198 @path="//usr/lib64/libclamunrar_iface.so", @name="libclamunrar_iface.so">, #<Executable:0x005630ca8b66d0 @path="//usr/lib64/libclamunrar_iface.so.7", @name="libclamunrar_iface.so.7">, #<Executable:0x005630ca8b5c58 @path="//usr/lib64/libclamunrar_iface.so.7.1.1", @name="libclamunrar_iface.so.7.1.1">, #<Executable:0x005630ca8b5208 @path="//usr/lib64/libclamunrar.so", @name="libclamunrar.so">, #<Executable:0x005630ca8b4880 @path="//usr/lib64/libclamunrar.so.7", @name="libclamunrar.so.7">, #<Executable:0x005630ca8b3f48 @path="//usr/lib64/libclamunrar.so.7.1.1", @name="libclamunrar.so.7.1.1">, #<Entry:0x005630ca8b3520 @path="//usr/lib64/libc_nonshared.a", @name="libc_nonshared.a">, #<Executable:0x005630ca8b2aa8 @path="//usr/lib64/libcolordcompat.so", @name="libcolordcompat.so">, #<Executable:0x005630ca8b20f8 @path="//usr/lib64/libcolordprivate.so", @name="libcolordprivate.so">, #<Executable:0x005630ca8b1400 @path="//usr/lib64/libcolordprivate.so.2", @name="libcolordprivate.so.2">, #<Executable:0x005630ca8b0910 @path="//usr/lib64/libcolordprivate.so.2.0.4", @name="libcolordprivate.so.2.0.4">, #<Executable:0x005630ca8afec0 @path="//usr/lib64/libcolord.so", @name="libcolord.so">, #<Executable:0x005630ca8af4e8 @path="//usr/lib64/libcolord.so.2", @name="libcolord.so.2">, #<Executable:0x005630ca8ae9d0 @path="//usr/lib64/libcolord.so.2.0.4", @name="libcolord.so.2.0.4">, #<Executable:0x005630ca8ade90 @path="//usr/lib64/libcolorhug.so", @name="libcolorhug.so">, #<Executable:0x005630ca8ad490 @path="//usr/lib64/libcolorhug.so.2", @name="libcolorhug.so.2">, #<Executable:0x005630ca8acb30 @path="//usr/lib64/libcolorhug.so.2.0.4", @name="libcolorhug.so.2.0.4">, #<Executable:0x005630ca8ac130 @path="//usr/lib64/libcom_err.so", @name="libcom_err.so">, #<Executable:0x005630ca91e690 @path="//usr/lib64/libcrack.so", @name="libcrack.so">, #<Executable:0x005630ca91c778 @path="//usr/lib64/libcroco-0.6.so", @name="libcroco-0.6.so">, #<Executable:0x005630ca91bda0 @path="//usr/lib64/libcroco-0.6.so.3", @name="libcroco-0.6.so.3">, #<Executable:0x005630ca91b2b0 @path="//usr/lib64/libcroco-0.6.so.3.0.1", @name="libcroco-0.6.so.3.0.1">, #<Entry:0x005630ca91a518 @path="//usr/lib64/libcrypt.a", @name="libcrypt.a">, #<Executable:0x005630ca919af0 @path="//usr/lib64/libcrypto.so", @name="libcrypto.so">, #<Executable:0x005630ca918fb0 @path="//usr/lib64/libcrypto.so.1.0.0", @name="libcrypto.so.1.0.0">, #<Executable:0x005630ca9184e8 @path="//usr/lib64/libcrypt.so", @name="libcrypt.so">, #<Executable:0x005630ca913ab0 @path="//usr/lib64/libc.so", @name="libc.so">, #<Entry:0x005630ca913088 @path="//usr/lib64/libc_stubs.a", @name="libc_stubs.a">, #<Executable:0x005630ca912638 @path="//usr/lib64/libcunit.so", @name="libcunit.so">, #<Executable:0x005630ca911be8 @path="//usr/lib64/libcunit.so.1", @name="libcunit.so.1">, #<Executable:0x005630ca910bf8 @path="//usr/lib64/libcunit.so.1.0.1", @name="libcunit.so.1.0.1">, #<Executable:0x005630ca910108 @path="//usr/lib64/libcupscgi.so", @name="libcupscgi.so">, #<Executable:0x005630ca90b6a8 @path="//usr/lib64/libcupscgi.so.1", @name="libcupscgi.so.1">, #<Executable:0x005630ca90abe0 @path="//usr/lib64/libcupsfilters.so", @name="libcupsfilters.so">, #<Executable:0x005630ca90a208 @path="//usr/lib64/libcupsfilters.so.1", @name="libcupsfilters.so.1">, #<Executable:0x005630ca909560 @path="//usr/lib64/libcupsfilters.so.1.0.0", @name="libcupsfilters.so.1.0.0">, #<Executable:0x005630ca908110 @path="//usr/lib64/libcupsimage.so", @name="libcupsimage.so">, #<Executable:0x005630ca907800 @path="//usr/lib64/libcupsimage.so.2", @name="libcupsimage.so.2">, #<Executable:0x005630ca906950 @path="//usr/lib64/libcupsmime.so", @name="libcupsmime.so">, #<Executable:0x005630ca9057a8 @path="//usr/lib64/libcupsmime.so.1", @name="libcupsmime.so.1">, #<Executable:0x005630ca904628 @path="//usr/lib64/libcupsppdc.so", @name="libcupsppdc.so">, #<Executable:0x005630ca902e68 @path="//usr/lib64/libcupsppdc.so.1", @name="libcupsppdc.so.1">, #<Executable:0x005630ca900690 @path="//usr/lib64/libcups.so", @name="libcups.so">, #<Executable:0x005630ca8ff8d0 @path="//usr/lib64/libcups.so.2", @name="libcups.so.2">, #<Executable:0x005630ca8feca0 @path="//usr/lib64/libcurl.so", @name="libcurl.so">, #<Executable:0x005630ca8fe0c0 @path="//usr/lib64/libcurl.so.4", @name="libcurl.so.4">, #<Executable:0x005630ca8fd238 @path="//usr/lib64/libcurl.so.4.4.0", @name="libcurl.so.4.4.0">, #<Executable:0x005630ca8fc4f0 @path="//usr/lib64/libcurses.so", @name="libcurses.so">, #<Entry:0x005630ca8fb988 @path="//usr/lib64/libdb-4.8.a", @name="libdb-4.8.a">, #<Entry:0x005630ca8fabf0 @path="//usr/lib64/libdb-4.8.la", @name="libdb-4.8.la">, #<Executable:0x005630ca8f9a20 @path="//usr/lib64/libdb-4.8.so", @name="libdb-4.8.so">, #<Entry:0x005630ca8f8f58 @path="//usr/lib64/libdb.a", @name="libdb.a">, #<Entry:0x005630ca8f8148 @path="//usr/lib64/libdb_cxx-4.8.a", @name="libdb_cxx-4.8.a">, #<Entry:0x005630ca8f7590 @path="//usr/lib64/libdb_cxx-4.8.la", @name="libdb_cxx-4.8.la">, #<Executable:0x005630ca8f6960 @path="//usr/lib64/libdb_cxx-4.8.so", @name="libdb_cxx-4.8.so">, #<Entry:0x005630ca8f57b8 @path="//usr/lib64/libdb_cxx.a", @name="libdb_cxx.a">, #<Executable:0x005630ca8f4ca0 @path="//usr/lib64/libdb_cxx.so", @name="libdb_cxx.so">, #<Executable:0x005630ca8f6f00 @path="//usr/lib64/libdb.so", @name="libdb.so">, #<Entry:0x005630ca8bf8e8 @path="//usr/lib64/libdb_stl-4.8.a", @name="libdb_stl-4.8.a">, #<Entry:0x005630ca8be718 @path="//usr/lib64/libdb_stl-4.8.la", @name="libdb_stl-4.8.la">, #<Executable:0x005630ca8be6c8 @path="//usr/lib64/libdb_stl-4.8.so", @name="libdb_stl-4.8.so">, #<Entry:0x005630ca8bb4f0 @path="//usr/lib64/libdb_stl.a", @name="libdb_stl.a">, #<Executable:0x005630ca8bab40 @path="//usr/lib64/libdb_stl.so", @name="libdb_stl.so">, #<Executable:0x005630ca8ba028 @path="//usr/lib64/libdbus-1.so", @name="libdbus-1.so">, #<Executable:0x005630ca8b9588 @path="//usr/lib64/libdbus-1.so.3", @name="libdbus-1.so.3">, #<Executable:0x005630ca8b89a8 @path="//usr/lib64/libdbus-1.so.3.14.6", @name="libdbus-1.so.3.14.6">, #<Executable:0x005630ca8abf78 @path="//usr/lib64/libdbus-glib-1.so", @name="libdbus-glib-1.so">, #<Executable:0x005630ca8ab550 @path="//usr/lib64/libdbus-glib-1.so.2", @name="libdbus-glib-1.so.2">, #<Executable:0x005630ca8aaa60 @path="//usr/lib64/libdbus-glib-1.so.2.2.2", @name="libdbus-glib-1.so.2.2.2">, #<Executable:0x005630ca8a95e8 @path="//usr/lib64/libdconf.so", @name="libdconf.so">, #<Executable:0x005630ca8a8b48 @path="//usr/lib64/libdconf.so.1", @name="libdconf.so.1">, #<Executable:0x005630ca8a8120 @path="//usr/lib64/libdconf.so.1.0.0", @name="libdconf.so.1.0.0">, #<Executable:0x005630ca8a7720 @path="//usr/lib64/libdeflt.so", @name="libdeflt.so">, #<Executable:0x005630ca8a6d98 @path="//usr/lib64/libdeflt.so.1.0", @name="libdeflt.so.1.0">, #<Executable:0x005630ca8a6438 @path="//usr/lib64/libdialog.so", @name="libdialog.so">, #<Executable:0x005630ca8a59e8 @path="//usr/lib64/libdialog.so.13", @name="libdialog.so.13">, #<Executable:0x005630ca8a4fc0 @path="//usr/lib64/libdialog.so.13.0.0", @name="libdialog.so.13.0.0">, #<Entry:0x005630ca8a4660 @path="//usr/lib64/libdl.a", @name="libdl.a">, #<Executable:0x005630ca88b250 @path="//usr/lib64/libdl.so", @name="libdl.so">, #<Executable:0x005630ca88a198 @path="//usr/lib64/libdrm_intel.so", @name="libdrm_intel.so">, #<Executable:0x005630ca889068 @path="//usr/lib64/libdrm_intel.so.1", @name="libdrm_intel.so.1">, #<Executable:0x005630ca888578 @path="//usr/lib64/libdrm_intel.so.1.0.0", @name="libdrm_intel.so.1.0.0">, #<Executable:0x005630ca752640 @path="//usr/lib64/libdrm.so", @name="libdrm.so">, #<Executable:0x005630ca74e450 @path="//usr/lib64/libdrm.so.2", @name="libdrm.so.2">, #<Executable:0x005630ca74b7f0 @path="//usr/lib64/libdrm.so.2.4.0", @name="libdrm.so.2.4.0">, #<Executable:0x005630ca7497c0 @path="//usr/lib64/libdsocks.so", @name="libdsocks.so">, #<Executable:0x005630ca746c78 @path="//usr/lib64/libdvbv5.so", @name="libdvbv5.so">, #<Executable:0x005630ca744040 @path="//usr/lib64/libdvbv5.so.0", @name="libdvbv5.so.0">, #<Executable:0x005630ca73ebb8 @path="//usr/lib64/libdvbv5.so.0.0.0", @name="libdvbv5.so.0.0.0">, #<Executable:0x005630ca73b8c8 @path="//usr/lib64/libdw-0.166.so", @name="libdw-0.166.so">, #<Executable:0x005630ca737110 @path="//usr/lib64/libdw.so", @name="libdw.so">, #<Executable:0x005630ca735568 @path="//usr/lib64/libdw.so.1", @name="libdw.so.1">, #<Executable:0x005630ca732390 @path="//usr/lib64/libe2p.so", @name="libe2p.so">, #<Entry:0x005630ca72e1a0 @path="//usr/lib64/libebl.a", @name="libebl.a">, #<Executable:0x005630ca727760 @path="//usr/lib64/libedc_ecc_dec.so", @name="libedc_ecc_dec.so">, #<Executable:0x005630ca7241c8 @path="//usr/lib64/libedc_ecc_dec.so.1.0", @name="libedc_ecc_dec.so.1.0">, #<Executable:0x005630ca722c38 @path="//usr/lib64/libedc_ecc.so", @name="libedc_ecc.so">, #<Executable:0x005630ca7207f8 @path="//usr/lib64/libedc_ecc.so.1.0", @name="libedc_ecc.so.1.0">, #<Executable:0x005630ca71e2c8 @path="//usr/lib64/libefiboot.so", @name="libefiboot.so">, #<Executable:0x005630ca71bb90 @path="//usr/lib64/libefiboot.so.0", @name="libefiboot.so.0">, #<Executable:0x005630ca718530 @path="//usr/lib64/libefiboot.so.0.21", @name="libefiboot.so.0.21">, #<Executable:0x005630ca7164b0 @path="//usr/lib64/libefivar.so", @name="libefivar.so">, #<Executable:0x005630ca714750 @path="//usr/lib64/libefivar.so.0", @name="libefivar.so.0">, #<Executable:0x005630ca7129c8 @path="//usr/lib64/libefivar.so.0.21", @name="libefivar.so.0.21">, #<Executable:0x005630ca7112f8 @path="//usr/lib64/libEGL.so", @name="libEGL.so">, #<Executable:0x005630ca710538 @path="//usr/lib64/libEGL.so.1", @name="libEGL.so.1">, #<Executable:0x005630ca70f9a8 @path="//usr/lib64/libEGL.so.1.0.0", @name="libEGL.so.1.0.0">, #<Executable:0x005630ca70ed00 @path="//usr/lib64/libeinfo.so", @name="libeinfo.so">, #<Executable:0x005630ca70dc20 @path="//usr/lib64/libelf-0.166.so", @name="libelf-0.166.so">, #<Executable:0x005630ca70cde8 @path="//usr/lib64/libelf.so", @name="libelf.so">, #<Executable:0x005630ca70c2d0 @path="//usr/lib64/libelf.so.1", @name="libelf.so.1">, #<Executable:0x005630ca70b538 @path="//usr/lib64/libenca.so", @name="libenca.so">, #<Executable:0x005630ca70a7a0 @path="//usr/lib64/libenca.so.0", @name="libenca.so.0">, #<Executable:0x005630ca709d00 @path="//usr/lib64/libenca.so.0.5.1", @name="libenca.so.0.5.1">, #<Executable:0x005630ca7092b0 @path="//usr/lib64/libepoxy.so", @name="libepoxy.so">, #<Executable:0x005630ca7087c0 @path="//usr/lib64/libepoxy.so.0", @name="libepoxy.so.0">, #<Executable:0x005630ca707aa0 @path="//usr/lib64/libepoxy.so.0.0.0", @name="libepoxy.so.0.0.0">, #<Executable:0x005630ca706f60 @path="//usr/lib64/libevdev.so", @name="libevdev.so">, #<Executable:0x005630ca7061c8 @path="//usr/lib64/libevdev.so.2", @name="libevdev.so.2">, #<Executable:0x005630ca7055c0 @path="//usr/lib64/libevdev.so.2.1.10", @name="libevdev.so.2.1.10">, #<Executable:0x005630ca704968 @path="//usr/lib64/libevent-2.0.so.5", @name="libevent-2.0.so.5">, #<Executable:0x005630ca703d38 @path="//usr/lib64/libevent-2.0.so.5.1.9", @name="libevent-2.0.so.5.1.9">, #<Executable:0x005630ca7030e0 @path="//usr/lib64/libevent_core-2.0.so.5", @name="libevent_core-2.0.so.5">, #<Executable:0x005630ca7023c0 @path="//usr/lib64/libevent_core-2.0.so.5.1.9", @name="libevent_core-2.0.so.5.1.9">, #<Executable:0x005630ca7018f8 @path="//usr/lib64/libevent_core.so", @name="libevent_core.so">, #<Executable:0x005630ca700de0 @path="//usr/lib64/libevent_extra-2.0.so.5", @name="libevent_extra-2.0.so.5">, #<Executable:0x005630ca7001d8 @path="//usr/lib64/libevent_extra-2.0.so.5.1.9", @name="libevent_extra-2.0.so.5.1.9">, #<Executable:0x005630ca6ff6c0 @path="//usr/lib64/libevent_extra.so", @name="libevent_extra.so">, #<Executable:0x005630ca6feae0 @path="//usr/lib64/libevent_openssl-2.0.so.5", @name="libevent_openssl-2.0.so.5">, #<Executable:0x005630ca6fdde8 @path="//usr/lib64/libevent_openssl-2.0.so.5.1.9", @name="libevent_openssl-2.0.so.5.1.9">, #<Executable:0x005630ca6fd168 @path="//usr/lib64/libevent_openssl.so", @name="libevent_openssl.so">, #<Executable:0x005630ca6fc6c8 @path="//usr/lib64/libevent_pthreads-2.0.so.5", @name="libevent_pthreads-2.0.so.5">, #<Executable:0x005630ca6fbbd8 @path="//usr/lib64/libevent_pthreads-2.0.so.5.1.9", @name="libevent_pthreads-2.0.so.5.1.9">, #<Executable:0x005630ca6fb0e8 @path="//usr/lib64/libevent_pthreads.so", @name="libevent_pthreads.so">, #<Executable:0x005630ca6fa620 @path="//usr/lib64/libevent.so", @name="libevent.so">, #<Executable:0x005630ca6f9810 @path="//usr/lib64/libevtlog.so", @name="libevtlog.so">, #<Executable:0x005630ca6f8ac8 @path="//usr/lib64/libevtlog.so.0", @name="libevtlog.so.0">, #<Executable:0x005630ca6f7fb0 @path="//usr/lib64/libevtlog.so.0.0.0", @name="libevtlog.so.0.0.0">, #<Entry:0x005630ca6f7420 @path="//usr/lib64/libeXosip2.a", @name="libeXosip2.a">, #<Entry:0x005630ca6f68b8 @path="//usr/lib64/libeXosip2.la", @name="libeXosip2.la">, #<Executable:0x005630ca6f5da0 @path="//usr/lib64/libeXosip2.so", @name="libeXosip2.so">, #<Executable:0x005630ca6f5080 @path="//usr/lib64/libeXosip2.so.10", @name="libeXosip2.so.10">, #<Executable:0x005630caa83df0 @path="//usr/lib64/libeXosip2.so.10.0.0", @name="libeXosip2.so.10.0.0">, #<Executable:0x005630caa80f38 @path="//usr/lib64/libexpat.so", @name="libexpat.so">, #<Executable:0x005630caa77938 @path="//usr/lib64/libexpat.so.1", @name="libexpat.so.1">, #<Executable:0x005630caa764e8 @path="//usr/lib64/libexpat.so.1.6.0", @name="libexpat.so.1.6.0">, #<Executable:0x005630caa74dc8 @path="//usr/lib64/libexpatu.so", @name="libexpatu.so">, #<Executable:0x005630caa6f990 @path="//usr/lib64/libexpatu.so.1", @name="libexpatu.so.1">, #<Executable:0x005630caa6e540 @path="//usr/lib64/libexpatu.so.1.6.0", @name="libexpatu.so.1.6.0">, #<Executable:0x005630caa6d460 @path="//usr/lib64/libexpatw.so", @name="libexpatw.so">, #<Executable:0x005630caa6c9e8 @path="//usr/lib64/libexpatw.so.1", @name="libexpatw.so.1">, #<Executable:0x005630caa66de0 @path="//usr/lib64/libexpatw.so.1.6.0", @name="libexpatw.so.1.6.0">, #<Executable:0x005630caa66368 @path="//usr/lib64/libexslt.so", @name="libexslt.so">, #<Executable:0x005630caa65260 @path="//usr/lib64/libexslt.so.0", @name="libexslt.so.0">, #<Executable:0x005630caa647e8 @path="//usr/lib64/libexslt.so.0.8.17", @name="libexslt.so.0.8.17">, #<Executable:0x005630caa57840 @path="//usr/lib64/libext2fs.so", @name="libext2fs.so">, #<Executable:0x005630caa568c8 @path="//usr/lib64/libfaad.so", @name="libfaad.so">, #<Executable:0x005630caa554c8 @path="//usr/lib64/libfaad.so.2", @name="libfaad.so.2">, #<Executable:0x005630caa4f320 @path="//usr/lib64/libfaad.so.2.0.0", @name="libfaad.so.2.0.0">, #<Executable:0x005630caa4e808 @path="//usr/lib64/libfam.so", @name="libfam.so">, #<Executable:0x005630caa4d908 @path="//usr/lib64/libfam.so.0", @name="libfam.so.0">, #<Executable:0x005630caa43ae8 @path="//usr/lib64/libfam.so.0.0.0", @name="libfam.so.0.0.0">, #<Executable:0x005630caa42ee0 @path="//usr/lib64/libfdisk.so", @name="libfdisk.so">, #<Executable:0x005630caa42490 @path="//usr/lib64/libfdisk.so.1", @name="libfdisk.so.1">, #<Executable:0x005630caa41a18 @path="//usr/lib64/libfdisk.so.1.1.0", @name="libfdisk.so.1.1.0">, #<Executable:0x005630caa40ca8 @path="//usr/lib64/libfdt-1.4.1.so", @name="libfdt-1.4.1.so">, #<Executable:0x005630caa3fe20 @path="//usr/lib64/libfdt.so", @name="libfdt.so">, #<Executable:0x005630caa3f088 @path="//usr/lib64/libfdt.so.1", @name="libfdt.so.1">, #<Executable:0x005630caa2b718 @path="//usr/lib64/libffi.so", @name="libffi.so">, #<Executable:0x005630caa2a368 @path="//usr/lib64/libffi.so.6", @name="libffi.so.6">, #<Executable:0x005630caa28ce8 @path="//usr/lib64/libffi.so.6.0.4", @name="libffi.so.6.0.4">, #<Executable:0x005630caa2b998 @path="//usr/lib64/libfile.so", @name="libfile.so">, #<Executable:0x005630caa272d0 @path="//usr/lib64/libfile.so.1.0", @name="libfile.so.1.0">, #<Executable:0x005630caa264c0 @path="//usr/lib64/libfind.so", @name="libfind.so">, #<Executable:0x005630caa25868 @path="//usr/lib64/libfind.so.1.0", @name="libfind.so.1.0">, #<Entry:0x005630caa24c38 @path="//usr/lib64/libfl.a", @name="libfl.a">, #<Executable:0x005630caa25b88 @path="//usr/lib64/libFLAC.so", @name="libFLAC.so">, #<Executable:0x005630caa233d8 @path="//usr/lib64/libFLAC++.so", @name="libFLAC++.so">, #<Executable:0x005630caa227a8 @path="//usr/lib64/libFLAC++.so.6", @name="libFLAC++.so.6">, #<Executable:0x005630caa21ad8 @path="//usr/lib64/libFLAC++.so.6.3.0", @name="libFLAC++.so.6.3.0">, #<Executable:0x005630caa20e30 @path="//usr/lib64/libFLAC.so.8", @name="libFLAC.so.8">, #<Executable:0x005630caa20048 @path="//usr/lib64/libFLAC.so.8.3.0", @name="libFLAC.so.8.3.0">, #<Entry:0x005630caa126c8 @path="//usr/lib64/libfl_pic.a", @name="libfl_pic.a">, #<Executable:0x005630caa11a70 @path="//usr/lib64/libfontconfig.so", @name="libfontconfig.so">, #<Executable:0x005630caa10da0 @path="//usr/lib64/libfontconfig.so.1", @name="libfontconfig.so.1">, #<Executable:0x005630caa100a8 @path="//usr/lib64/libfontconfig.so.1.8.0", @name="libfontconfig.so.1.8.0">, #<Executable:0x005630caa0b4e0 @path="//usr/lib64/libfontembed.so", @name="libfontembed.so">, #<Executable:0x005630caa0a7e8 @path="//usr/lib64/libfontembed.so.1", @name="libfontembed.so.1">, #<Executable:0x005630caa09af0 @path="//usr/lib64/libfontembed.so.1.0.0", @name="libfontembed.so.1.0.0">, #<Executable:0x005630caa08d30 @path="//usr/lib64/libfontenc.so", @name="libfontenc.so">, #<Executable:0x005630caa080b0 @path="//usr/lib64/libfontenc.so.1", @name="libfontenc.so.1">, #<Executable:0x005630caa03380 @path="//usr/lib64/libfontenc.so.1.0.0", @name="libfontenc.so.1.0.0">, #<Executable:0x005630caa025e8 @path="//usr/lib64/libform.so", @name="libform.so">, #<Executable:0x005630caa01828 @path="//usr/lib64/libform.so.5", @name="libform.so.5">, #<Executable:0x005630caa00bd0 @path="//usr/lib64/libform.so.5.9", @name="libform.so.5.9">, #<Executable:0x005630caa02458 @path="//usr/lib64/libformw.so", @name="libformw.so">, #<Executable:0x005630ca9fb338 @path="//usr/lib64/libformw.so.5", @name="libformw.so.5">, #<Executable:0x005630ca9fa640 @path="//usr/lib64/libformw.so.5.9", @name="libformw.so.5.9">, #<Executable:0x005630ca9f9218 @path="//usr/lib64/libfreeimage-3.15.4.so", @name="libfreeimage-3.15.4.so">, #<Executable:0x005630ca9f9830 @path="//usr/lib64/libfreeimageplus-3.15.4.so", @name="libfreeimageplus-3.15.4.so">, #<Executable:0x005630ca9f2530 @path="//usr/lib64/libfreeimageplus.so", @name="libfreeimageplus.so">, #<Executable:0x005630ca9f00f0 @path="//usr/lib64/libfreeimageplus.so.3", @name="libfreeimageplus.so.3">, #<Executable:0x005630ca9eef20 @path="//usr/lib64/libfreeimage.so", @name="libfreeimage.so">, #<Executable:0x005630ca9ecba8 @path="//usr/lib64/libfreeimage.so.3", @name="libfreeimage.so.3">, #<Executable:0x005630ca9ebe88 @path="//usr/lib64/libfreetype.so", @name="libfreetype.so">, #<Executable:0x005630ca9eb280 @path="//usr/lib64/libfreetype.so.6", @name="libfreetype.so.6">, #<Executable:0x005630ca9ea4e8 @path="//usr/lib64/libfreetype.so.6.12.3", @name="libfreetype.so.6.12.3">, #<Executable:0x005630ca9e9890 @path="//usr/lib64/libfribidi.so", @name="libfribidi.so">, #<Executable:0x005630ca9e89e0 @path="//usr/lib64/libfribidi.so.0", @name="libfribidi.so.0">, #<Executable:0x005630ca9e7b08 @path="//usr/lib64/libfribidi.so.0.3.5", @name="libfribidi.so.0.3.5">, #<Executable:0x005630ca9e6cd0 @path="//usr/lib64/libfuse.so", @name="libfuse.so">, #<Executable:0x005630ca9e58d0 @path="//usr/lib64/libfuse.so.2", @name="libfuse.so.2">, #<Executable:0x005630ca9e4700 @path="//usr/lib64/libfuse.so.2.9.4", @name="libfuse.so.2.9.4">, #<Entry:0x005630ca9e3da0 @path="//usr/lib64/libg.a", @name="libg.a">, #<Executable:0x005630ca9e3300 @path="//usr/lib64/libgailutil-3.so", @name="libgailutil-3.so">, #<Executable:0x005630ca9e2838 @path="//usr/lib64/libgailutil-3.so.0", @name="libgailutil-3.so.0">, #<Executable:0x005630ca9e1d48 @path="//usr/lib64/libgailutil-3.so.0.0.0", @name="libgailutil-3.so.0.0.0">, #<Executable:0x005630ca9e1230 @path="//usr/lib64/libgailutil.so", @name="libgailutil.so">, #<Executable:0x005630ca9e0768 @path="//usr/lib64/libgailutil.so.18", @name="libgailutil.so.18">, #<Executable:0x005630ca9cfb70 @path="//usr/lib64/libgailutil.so.18.0.1", @name="libgailutil.so.18.0.1">, #<Executable:0x005630ca9ce3d8 @path="//usr/lib64/libgbm.so", @name="libgbm.so">, #<Executable:0x005630ca9cd988 @path="//usr/lib64/libgbm.so.1", @name="libgbm.so.1">, #<Executable:0x005630ca9ccce0 @path="//usr/lib64/libgbm.so.1.0.0", @name="libgbm.so.1.0.0">, #<Executable:0x005630ca9cfaf8 @path="//usr/lib64/libgcrypt.so", @name="libgcrypt.so">, #<Executable:0x005630ca9a99c0 @path="//usr/lib64/libgcrypt.so.20", @name="libgcrypt.so.20">, #<Executable:0x005630ca9a85e8 @path="//usr/lib64/libgcrypt.so.20.1.3", @name="libgcrypt.so.20.1.3">, #<Executable:0x005630ca987668 @path="//usr/lib64/libgdbm_compat.so", @name="libgdbm_compat.so">, #<Executable:0x005630ca9866c8 @path="//usr/lib64/libgdbm_compat.so.4", @name="libgdbm_compat.so.4">, #<Executable:0x005630ca9855c0 @path="//usr/lib64/libgdbm_compat.so.4.0.0", @name="libgdbm_compat.so.4.0.0">, #<Executable:0x005630ca9843f0 @path="//usr/lib64/libgdbm.so", @name="libgdbm.so">, #<Executable:0x005630ca963678 @path="//usr/lib64/libgdbm.so.4", @name="libgdbm.so.4">, #<Executable:0x005630ca962660 @path="//usr/lib64/libgdbm.so.4.0.0", @name="libgdbm.so.4.0.0">, #<Executable:0x005630ca9616e8 @path="//usr/lib64/libgdk-3.so", @name="libgdk-3.so">, #<Executable:0x005630ca94b8c0 @path="//usr/lib64/libgdk-3.so.0", @name="libgdk-3.so.0">, #<Executable:0x005630ca94a5d8 @path="//usr/lib64/libgdk-3.so.0.2000.9", @name="libgdk-3.so.0.2000.9">, #<Executable:0x005630ca9494f8 @path="//usr/lib64/libgdk_pixbuf-2.0.so", @name="libgdk_pixbuf-2.0.so">, #<Executable:0x005630ca948440 @path="//usr/lib64/libgdk_pixbuf-2.0.so.0", @name="libgdk_pixbuf-2.0.so.0">, #<Executable:0x005630ca9474f0 @path="//usr/lib64/libgdk_pixbuf-2.0.so.0.3200.3", @name="libgdk_pixbuf-2.0.so.0.3200.3">, #<Executable:0x005630ca946208 @path="//usr/lib64/libgdk_pixbuf_xlib-2.0.so", @name="libgdk_pixbuf_xlib-2.0.so">, #<Executable:0x005630ca9453a8 @path="//usr/lib64/libgdk_pixbuf_xlib-2.0.so.0", @name="libgdk_pixbuf_xlib-2.0.so.0">, #<Executable:0x005630ca944958 @path="//usr/lib64/libgdk_pixbuf_xlib-2.0.so.0.3200.3", @name="libgdk_pixbuf_xlib-2.0.so.0.3200.3">, #<Executable:0x005630ca9459e8 @path="//usr/lib64/libgdk-x11-2.0.so", @name="libgdk-x11-2.0.so">, #<Executable:0x005630ca943698 @path="//usr/lib64/libgdk-x11-2.0.so.0", @name="libgdk-x11-2.0.so.0">, #<Executable:0x005630ca942cc0 @path="//usr/lib64/libgdk-x11-2.0.so.0.2400.30", @name="libgdk-x11-2.0.so.0.2400.30">, #<Executable:0x005630ca9422c0 @path="//usr/lib64/libgegl-0.2.so", @name="libgegl-0.2.so">, #<Executable:0x005630ca941230 @path="//usr/lib64/libgegl-0.2.so.0", @name="libgegl-0.2.so.0">, #<Executable:0x005630ca940560 @path="//usr/lib64/libgegl-0.2.so.0.199.1", @name="libgegl-0.2.so.0.199.1">, #<Executable:0x005630ca93f9d0 @path="//usr/lib64/libgettextlib-0.19.7.so", @name="libgettextlib-0.19.7.so">, #<Executable:0x005630ca93eeb8 @path="//usr/lib64/libgettextlib.so", @name="libgettextlib.so">, #<Executable:0x005630ca93e468 @path="//usr/lib64/libgettextpo.so", @name="libgettextpo.so">, #<Executable:0x005630ca93d9a0 @path="//usr/lib64/libgettextpo.so.0", @name="libgettextpo.so.0">, #<Executable:0x005630ca93cf50 @path="//usr/lib64/libgettextpo.so.0.5.3", @name="libgettextpo.so.0.5.3">, #<Executable:0x005630ca93c528 @path="//usr/lib64/libgettextsrc-0.19.7.so", @name="libgettextsrc-0.19.7.so">, #<Executable:0x005630ca93b8a8 @path="//usr/lib64/libgettextsrc.so", @name="libgettextsrc.so">, #<Entry:0x005630ca93a778 @path="//usr/lib64/libgiblib.a", @name="libgiblib.a">, #<Entry:0x005630ca9395f8 @path="//usr/lib64/libgiblib.la", @name="libgiblib.la">, #<Executable:0x005630ca938a40 @path="//usr/lib64/libgiblib.so", @name="libgiblib.so">, #<Executable:0x005630ca937ed8 @path="//usr/lib64/libgiblib.so.1", @name="libgiblib.so.1">, #<Executable:0x005630ca937438 @path="//usr/lib64/libgiblib.so.1.0.6", @name="libgiblib.so.1.0.6">, #<Executable:0x005630ca9368a8 @path="//usr/lib64/libgif.so", @name="libgif.so">, #<Executable:0x005630ca935de0 @path="//usr/lib64/libgif.so.4", @name="libgif.so.4">, #<Executable:0x005630ca935318 @path="//usr/lib64/libgif.so.4.1.6", @name="libgif.so.4.1.6">, #<Executable:0x005630ca934800 @path="//usr/lib64/libgimp-2.0.so", @name="libgimp-2.0.so">, #<Executable:0x005630ca933e50 @path="//usr/lib64/libgimp-2.0.so.0", @name="libgimp-2.0.so.0">, #<Executable:0x005630ca932f50 @path="//usr/lib64/libgimp-2.0.so.0.800.14", @name="libgimp-2.0.so.0.800.14">, #<Executable:0x005630ca932410 @path="//usr/lib64/libgimpbase-2.0.so", @name="libgimpbase-2.0.so">, #<Executable:0x005630ca931948 @path="//usr/lib64/libgimpbase-2.0.so.0", @name="libgimpbase-2.0.so.0">, #<Executable:0x005630ca930ea8 @path="//usr/lib64/libgimpbase-2.0.so.0.800.14", @name="libgimpbase-2.0.so.0.800.14">, #<Executable:0x005630ca9304f8 @path="//usr/lib64/libgimpcolor-2.0.so", @name="libgimpcolor-2.0.so">, #<Executable:0x005630ca92fbe8 @path="//usr/lib64/libgimpcolor-2.0.so.0", @name="libgimpcolor-2.0.so.0">, #<Executable:0x005630ca92ef68 @path="//usr/lib64/libgimpcolor-2.0.so.0.800.14", @name="libgimpcolor-2.0.so.0.800.14">, #<Executable:0x005630ca92e4c8 @path="//usr/lib64/libgimpconfig-2.0.so", @name="libgimpconfig-2.0.so">, #<Executable:0x005630ca92d9b0 @path="//usr/lib64/libgimpconfig-2.0.so.0", @name="libgimpconfig-2.0.so.0">, #<Executable:0x005630ca92cfb0 @path="//usr/lib64/libgimpconfig-2.0.so.0.800.14", @name="libgimpconfig-2.0.so.0.800.14">, #<Executable:0x005630ca92c588 @path="//usr/lib64/libgimpmath-2.0.so", @name="libgimpmath-2.0.so">, #<Executable:0x005630ca8b7a80 @path="//usr/lib64/libgimpmath-2.0.so.0", @name="libgimpmath-2.0.so.0">, #<Executable:0x005630ca8b7008 @path="//usr/lib64/libgimpmath-2.0.so.0.800.14", @name="libgimpmath-2.0.so.0.800.14">, #<Executable:0x005630ca8b64a0 @path="//usr/lib64/libgimpmodule-2.0.so", @name="libgimpmodule-2.0.so">, #<Executable:0x005630ca8b5938 @path="//usr/lib64/libgimpmodule-2.0.so.0", @name="libgimpmodule-2.0.so.0">, #<Executable:0x005630ca8b4e70 @path="//usr/lib64/libgimpmodule-2.0.so.0.800.14", @name="libgimpmodule-2.0.so.0.800.14">, #<Executable:0x005630ca8b43f8 @path="//usr/lib64/libgimpthumb-2.0.so", @name="libgimpthumb-2.0.so">, #<Executable:0x005630ca8b3ae8 @path="//usr/lib64/libgimpthumb-2.0.so.0", @name="libgimpthumb-2.0.so.0">, #<Executable:0x005630ca8b2fd0 @path="//usr/lib64/libgimpthumb-2.0.so.0.800.14", @name="libgimpthumb-2.0.so.0.800.14">, #<Executable:0x005630ca8b2580 @path="//usr/lib64/libgimpui-2.0.so", @name="libgimpui-2.0.so">, #<Executable:0x005630ca8b1a90 @path="//usr/lib64/libgimpui-2.0.so.0", @name="libgimpui-2.0.so.0">, #<Executable:0x005630ca8b0c08 @path="//usr/lib64/libgimpui-2.0.so.0.800.14", @name="libgimpui-2.0.so.0.800.14">, #<Executable:0x005630ca8b0028 @path="//usr/lib64/libgimpwidgets-2.0.so", @name="libgimpwidgets-2.0.so">, #<Executable:0x005630ca8af628 @path="//usr/lib64/libgimpwidgets-2.0.so.0", @name="libgimpwidgets-2.0.so.0">, #<Executable:0x005630ca8aea70 @path="//usr/lib64/libgimpwidgets-2.0.so.0.800.14", @name="libgimpwidgets-2.0.so.0.800.14">, #<Executable:0x005630ca8addf0 @path="//usr/lib64/libgio-2.0.so", @name="libgio-2.0.so">, #<Executable:0x005630ca8ad328 @path="//usr/lib64/libgio-2.0.so.0", @name="libgio-2.0.so.0">, #<Executable:0x005630ca8ac860 @path="//usr/lib64/libgio-2.0.so.0.4600.2", @name="libgio-2.0.so.0.4600.2">, #<Executable:0x005630ca91fe50 @path="//usr/lib64/libgirara-gtk3.so", @name="libgirara-gtk3.so">, #<Executable:0x005630ca91d100 @path="//usr/lib64/libgirara-gtk3.so.1", @name="libgirara-gtk3.so.1">, #<Executable:0x005630ca91c318 @path="//usr/lib64/libgirara-gtk3.so.1.1", @name="libgirara-gtk3.so.1.1">, #<Executable:0x005630ca91b7d8 @path="//usr/lib64/libgirepository-1.0.so", @name="libgirepository-1.0.so">, #<Executable:0x005630ca91ac48 @path="//usr/lib64/libgirepository-1.0.so.1", @name="libgirepository-1.0.so.1">, #<Executable:0x005630ca919e38 @path="//usr/lib64/libgirepository-1.0.so.1.0.0", @name="libgirepository-1.0.so.1.0.0">, #<Executable:0x005630ca9192d0 @path="//usr/lib64/libglade-2.0.so", @name="libglade-2.0.so">, #<Executable:0x005630ca9186c8 @path="//usr/lib64/libglade-2.0.so.0", @name="libglade-2.0.so.0">, #<Executable:0x005630ca913c68 @path="//usr/lib64/libglade-2.0.so.0.0.7", @name="libglade-2.0.so.0.0.7">, #<Executable:0x005630ca913178 @path="//usr/lib64/libglapi.so", @name="libglapi.so">, #<Executable:0x005630ca9125c0 @path="//usr/lib64/libglapi.so.0", @name="libglapi.so.0">, #<Executable:0x005630ca911ad0 @path="//usr/lib64/libglapi.so.0.0.0", @name="libglapi.so.0.0.0">, #<Executable:0x005630ca910a40 @path="//usr/lib64/libGLESv2.so", @name="libGLESv2.so">, #<Executable:0x005630ca90bf18 @path="//usr/lib64/libGLESv2.so.2", @name="libGLESv2.so.2">, #<Executable:0x005630ca90b388 @path="//usr/lib64/libGLESv2.so.2.0.0", @name="libGLESv2.so.2.0.0">, #<Executable:0x005630ca90a7f8 @path="//usr/lib64/libGLEWmx.so", @name="libGLEWmx.so">, #<Executable:0x005630ca909d30 @path="//usr/lib64/libGLEWmx.so.1.10", @name="libGLEWmx.so.1.10">, #<Executable:0x005630ca9089a8 @path="//usr/lib64/libGLEWmx.so.1.10.0", @name="libGLEWmx.so.1.10.0">, #<Executable:0x005630ca907bc0 @path="//usr/lib64/libGLEW.so", @name="libGLEW.so">, #<Executable:0x005630ca906e78 @path="//usr/lib64/libGLEW.so.1.10", @name="libGLEW.so.1.10">, #<Executable:0x005630ca905c30 @path="//usr/lib64/libGLEW.so.1.10.0", @name="libGLEW.so.1.10.0">, #<Executable:0x005630ca904970 @path="//usr/lib64/libglib-2.0.so", @name="libglib-2.0.so">, #<Executable:0x005630ca902fd0 @path="//usr/lib64/libglib-2.0.so.0", @name="libglib-2.0.so.0">, #<Executable:0x005630ca900898 @path="//usr/lib64/libglib-2.0.so.0.4600.2", @name="libglib-2.0.so.0.4600.2">, #<Executable:0x005630ca8ff808 @path="//usr/lib64/libGL.so", @name="libGL.so">, #<Executable:0x005630ca8feb38 @path="//usr/lib64/libGL.so.1", @name="libGL.so.1">, #<Executable:0x005630ca8fde90 @path="//usr/lib64/libGL.so.1.2.0", @name="libGL.so.1.2.0">, #<Executable:0x005630ca8fce00 @path="//usr/lib64/libGLU.so", @name="libGLU.so">, #<Executable:0x005630ca8fc108 @path="//usr/lib64/libGLU.so.1", @name="libGLU.so.1">, #<Executable:0x005630ca8fb2a8 @path="//usr/lib64/libGLU.so.1.3.1", @name="libGLU.so.1.3.1">, #<Executable:0x005630ca8fa4c0 @path="//usr/lib64/libglut.so", @name="libglut.so">, #<Executable:0x005630ca8f93e0 @path="//usr/lib64/libglut.so.3", @name="libglut.so.3">, #<Executable:0x005630ca8f8710 @path="//usr/lib64/libglut.so.3.10.0", @name="libglut.so.3.10.0">, #<Executable:0x005630ca8f78b0 @path="//usr/lib64/libgmodule-2.0.so", @name="libgmodule-2.0.so">, #<Executable:0x005630ca8f6bb8 @path="//usr/lib64/libgmodule-2.0.so.0", @name="libgmodule-2.0.so.0">, #<Executable:0x005630ca8f5830 @path="//usr/lib64/libgmodule-2.0.so.0.4600.2", @name="libgmodule-2.0.so.0.4600.2">, #<Executable:0x005630ca8f4c50 @path="//usr/lib64/libgmp.so", @name="libgmp.so">, #<Executable:0x005630ca8dbf70 @path="//usr/lib64/libgmp.so.10", @name="libgmp.so.10">, #<Executable:0x005630ca8bf6b8 @path="//usr/lib64/libgmp.so.10.2.0", @name="libgmp.so.10.2.0">, #<Executable:0x005630ca8bd7c8 @path="//usr/lib64/libgmpxx.so", @name="libgmpxx.so">, #<Executable:0x005630ca8bbbd0 @path="//usr/lib64/libgmpxx.so.4", @name="libgmpxx.so.4">, #<Executable:0x005630ca8bb0b8 @path="//usr/lib64/libgmpxx.so.4.4.0", @name="libgmpxx.so.4.4.0">, #<Executable:0x005630ca8ba578 @path="//usr/lib64/libgnutls-openssl.so", @name="libgnutls-openssl.so">, #<Executable:0x005630ca8b99c0 @path="//usr/lib64/libgnutls-openssl.so.27", @name="libgnutls-openssl.so.27">, #<Executable:0x005630ca8b8e30 @path="//usr/lib64/libgnutls-openssl.so.27.0.2", @name="libgnutls-openssl.so.27.0.2">, #<Executable:0x005630ca8b8228 @path="//usr/lib64/libgnutls.so", @name="libgnutls.so">, #<Executable:0x005630ca8ab780 @path="//usr/lib64/libgnutls.so.28", @name="libgnutls.so.28">, #<Executable:0x005630ca8aabf0 @path="//usr/lib64/libgnutls.so.28.41.9", @name="libgnutls.so.28.41.9">, #<Executable:0x005630ca8a9728 @path="//usr/lib64/libgnutlsxx.so", @name="libgnutlsxx.so">, #<Executable:0x005630ca8a8af8 @path="//usr/lib64/libgnutlsxx.so.28", @name="libgnutlsxx.so.28">, #<Executable:0x005630ca8a8378 @path="//usr/lib64/libgnutlsxx.so.28.1.0", @name="libgnutlsxx.so.28.1.0">, #<Executable:0x005630ca8a7568 @path="//usr/lib64/libgobject-2.0.so", @name="libgobject-2.0.so">, #<Executable:0x005630ca8a6b68 @path="//usr/lib64/libgobject-2.0.so.0", @name="libgobject-2.0.so.0">, #<Executable:0x005630ca8a60f0 @path="//usr/lib64/libgobject-2.0.so.0.4600.2", @name="libgobject-2.0.so.0.4600.2">, #<Executable:0x005630ca8a5510 @path="//usr/lib64/libgpac.so", @name="libgpac.so">, #<Executable:0x005630ca8a4b10 @path="//usr/lib64/libgpac.so.4", @name="libgpac.so.4">, #<Executable:0x005630ca8a79c8 @path="//usr/lib64/libgpac.so.4.2.0", @name="libgpac.so.4.2.0">, #<Executable:0x005630ca88a878 @path="//usr/lib64/libgpg-error.so", @name="libgpg-error.so">, #<Executable:0x005630ca889590 @path="//usr/lib64/libgpg-error.so.0", @name="libgpg-error.so.0">, #<Executable:0x005630ca888870 @path="//usr/lib64/libgpg-error.so.0.15.0", @name="libgpg-error.so.0.15.0">, #<Executable:0x005630ca753180 @path="//usr/lib64/libgpgme-pthread.so", @name="libgpgme-pthread.so">, #<Executable:0x005630ca74ed88 @path="//usr/lib64/libgpgme-pthread.so.11", @name="libgpgme-pthread.so.11">, #<Executable:0x005630ca74bae8 @path="//usr/lib64/libgpgme-pthread.so.11.13.4", @name="libgpgme-pthread.so.11.13.4">, #<Executable:0x005630ca749748 @path="//usr/lib64/libgpgme.so", @name="libgpgme.so">, #<Executable:0x005630ca746930 @path="//usr/lib64/libgpgme.so.11", @name="libgpgme.so.11">, #<Executable:0x005630ca741de0 @path="//usr/lib64/libgpgme.so.11.13.4", @name="libgpgme.so.11.13.4">, #<Executable:0x005630ca73dc18 @path="//usr/lib64/libgpm.so", @name="libgpm.so">, #<Executable:0x005630ca73a5b8 @path="//usr/lib64/libgraphite2.so", @name="libgraphite2.so">, #<Executable:0x005630ca736940 @path="//usr/lib64/libgraphite2.so.3", @name="libgraphite2.so.3">, #<Executable:0x005630ca7344d8 @path="//usr/lib64/libgraphite2.so.3.0.1", @name="libgraphite2.so.3.0.1">, #<Executable:0x005630ca730338 @path="//usr/lib64/libgs.so", @name="libgs.so">, #<Executable:0x005630ca72cd28 @path="//usr/lib64/libgs.so.9", @name="libgs.so.9">, #<Executable:0x005630ca725ed8 @path="//usr/lib64/libgs.so.9.15", @name="libgs.so.9.15">, #<Executable:0x005630ca723228 @path="//usr/lib64/libgthread-2.0.so", @name="libgthread-2.0.so">, #<Executable:0x005630ca721270 @path="//usr/lib64/libgthread-2.0.so.0", @name="libgthread-2.0.so.0">, #<Executable:0x005630ca71e890 @path="//usr/lib64/libgthread-2.0.so.0.4600.2", @name="libgthread-2.0.so.0.4600.2">, #<Executable:0x005630ca71bed8 @path="//usr/lib64/libgtk-3.so", @name="libgtk-3.so">, #<Executable:0x005630ca7188a0 @path="//usr/lib64/libgtk-3.so.0", @name="libgtk-3.so.0">, #<Executable:0x005630ca7162a8 @path="//usr/lib64/libgtk-3.so.0.2000.9", @name="libgtk-3.so.0.2000.9">, #<Executable:0x005630ca7140c0 @path="//usr/lib64/libgtksourceview-2.0.so", @name="libgtksourceview-2.0.so">, #<Executable:0x005630ca712428 @path="//usr/lib64/libgtksourceview-2.0.so.0", @name="libgtksourceview-2.0.so.0">, #<Executable:0x005630ca710ec0 @path="//usr/lib64/libgtksourceview-2.0.so.0.0.0", @name="libgtksourceview-2.0.so.0.0.0">, #<Executable:0x005630ca710178 @path="//usr/lib64/libgtk-x11-2.0.so", @name="libgtk-x11-2.0.so">, #<Executable:0x005630ca70f458 @path="//usr/lib64/libgtk-x11-2.0.so.0", @name="libgtk-x11-2.0.so.0">, #<Executable:0x005630ca70e670 @path="//usr/lib64/libgtk-x11-2.0.so.0.2400.30", @name="libgtk-x11-2.0.so.0.2400.30">, #<Executable:0x005630ca70d540 @path="//usr/lib64/libgudev-1.0.so", @name="libgudev-1.0.so">, #<Executable:0x005630ca70c6e0 @path="//usr/lib64/libgudev-1.0.so.0", @name="libgudev-1.0.so.0">, #<Executable:0x005630ca70bad8 @path="//usr/lib64/libgudev-1.0.so.0.2.0", @name="libgudev-1.0.so.0.2.0">, #<Entry:0x005630ca70aca0 @path="//usr/lib64/libguile.la", @name="libguile.la">, #<Entry:0x005630ca709f08 @path="//usr/lib64/libguilereadline-v-17.la", @name="libguilereadline-v-17.la">, #<Executable:0x005630ca709440 @path="//usr/lib64/libguilereadline-v-17.so", @name="libguilereadline-v-17.so">, #<Executable:0x005630ca708950 @path="//usr/lib64/libguilereadline-v-17.so.17", @name="libguilereadline-v-17.so.17">, #<Executable:0x005630ca707af0 @path="//usr/lib64/libguilereadline-v-17.so.17.0.3", @name="libguilereadline-v-17.so.17.0.3">, #<Executable:0x005630ca706df8 @path="//usr/lib64/libguile.so", @name="libguile.so">, #<Executable:0x005630ca705f98 @path="//usr/lib64/libguile.so.17", @name="libguile.so.17">, #<Executable:0x005630ca705188 @path="//usr/lib64/libguile.so.17.4.0", @name="libguile.so.17.4.0">, #<Entry:0x005630ca7044b8 @path="//usr/lib64/libguile-srfi-srfi-13-14-v-3.la", @name="libguile-srfi-srfi-13-14-v-3.la">, #<Executable:0x005630ca7038d8 @path="//usr/lib64/libguile-srfi-srfi-13-14-v-3.so", @name="libguile-srfi-srfi-13-14-v-3.so">, #<Executable:0x005630ca702af0 @path="//usr/lib64/libguile-srfi-srfi-13-14-v-3.so.3", @name="libguile-srfi-srfi-13-14-v-3.so.3">, #<Executable:0x005630ca701ee8 @path="//usr/lib64/libguile-srfi-srfi-13-14-v-3.so.3.0.1", @name="libguile-srfi-srfi-13-14-v-3.so.3.0.1">, #<Entry:0x005630ca701308 @path="//usr/lib64/libguile-srfi-srfi-1-v-3.la", @name="libguile-srfi-srfi-1-v-3.la">, #<Executable:0x005630ca700728 @path="//usr/lib64/libguile-srfi-srfi-1-v-3.so", @name="libguile-srfi-srfi-1-v-3.so">, #<Executable:0x005630ca6ffaf8 @path="//usr/lib64/libguile-srfi-srfi-1-v-3.so.3", @name="libguile-srfi-srfi-1-v-3.so.3">, #<Executable:0x005630ca6fed38 @path="//usr/lib64/libguile-srfi-srfi-1-v-3.so.3.0.2", @name="libguile-srfi-srfi-1-v-3.so.3.0.2">, #<Entry:0x005630ca6fdff0 @path="//usr/lib64/libguile-srfi-srfi-4-v-3.la", @name="libguile-srfi-srfi-4-v-3.la">, #<Executable:0x005630ca6fd258 @path="//usr/lib64/libguile-srfi-srfi-4-v-3.so", @name="libguile-srfi-srfi-4-v-3.so">, #<Executable:0x005630ca6fc678 @path="//usr/lib64/libguile-srfi-srfi-4-v-3.so.3", @name="libguile-srfi-srfi-4-v-3.so.3">, #<Executable:0x005630ca6fbac0 @path="//usr/lib64/libguile-srfi-srfi-4-v-3.so.3.0.1", @name="libguile-srfi-srfi-4-v-3.so.3.0.1">, #<Entry:0x005630ca6faf08 @path="//usr/lib64/libguile-srfi-srfi-60-v-2.la", @name="libguile-srfi-srfi-60-v-2.la">, #<Executable:0x005630ca6fa260 @path="//usr/lib64/libguile-srfi-srfi-60-v-2.so", @name="libguile-srfi-srfi-60-v-2.so">, #<Executable:0x005630ca6f9360 @path="//usr/lib64/libguile-srfi-srfi-60-v-2.so.2", @name="libguile-srfi-srfi-60-v-2.so.2">, #<Executable:0x005630ca6f8690 @path="//usr/lib64/libguile-srfi-srfi-60-v-2.so.2.0.2", @name="libguile-srfi-srfi-60-v-2.so.2.0.2">, #<Executable:0x005630ca6f7b00 @path="//usr/lib64/libgusb.so", @name="libgusb.so">, #<Executable:0x005630ca6f6e58 @path="//usr/lib64/libgusb.so.2", @name="libgusb.so.2">, #<Executable:0x005630ca6f6278 @path="//usr/lib64/libgusb.so.2.0.10", @name="libgusb.so.2.0.10">, #<Executable:0x005630ca6f54b8 @path="//usr/lib64/libHalf.so", @name="libHalf.so">, #<Executable:0x005630ca6f40b8 @path="//usr/lib64/libHalf.so.11", @name="libHalf.so.11">, #<Executable:0x005630caa76ce0 @path="//usr/lib64/libHalf.so.11.0.0", @name="libHalf.so.11.0.0">, #<Executable:0x005630caa756b0 @path="//usr/lib64/libharfbuzz-icu.so", @name="libharfbuzz-icu.so">, #<Executable:0x005630caa66d40 @path="//usr/lib64/libharfbuzz-icu.so.0", @name="libharfbuzz-icu.so.0">, #<Executable:0x005630caa661d8 @path="//usr/lib64/libharfbuzz-icu.so.0.10200.7", @name="libharfbuzz-icu.so.0.10200.7">, #<Executable:0x005630caa65058 @path="//usr/lib64/libharfbuzz.so", @name="libharfbuzz.so">, #<Executable:0x005630caa644f0 @path="//usr/lib64/libharfbuzz.so.0", @name="libharfbuzz.so.0">, #<Executable:0x005630caa4f2d0 @path="//usr/lib64/libharfbuzz.so.0.10200.7", @name="libharfbuzz.so.0.10200.7">, #<Executable:0x005630caa4e6c8 @path="//usr/lib64/libhfs.so", @name="libhfs.so">, #<Executable:0x005630caa4d5c0 @path="//usr/lib64/libhfs.so.1.0", @name="libhfs.so.1.0">, #<Executable:0x005630caa3fa38 @path="//usr/lib64/libhistory.so", @name="libhistory.so">, #<Executable:0x005630caa3ebb0 @path="//usr/lib64/libhogweed.so", @name="libhogweed.so">, #<Executable:0x005630caa3c0e0 @path="//usr/lib64/libhogweed.so.4", @name="libhogweed.so.4">, #<Executable:0x005630caa274b0 @path="//usr/lib64/libhogweed.so.4.2", @name="libhogweed.so.4.2">, #<Executable:0x005630caa26420 @path="//usr/lib64/libhunspell-1.3.so", @name="libhunspell-1.3.so">, #<Executable:0x005630caa25638 @path="//usr/lib64/libhunspell-1.3.so.0", @name="libhunspell-1.3.so.0">, #<Executable:0x005630caa24918 @path="//usr/lib64/libhunspell-1.3.so.0.0.0", @name="libhunspell-1.3.so.0.0.0">, #<Executable:0x005630caa13b40 @path="//usr/lib64/libhunspell.so", @name="libhunspell.so">, #<Executable:0x005630caa12150 @path="//usr/lib64/libhyphen.so", @name="libhyphen.so">, #<Executable:0x005630caa11390 @path="//usr/lib64/libhyphen.so.0", @name="libhyphen.so.0">, #<Executable:0x005630caa10670 @path="//usr/lib64/libhyphen.so.0.3.0", @name="libhyphen.so.0.3.0">, #<Entry:0x005630caa03948 @path="//usr/lib64/libi2pd.a", @name="libi2pd.a">, #<Entry:0x005630caa02b10 @path="//usr/lib64/libiberty.a", @name="libiberty.a">, #<Executable:0x005630caa01c88 @path="//usr/lib64/libical.so", @name="libical.so">, #<Executable:0x005630caa00dd8 @path="//usr/lib64/libical.so.1", @name="libical.so.1">, #<Executable:0x005630caa00090 @path="//usr/lib64/libical.so.1.0.1", @name="libical.so.1.0.1">, #<Executable:0x005630ca9f2738 @path="//usr/lib64/libicalss.so", @name="libicalss.so">, #<Executable:0x005630ca9f0b68 @path="//usr/lib64/libicalss.so.1", @name="libicalss.so.1">, #<Executable:0x005630ca9eb2d0 @path="//usr/lib64/libicalss.so.1.0.1", @name="libicalss.so.1.0.1">, #<Executable:0x005630ca9ea3d0 @path="//usr/lib64/libicalvcal.so", @name="libicalvcal.so">, #<Executable:0x005630ca9e9638 @path="//usr/lib64/libicalvcal.so.1", @name="libicalvcal.so.1">, #<Executable:0x005630ca9e86e8 @path="//usr/lib64/libicalvcal.so.1.0.1", @name="libicalvcal.so.1.0.1">, #<Executable:0x005630ca9e3ad0 @path="//usr/lib64/libICE.so", @name="libICE.so">, #<Executable:0x005630ca9e2f90 @path="//usr/lib64/libICE.so.6", @name="libICE.so.6">, #<Executable:0x005630ca9e2428 @path="//usr/lib64/libICE.so.6.3.0", @name="libICE.so.6.3.0">, #<Executable:0x005630ca9e17a8 @path="//usr/lib64/libicudata.so", @name="libicudata.so">, #<Executable:0x005630ca9e0bc8 @path="//usr/lib64/libicudata.so.57", @name="libicudata.so.57">, #<Executable:0x005630ca9e1fa0 @path="//usr/lib64/libicudata.so.57.1", @name="libicudata.so.57.1">, #<Executable:0x005630ca9a9920 @path="//usr/lib64/libicui18n.so", @name="libicui18n.so">, #<Executable:0x005630ca9a84d0 @path="//usr/lib64/libicui18n.so.57", @name="libicui18n.so.57">, #<Executable:0x005630ca963510 @path="//usr/lib64/libicui18n.so.57.1", @name="libicui18n.so.57.1">, #<Executable:0x005630ca962368 @path="//usr/lib64/libicuio.so", @name="libicuio.so">, #<Executable:0x005630ca961198 @path="//usr/lib64/libicuio.so.57", @name="libicuio.so.57">, #<Executable:0x005630ca947bd0 @path="//usr/lib64/libicuio.so.57.1", @name="libicuio.so.57.1">, #<Executable:0x005630ca946de8 @path="//usr/lib64/libicule.so", @name="libicule.so">, #<Executable:0x005630ca945650 @path="//usr/lib64/libicule.so.57", @name="libicule.so.57">, #<Executable:0x005630ca944b88 @path="//usr/lib64/libicule.so.57.1", @name="libicule.so.57.1">, #<Executable:0x005630ca9440c0 @path="//usr/lib64/libiculx.so", @name="libiculx.so">, #<Executable:0x005630ca93f598 @path="//usr/lib64/libiculx.so.57", @name="libiculx.so.57">, #<Executable:0x005630ca93ead0 @path="//usr/lib64/libiculx.so.57.1", @name="libiculx.so.57.1">, #<Executable:0x005630ca93df40 @path="//usr/lib64/libicutest.so", @name="libicutest.so">, #<Executable:0x005630ca93d4c8 @path="//usr/lib64/libicutest.so.57", @name="libicutest.so.57">, #<Executable:0x005630ca93c960 @path="//usr/lib64/libicutest.so.57.1", @name="libicutest.so.57.1">, #<Executable:0x005630ca937e88 @path="//usr/lib64/libicutu.so", @name="libicutu.so">, #<Executable:0x005630ca9372f8 @path="//usr/lib64/libicutu.so.57", @name="libicutu.so.57">, #<Executable:0x005630ca9366a0 @path="//usr/lib64/libicutu.so.57.1", @name="libicutu.so.57.1">, #<Executable:0x005630ca935b38 @path="//usr/lib64/libicuuc.so", @name="libicuuc.so">, #<Executable:0x005630ca934ff8 @path="//usr/lib64/libicuuc.so.57", @name="libicuuc.so.57">, #<Executable:0x005630ca9343c8 @path="//usr/lib64/libicuuc.so.57.1", @name="libicuuc.so.57.1">, #<Executable:0x005630ca92fa80 @path="//usr/lib64/libidn.so", @name="libidn.so">, #<Executable:0x005630ca92ed60 @path="//usr/lib64/libidn.so.11", @name="libidn.so.11">, #<Executable:0x005630ca92e158 @path="//usr/lib64/libidn.so.11.6.13", @name="libidn.so.11.6.13">, #<Entry:0x005630ca92d618 @path="//usr/lib64/libieee.a", @name="libieee.a">, #<Executable:0x005630ca92cba0 @path="//usr/lib64/libIex-2_1.so.11", @name="libIex-2_1.so.11">, #<Executable:0x005630ca92c128 @path="//usr/lib64/libIex-2_1.so.11.0.0", @name="libIex-2_1.so.11.0.0">, #<Executable:0x005630ca8b3688 @path="//usr/lib64/libIexMath-2_1.so.11", @name="libIexMath-2_1.so.11">, #<Executable:0x005630ca8b2a30 @path="//usr/lib64/libIexMath-2_1.so.11.0.0", @name="libIexMath-2_1.so.11.0.0">, #<Executable:0x005630ca8b1f18 @path="//usr/lib64/libIexMath.so", @name="libIexMath.so">, #<Executable:0x005630ca8b0fa0 @path="//usr/lib64/libIex.so", @name="libIex.so">, #<Executable:0x005630ca8b04b0 @path="//usr/lib64/libijs-0.35.so", @name="libijs-0.35.so">, #<Executable:0x005630ca91eb18 @path="//usr/lib64/libijs.so", @name="libijs.so">, #<Executable:0x005630ca91c6b0 @path="//usr/lib64/libIlmImf-Imf_2_1.so.21", @name="libIlmImf-Imf_2_1.so.21">, #<Executable:0x005630ca913b78 @path="//usr/lib64/libIlmImf-Imf_2_1.so.21.0.0", @name="libIlmImf-Imf_2_1.so.21.0.0">, #<Executable:0x005630ca912f70 @path="//usr/lib64/libIlmImf.so", @name="libIlmImf.so">, #<Executable:0x005630ca912368 @path="//usr/lib64/libIlmThread-2_1.so.11", @name="libIlmThread-2_1.so.11">, #<Executable:0x005630ca911698 @path="//usr/lib64/libIlmThread-2_1.so.11.0.0", @name="libIlmThread-2_1.so.11.0.0">, #<Executable:0x005630ca910680 @path="//usr/lib64/libIlmThread.so", @name="libIlmThread.so">, #<Executable:0x005630ca907b20 @path="//usr/lib64/libImath-2_1.so.11", @name="libImath-2_1.so.11">, #<Executable:0x005630ca906c20 @path="//usr/lib64/libImath-2_1.so.11.0.0", @name="libImath-2_1.so.11.0.0">, #<Executable:0x005630ca905780 @path="//usr/lib64/libImath.so", @name="libImath.so">, #<Executable:0x005630ca904448 @path="//usr/lib64/libImlib2.so", @name="libImlib2.so">, #<Executable:0x005630ca8ff308 @path="//usr/lib64/libImlib2.so.1", @name="libImlib2.so.1">, #<Executable:0x005630ca8fe548 @path="//usr/lib64/libImlib2.so.1.4.9", @name="libImlib2.so.1.4.9">, #<Executable:0x005630ca8fd800 @path="//usr/lib64/libiniparser.so", @name="libiniparser.so">, #<Executable:0x005630ca8fc608 @path="//usr/lib64/libiniparser.so.0", @name="libiniparser.so.0">, #<Executable:0x005630ca8f7860 @path="//usr/lib64/libiniparser.so.0.0.0", @name="libiniparser.so.0.0.0">, #<Executable:0x005630ca8f6a50 @path="//usr/lib64/libip4tc.so", @name="libip4tc.so">, #<Executable:0x005630ca8f5600 @path="//usr/lib64/libip6tc.so", @name="libip6tc.so">, #<Executable:0x005630ca8f49a8 @path="//usr/lib64/libiptc.so", @name="libiptc.so">, #<Executable:0x005630ca8bfc58 @path="//usr/lib64/libjavascriptcoregtk-1.0.so", @name="libjavascriptcoregtk-1.0.so">, #<Executable:0x005630ca8beee8 @path="//usr/lib64/libjavascriptcoregtk-1.0.so.0", @name="libjavascriptcoregtk-1.0.so.0">, #<Executable:0x005630ca8be5d8 @path="//usr/lib64/libjavascriptcoregtk-1.0.so.0.16.19", @name="libjavascriptcoregtk-1.0.so.0.16.19">, #<Executable:0x005630ca8ab3e8 @path="//usr/lib64/libjavascriptcoregtk-4.0.so", @name="libjavascriptcoregtk-4.0.so">, #<Executable:0x005630ca8aa2b8 @path="//usr/lib64/libjavascriptcoregtk-4.0.so.18", @name="libjavascriptcoregtk-4.0.so.18">, #<Executable:0x005630ca8a9110 @path="//usr/lib64/libjavascriptcoregtk-4.0.so.18.2.17", @name="libjavascriptcoregtk-4.0.so.18.2.17">, #<Executable:0x005630ca8a85a8 @path="//usr/lib64/libjbig2dec.so", @name="libjbig2dec.so">, #<Executable:0x005630ca88b1b0 @path="//usr/lib64/libjbig2dec.so.0", @name="libjbig2dec.so.0">, #<Executable:0x005630ca889f40 @path="//usr/lib64/libjbig2dec.so.0.0.0", @name="libjbig2dec.so.0.0.0">, #<Executable:0x005630ca888cf8 @path="//usr/lib64/libjbig85.so", @name="libjbig85.so">, #<Executable:0x005630ca88b818 @path="//usr/lib64/libjbig.so", @name="libjbig.so">, #<Executable:0x005630ca74ca60 @path="//usr/lib64/libjpeg.so", @name="libjpeg.so">, #<Executable:0x005630ca745cd8 @path="//usr/lib64/libjpeg.so.62", @name="libjpeg.so.62">, #<Executable:0x005630ca73eed8 @path="//usr/lib64/libjpeg.so.62.2.0", @name="libjpeg.so.62.2.0">, #<Executable:0x005630ca737b38 @path="//usr/lib64/libjson-c.so", @name="libjson-c.so">, #<Executable:0x005630ca735810 @path="//usr/lib64/libjson-c.so.2", @name="libjson-c.so.2">, #<Executable:0x005630ca72e150 @path="//usr/lib64/libjson-c.so.2.0.1", @name="libjson-c.so.2.0.1">, #<Entry:0x005630ca723958 @path="//usr/lib64/libkeyutils.a", @name="libkeyutils.a">, #<Executable:0x005630ca721c98 @path="//usr/lib64/libkeyutils.so", @name="libkeyutils.so">, #<Executable:0x005630ca71a290 @path="//usr/lib64/libkmod.so", @name="libkmod.so">, #<Entry:0x005630ca713170 @path="//usr/lib64/libksba.la", @name="libksba.la">, #<Executable:0x005630ca7114b0 @path="//usr/lib64/libksba.so", @name="libksba.so">, #<Executable:0x005630ca7104e8 @path="//usr/lib64/libksba.so.8", @name="libksba.so.8">, #<Executable:0x005630ca70b600 @path="//usr/lib64/libksba.so.8.11.5", @name="libksba.so.8.11.5">, #<Executable:0x005630ca70a5e8 @path="//usr/lib64/liblcms2.so", @name="liblcms2.so">, #<Executable:0x005630ca709a80 @path="//usr/lib64/liblcms2.so.2", @name="liblcms2.so.2">, #<Executable:0x005630ca708ea0 @path="//usr/lib64/liblcms2.so.2.0.6", @name="liblcms2.so.2.0.6">, #<Executable:0x005630ca70aef8 @path="//usr/lib64/liblinear.so", @name="liblinear.so">, #<Executable:0x005630ca7031f8 @path="//usr/lib64/liblinear.so.3", @name="liblinear.so.3">, #<Entry:0x005630ca7022f8 @path="//usr/lib64/liblinphone.la", @name="liblinphone.la">, #<Executable:0x005630ca7016c8 @path="//usr/lib64/liblinphone.so", @name="liblinphone.so">, #<Executable:0x005630ca700930 @path="//usr/lib64/liblinphone.so.5", @name="liblinphone.so.5">, #<Executable:0x005630ca6fbcc8 @path="//usr/lib64/liblinphone.so.5.0.0", @name="liblinphone.so.5.0.0">, #<Executable:0x005630ca6faf58 @path="//usr/lib64/libLLVMAnalysis.so", @name="libLLVMAnalysis.so">, #<Executable:0x005630ca6fa148 @path="//usr/lib64/libLLVMAnalysis.so.3.7", @name="libLLVMAnalysis.so.3.7">, #<Executable:0x005630ca6f91a8 @path="//usr/lib64/libLLVMAnalysis.so.3.7.1", @name="libLLVMAnalysis.so.3.7.1">, #<Executable:0x005630ca6f8348 @path="//usr/lib64/libLLVMAsmParser.so", @name="libLLVMAsmParser.so">, #<Executable:0x005630ca6ff698 @path="//usr/lib64/libLLVMAsmParser.so.3.7", @name="libLLVMAsmParser.so.3.7">, #<Executable:0x005630ca6fe838 @path="//usr/lib64/libLLVMAsmParser.so.3.7.1", @name="libLLVMAsmParser.so.3.7.1">, #<Executable:0x005630ca6fd910 @path="//usr/lib64/libLLVMAsmPrinter.so", @name="libLLVMAsmPrinter.so">, #<Executable:0x005630ca6fccb8 @path="//usr/lib64/libLLVMAsmPrinter.so.3.7", @name="libLLVMAsmPrinter.so.3.7">, #<Executable:0x005630ca6ffda0 @path="//usr/lib64/libLLVMAsmPrinter.so.3.7.1", @name="libLLVMAsmPrinter.so.3.7.1">, #<Executable:0x005630ca6f7240 @path="//usr/lib64/libLLVMBitReader.so", @name="libLLVMBitReader.so">, #<Executable:0x005630ca6f6548 @path="//usr/lib64/libLLVMBitReader.so.3.7", @name="libLLVMBitReader.so.3.7">, #<Executable:0x005630ca6f5710 @path="//usr/lib64/libLLVMBitReader.so.3.7.1", @name="libLLVMBitReader.so.3.7.1">, #<Executable:0x005630ca6f4748 @path="//usr/lib64/libLLVMBitWriter.so", @name="libLLVMBitWriter.so">, #<Executable:0x005630ca70fbd8 @path="//usr/lib64/libLLVMBitWriter.so.3.7", @name="libLLVMBitWriter.so.3.7">, #<Executable:0x005630ca70ecb0 @path="//usr/lib64/libLLVMBitWriter.so.3.7.1", @name="libLLVMBitWriter.so.3.7.1">, #<Executable:0x005630ca70d9f0 @path="//usr/lib64/libLLVMBPFAsmPrinter.so", @name="libLLVMBPFAsmPrinter.so">, #<Executable:0x005630ca70caa0 @path="//usr/lib64/libLLVMBPFAsmPrinter.so.3.7", @name="libLLVMBPFAsmPrinter.so.3.7">, #<Executable:0x005630ca707d70 @path="//usr/lib64/libLLVMBPFAsmPrinter.so.3.7.1", @name="libLLVMBPFAsmPrinter.so.3.7.1">, #<Executable:0x005630ca707028 @path="//usr/lib64/libLLVMBPFCodeGen.so", @name="libLLVMBPFCodeGen.so">, #<Executable:0x005630ca706100 @path="//usr/lib64/libLLVMBPFCodeGen.so.3.7", @name="libLLVMBPFCodeGen.so.3.7">, #<Executable:0x005630ca705138 @path="//usr/lib64/libLLVMBPFCodeGen.so.3.7.1", @name="libLLVMBPFCodeGen.so.3.7.1">, #<Executable:0x005630ca704350 @path="//usr/lib64/libLLVMBPFDesc.so", @name="libLLVMBPFDesc.so">, #<Executable:0x005630ca74a3c8 @path="//usr/lib64/libLLVMBPFDesc.so.3.7", @name="libLLVMBPFDesc.so.3.7">, #<Executable:0x005630ca740f08 @path="//usr/lib64/libLLVMBPFDesc.so.3.7.1", @name="libLLVMBPFDesc.so.3.7.1">, #<Executable:0x005630ca733100 @path="//usr/lib64/libLLVMBPFInfo.so", @name="libLLVMBPFInfo.so">, #<Executable:0x005630ca726b80 @path="//usr/lib64/libLLVMBPFInfo.so.3.7", @name="libLLVMBPFInfo.so.3.7">, #<Executable:0x005630ca71f1a0 @path="//usr/lib64/libLLVMBPFInfo.so.3.7.1", @name="libLLVMBPFInfo.so.3.7.1">, #<Executable:0x005630ca71cbf8 @path="//usr/lib64/libLLVMCodeGen.so", @name="libLLVMCodeGen.so">, #<Executable:0x005630ca7166b8 @path="//usr/lib64/libLLVMCodeGen.so.3.7", @name="libLLVMCodeGen.so.3.7">, #<Executable:0x005630ca714520 @path="//usr/lib64/libLLVMCodeGen.so.3.7.1", @name="libLLVMCodeGen.so.3.7.1">, #<Executable:0x005630ca8bb478 @path="//usr/lib64/libLLVMCore.so", @name="libLLVMCore.so">, #<Executable:0x005630ca8ba898 @path="//usr/lib64/libLLVMCore.so.3.7", @name="libLLVMCore.so.3.7">, #<Executable:0x005630ca8b9ba0 @path="//usr/lib64/libLLVMCore.so.3.7.1", @name="libLLVMCore.so.3.7.1">, #<Executable:0x005630ca8b8f48 @path="//usr/lib64/libLLVMCppBackendCodeGen.so", @name="libLLVMCppBackendCodeGen.so">, #<Executable:0x005630ca8b8278 @path="//usr/lib64/libLLVMCppBackendCodeGen.so.3.7", @name="libLLVMCppBackendCodeGen.so.3.7">, #<Executable:0x005630ca8a76d0 @path="//usr/lib64/libLLVMCppBackendCodeGen.so.3.7.1", @name="libLLVMCppBackendCodeGen.so.3.7.1">, #<Executable:0x005630ca8a6b18 @path="//usr/lib64/libLLVMCppBackendInfo.so", @name="libLLVMCppBackendInfo.so">, #<Executable:0x005630ca8a6000 @path="//usr/lib64/libLLVMCppBackendInfo.so.3.7", @name="libLLVMCppBackendInfo.so.3.7">, #<Executable:0x005630ca8a5358 @path="//usr/lib64/libLLVMCppBackendInfo.so.3.7.1", @name="libLLVMCppBackendInfo.so.3.7.1">, #<Executable:0x005630ca8a48b8 @path="//usr/lib64/libLLVMDebugInfoDWARF.so", @name="libLLVMDebugInfoDWARF.so">, #<Executable:0x005630ca752f00 @path="//usr/lib64/libLLVMDebugInfoDWARF.so.3.7", @name="libLLVMDebugInfoDWARF.so.3.7">, #<Executable:0x005630ca90b9f0 @path="//usr/lib64/libLLVMDebugInfoDWARF.so.3.7.1", @name="libLLVMDebugInfoDWARF.so.3.7.1">, #<Executable:0x005630ca90ad98 @path="//usr/lib64/libLLVMDebugInfoPDB.so", @name="libLLVMDebugInfoPDB.so">, #<Executable:0x005630ca90a1e0 @path="//usr/lib64/libLLVMDebugInfoPDB.so.3.7", @name="libLLVMDebugInfoPDB.so.3.7">, #<Executable:0x005630ca909268 @path="//usr/lib64/libLLVMDebugInfoPDB.so.3.7.1", @name="libLLVMDebugInfoPDB.so.3.7.1">, #<Executable:0x005630ca903890 @path="//usr/lib64/libLLVMExecutionEngine.so", @name="libLLVMExecutionEngine.so">, #<Executable:0x005630ca902530 @path="//usr/lib64/libLLVMExecutionEngine.so.3.7", @name="libLLVMExecutionEngine.so.3.7">, #<Executable:0x005630ca8fbd20 @path="//usr/lib64/libLLVMExecutionEngine.so.3.7.1", @name="libLLVMExecutionEngine.so.3.7.1">, #<Executable:0x005630ca8fad58 @path="//usr/lib64/libLLVMInstCombine.so", @name="libLLVMInstCombine.so">, #<Executable:0x005630ca8f99f8 @path="//usr/lib64/libLLVMInstCombine.so.3.7", @name="libLLVMInstCombine.so.3.7">, #<Executable:0x005630ca8f8d28 @path="//usr/lib64/libLLVMInstCombine.so.3.7.1", @name="libLLVMInstCombine.so.3.7.1">, #<Executable:0x005630ca8dbca0 @path="//usr/lib64/libLLVMInstrumentation.so", @name="libLLVMInstrumentation.so">, #<Executable:0x005630ca8af4c0 @path="//usr/lib64/libLLVMInstrumentation.so.3.7", @name="libLLVMInstrumentation.so.3.7">, #<Executable:0x005630ca8ae7a0 @path="//usr/lib64/libLLVMInstrumentation.so.3.7.1", @name="libLLVMInstrumentation.so.3.7.1">, #<Executable:0x005630ca8adaf8 @path="//usr/lib64/libLLVMInterpreter.so", @name="libLLVMInterpreter.so">, #<Executable:0x005630ca8acfe0 @path="//usr/lib64/libLLVMInterpreter.so.3.7", @name="libLLVMInterpreter.so.3.7">, #<Executable:0x005630ca8ac4a0 @path="//usr/lib64/libLLVMInterpreter.so.3.7.1", @name="libLLVMInterpreter.so.3.7.1">, #<Executable:0x005630ca91b8a0 @path="//usr/lib64/libLLVMipa.so", @name="libLLVMipa.so">, #<Executable:0x005630ca91abd0 @path="//usr/lib64/libLLVMipa.so.3.7", @name="libLLVMipa.so.3.7">, #<Executable:0x005630ca919d48 @path="//usr/lib64/libLLVMipa.so.3.7.1", @name="libLLVMipa.so.3.7.1">, #<Executable:0x005630ca9190f0 @path="//usr/lib64/libLLVMipo.so", @name="libLLVMipo.so">, #<Executable:0x005630ca918420 @path="//usr/lib64/libLLVMipo.so.3.7", @name="libLLVMipo.so.3.7">, #<Executable:0x005630ca933450 @path="//usr/lib64/libLLVMipo.so.3.7.1", @name="libLLVMipo.so.3.7.1">, #<Executable:0x005630ca9328c0 @path="//usr/lib64/libLLVMIRReader.so", @name="libLLVMIRReader.so">, #<Executable:0x005630ca931bf0 @path="//usr/lib64/libLLVMIRReader.so.3.7", @name="libLLVMIRReader.so.3.7">, #<Executable:0x005630ca931060 @path="//usr/lib64/libLLVMIRReader.so.3.7.1", @name="libLLVMIRReader.so.3.7.1">, #<Executable:0x005630ca930610 @path="//usr/lib64/libLLVMLibDriver.so", @name="libLLVMLibDriver.so">, #<Executable:0x005630ca8b7968 @path="//usr/lib64/libLLVMLibDriver.so.3.7", @name="libLLVMLibDriver.so.3.7">, #<Executable:0x005630ca8b6e28 @path="//usr/lib64/libLLVMLibDriver.so.3.7.1", @name="libLLVMLibDriver.so.3.7.1">, #<Executable:0x005630ca8b61f8 @path="//usr/lib64/libLLVMLineEditor.so", @name="libLLVMLineEditor.so">, #<Executable:0x005630ca8b55a0 @path="//usr/lib64/libLLVMLineEditor.so.3.7", @name="libLLVMLineEditor.so.3.7">, #<Executable:0x005630ca8b4ad8 @path="//usr/lib64/libLLVMLineEditor.so.3.7.1", @name="libLLVMLineEditor.so.3.7.1">, #<Executable:0x005630ca8b46c8 @path="//usr/lib64/libLLVMLinker.so", @name="libLLVMLinker.so">, #<Executable:0x005630ca943670 @path="//usr/lib64/libLLVMLinker.so.3.7", @name="libLLVMLinker.so.3.7">, #<Executable:0x005630ca942bf8 @path="//usr/lib64/libLLVMLinker.so.3.7.1", @name="libLLVMLinker.so.3.7.1">, #<Executable:0x005630ca9420b8 @path="//usr/lib64/libLLVMLTO.so", @name="libLLVMLTO.so">, #<Executable:0x005630ca940f10 @path="//usr/lib64/libLLVMLTO.so.3.7", @name="libLLVMLTO.so.3.7">, #<Executable:0x005630ca9408d0 @path="//usr/lib64/libLLVMLTO.so.3.7.1", @name="libLLVMLTO.so.3.7.1">, #<Executable:0x005630ca93ae08 @path="//usr/lib64/libLLVMMCDisassembler.so", @name="libLLVMMCDisassembler.so">, #<Executable:0x005630ca939a30 @path="//usr/lib64/libLLVMMCDisassembler.so.3.7", @name="libLLVMMCDisassembler.so.3.7">, #<Executable:0x005630ca938c70 @path="//usr/lib64/libLLVMMCDisassembler.so.3.7.1", @name="libLLVMMCDisassembler.so.3.7.1">, #<Executable:0x005630ca9380b8 @path="//usr/lib64/libLLVMMCJIT.so", @name="libLLVMMCJIT.so">, #<Executable:0x005630ca9ce748 @path="//usr/lib64/libLLVMMCJIT.so.3.7", @name="libLLVMMCJIT.so.3.7">, #<Executable:0x005630ca9cdb90 @path="//usr/lib64/libLLVMMCJIT.so.3.7.1", @name="libLLVMMCJIT.so.3.7.1">, #<Executable:0x005630ca9ccf10 @path="//usr/lib64/libLLVMMCParser.so", @name="libLLVMMCParser.so">, #<Executable:0x005630ca9cc010 @path="//usr/lib64/libLLVMMCParser.so.3.7", @name="libLLVMMCParser.so.3.7">, #<Executable:0x005630ca986fb0 @path="//usr/lib64/libLLVMMCParser.so.3.7.1", @name="libLLVMMCParser.so.3.7.1">, #<Executable:0x005630ca985de0 @path="//usr/lib64/libLLVMMC.so", @name="libLLVMMC.so">, #<Executable:0x005630ca984b48 @path="//usr/lib64/libLLVMMC.so.3.7", @name="libLLVMMC.so.3.7">, #<Executable:0x005630ca94b258 @path="//usr/lib64/libLLVMMC.so.3.7.1", @name="libLLVMMC.so.3.7.1">, #<Executable:0x005630ca949e30 @path="//usr/lib64/libLLVMMIRParser.so", @name="libLLVMMIRParser.so">, #<Executable:0x005630ca948d50 @path="//usr/lib64/libLLVMMIRParser.so.3.7", @name="libLLVMMIRParser.so.3.7">, #<Executable:0x005630ca9fbb80 @path="//usr/lib64/libLLVMMIRParser.so.3.7.1", @name="libLLVMMIRParser.so.3.7.1">, #<Executable:0x005630ca9fae88 @path="//usr/lib64/libLLVMObjCARCOpts.so", @name="libLLVMObjCARCOpts.so">, #<Executable:0x005630ca9f9ee8 @path="//usr/lib64/libLLVMObjCARCOpts.so.3.7", @name="libLLVMObjCARCOpts.so.3.7">, #<Executable:0x005630ca9f89a8 @path="//usr/lib64/libLLVMObjCARCOpts.so.3.7.1", @name="libLLVMObjCARCOpts.so.3.7.1">, #<Executable:0x005630ca9ef768 @path="//usr/lib64/libLLVMObject.so", @name="libLLVMObject.so">, #<Executable:0x005630ca9ed0d0 @path="//usr/lib64/libLLVMObject.so.3.7", @name="libLLVMObject.so.3.7">, #<Executable:0x005630ca9ec248 @path="//usr/lib64/libLLVMObject.so.3.7.1", @name="libLLVMObject.so.3.7.1">, #<Executable:0x005630ca9e73d8 @path="//usr/lib64/libLLVMOption.so", @name="libLLVMOption.so">, #<Executable:0x005630ca9e60c8 @path="//usr/lib64/libLLVMOption.so.3.7", @name="libLLVMOption.so.3.7">, #<Executable:0x005630ca9e4ae8 @path="//usr/lib64/libLLVMOption.so.3.7.1", @name="libLLVMOption.so.3.7.1">, #<Executable:0x005630ca9e7ef0 @path="//usr/lib64/libLLVMOrcJIT.so", @name="libLLVMOrcJIT.so">, #<Executable:0x005630caa23270 @path="//usr/lib64/libLLVMOrcJIT.so.3.7", @name="libLLVMOrcJIT.so.3.7">, #<Executable:0x005630caa22500 @path="//usr/lib64/libLLVMOrcJIT.so.3.7.1", @name="libLLVMOrcJIT.so.3.7.1">, #<Executable:0x005630caa21790 @path="//usr/lib64/libLLVMPasses.so", @name="libLLVMPasses.so">, #<Executable:0x005630caa20a70 @path="//usr/lib64/libLLVMPasses.so.3.7", @name="libLLVMPasses.so.3.7">, #<Executable:0x005630caa0bcd8 @path="//usr/lib64/libLLVMPasses.so.3.7.1", @name="libLLVMPasses.so.3.7.1">, #<Executable:0x005630caa0af40 @path="//usr/lib64/libLLVMProfileData.so", @name="libLLVMProfileData.so">, #<Executable:0x005630caa0a1a8 @path="//usr/lib64/libLLVMProfileData.so.3.7", @name="libLLVMProfileData.so.3.7">, #<Executable:0x005630caa092a8 @path="//usr/lib64/libLLVMProfileData.so.3.7.1", @name="libLLVMProfileData.so.3.7.1">, #<Executable:0x005630caa08448 @path="//usr/lib64/libLLVMRuntimeDyld.so", @name="libLLVMRuntimeDyld.so">, #<Executable:0x005630caa43728 @path="//usr/lib64/libLLVMRuntimeDyld.so.3.7", @name="libLLVMRuntimeDyld.so.3.7">, #<Executable:0x005630caa42b20 @path="//usr/lib64/libLLVMRuntimeDyld.so.3.7.1", @name="libLLVMRuntimeDyld.so.3.7.1">, #<Executable:0x005630caa41fb8 @path="//usr/lib64/libLLVMScalarOpts.so", @name="libLLVMScalarOpts.so">, #<Executable:0x005630caa413b0 @path="//usr/lib64/libLLVMScalarOpts.so.3.7", @name="libLLVMScalarOpts.so.3.7">, #<Executable:0x005630caa401e0 @path="//usr/lib64/libLLVMScalarOpts.so.3.7.1", @name="libLLVMScalarOpts.so.3.7.1">, #<Executable:0x005630caa2ad40 @path="//usr/lib64/libLLVMSelectionDAG.so", @name="libLLVMSelectionDAG.so">, #<Executable:0x005630caa29198 @path="//usr/lib64/libLLVMSelectionDAG.so.3.7", @name="libLLVMSelectionDAG.so.3.7">, #<Executable:0x005630caa28478 @path="//usr/lib64/libLLVMSelectionDAG.so.3.7.1", @name="libLLVMSelectionDAG.so.3.7.1">, #<Executable:0x005630caa81668 @path="//usr/lib64/libLLVMSupport.so", @name="libLLVMSupport.so">, #<Executable:0x005630caa814d8 @path="//usr/lib64/libLLVMSupport.so.3.7", @name="libLLVMSupport.so.3.7">, #<Executable:0x005630caa6e900 @path="//usr/lib64/libLLVMSupport.so.3.7.1", @name="libLLVMSupport.so.3.7.1">, #<Executable:0x005630caa6d578 @path="//usr/lib64/libLLVMTableGen.so", @name="libLLVMTableGen.so">, #<Executable:0x005630caa6ca88 @path="//usr/lib64/libLLVMTableGen.so.3.7", @name="libLLVMTableGen.so.3.7">, #<Executable:0x005630caa57ae8 @path="//usr/lib64/libLLVMTableGen.so.3.7.1", @name="libLLVMTableGen.so.3.7.1">, #<Executable:0x005630caa56940 @path="//usr/lib64/libLLVMTarget.so", @name="libLLVMTarget.so">, #<Executable:0x005630caa55360 @path="//usr/lib64/libLLVMTarget.so.3.7", @name="libLLVMTarget.so.3.7">, #<Executable:0x005630caa817f8 @path="//usr/lib64/libLLVMTarget.so.3.7.1", @name="libLLVMTarget.so.3.7.1">, #<Executable:0x005630caa77fa0 @path="//usr/lib64/libLLVMTransformUtils.so", @name="libLLVMTransformUtils.so">, #<Executable:0x005630caa76790 @path="//usr/lib64/libLLVMTransformUtils.so.3.7", @name="libLLVMTransformUtils.so.3.7">, #<Executable:0x005630caa74c38 @path="//usr/lib64/libLLVMTransformUtils.so.3.7.1", @name="libLLVMTransformUtils.so.3.7.1">, #<Executable:0x005630caa6f620 @path="//usr/lib64/libLLVMVectorize.so", @name="libLLVMVectorize.so">, #<Executable:0x005630caa6dc08 @path="//usr/lib64/libLLVMVectorize.so.3.7", @name="libLLVMVectorize.so.3.7">, #<Executable:0x005630caa6cf60 @path="//usr/lib64/libLLVMVectorize.so.3.7.1", @name="libLLVMVectorize.so.3.7.1">, #<Executable:0x005630caa6c2e0 @path="//usr/lib64/libLLVMX86AsmParser.so", @name="libLLVMX86AsmParser.so">, #<Executable:0x005630caa66638 @path="//usr/lib64/libLLVMX86AsmParser.so.3.7", @name="libLLVMX86AsmParser.so.3.7">, #<Executable:0x005630caa653f0 @path="//usr/lib64/libLLVMX86AsmParser.so.3.7.1", @name="libLLVMX86AsmParser.so.3.7.1">, #<Executable:0x005630caa64748 @path="//usr/lib64/libLLVMX86AsmPrinter.so", @name="libLLVMX86AsmPrinter.so">, #<Executable:0x005630caa570c0 @path="//usr/lib64/libLLVMX86AsmPrinter.so.3.7", @name="libLLVMX86AsmPrinter.so.3.7">, #<Executable:0x005630caa563f0 @path="//usr/lib64/libLLVMX86AsmPrinter.so.3.7.1", @name="libLLVMX86AsmPrinter.so.3.7.1">, #<Executable:0x005630caa4f7f8 @path="//usr/lib64/libLLVMX86CodeGen.so", @name="libLLVMX86CodeGen.so">, #<Executable:0x005630caa4e880 @path="//usr/lib64/libLLVMX86CodeGen.so.3.7", @name="libLLVMX86CodeGen.so.3.7">, #<Executable:0x005630caa4d728 @path="//usr/lib64/libLLVMX86CodeGen.so.3.7.1", @name="libLLVMX86CodeGen.so.3.7.1">, #<Executable:0x005630caa43890 @path="//usr/lib64/libLLVMX86Desc.so", @name="libLLVMX86Desc.so">, #<Executable:0x005630caa42af8 @path="//usr/lib64/libLLVMX86Desc.so.3.7", @name="libLLVMX86Desc.so.3.7">, #<Executable:0x005630caa41e50 @path="//usr/lib64/libLLVMX86Desc.so.3.7.1", @name="libLLVMX86Desc.so.3.7.1">, #<Executable:0x005630caa41108 @path="//usr/lib64/libLLVMX86Disassembler.so", @name="libLLVMX86Disassembler.so">, #<Executable:0x005630caa3ff60 @path="//usr/lib64/libLLVMX86Disassembler.so.3.7", @name="libLLVMX86Disassembler.so.3.7">, #<Executable:0x005630caa3f038 @path="//usr/lib64/libLLVMX86Disassembler.so.3.7.1", @name="libLLVMX86Disassembler.so.3.7.1">, #<Executable:0x005630caa3c478 @path="//usr/lib64/libLLVMX86Info.so", @name="libLLVMX86Info.so">, #<Executable:0x005630caa2b010 @path="//usr/lib64/libLLVMX86Info.so.3.7", @name="libLLVMX86Info.so.3.7">, #<Executable:0x005630caa297b0 @path="//usr/lib64/libLLVMX86Info.so.3.7.1", @name="libLLVMX86Info.so.3.7.1">, #<Executable:0x005630caa283d8 @path="//usr/lib64/libLLVMX86Utils.so", @name="libLLVMX86Utils.so">, #<Executable:0x005630caa27690 @path="//usr/lib64/libLLVMX86Utils.so.3.7", @name="libLLVMX86Utils.so.3.7">, #<Executable:0x005630caa26718 @path="//usr/lib64/libLLVMX86Utils.so.3.7.1", @name="libLLVMX86Utils.so.3.7.1">, #<Executable:0x005630caa25610 @path="//usr/lib64/liblockfile.so", @name="liblockfile.so">, #<Executable:0x005630caa247d8 @path="//usr/lib64/liblockfile.so.1", @name="liblockfile.so.1">, #<Executable:0x005630caa23bd0 @path="//usr/lib64/liblockfile.so.1.0", @name="liblockfile.so.1.0">, #<Entry:0x005630caa22d98 @path="//usr/lib64/libltdl.la", @name="libltdl.la">, #<Executable:0x005630caa21ec0 @path="//usr/lib64/libltdl.so", @name="libltdl.so">, #<Executable:0x005630caa210b0 @path="//usr/lib64/libltdl.so.7", @name="libltdl.so.7">, #<Executable:0x005630caa20110 @path="//usr/lib64/libltdl.so.7.3.1", @name="libltdl.so.7.3.1">, #<Executable:0x005630caa124c0 @path="//usr/lib64/libLTO.so", @name="libLTO.so">, #<Executable:0x005630caa11570 @path="//usr/lib64/libLTO.so.3.7", @name="libLTO.so.3.7">, #<Executable:0x005630caa10788 @path="//usr/lib64/libLTO.so.3.7.1", @name="libLTO.so.3.7.1">, #<Entry:0x005630caa0b9b8 @path="//usr/lib64/liblua.a", @name="liblua.a">, #<Entry:0x005630caa0ab30 @path="//usr/lib64/liblua.la", @name="liblua.la">, #<Executable:0x005630caa09c08 @path="//usr/lib64/liblua.so", @name="liblua.so">, #<Executable:0x005630caa08b78 @path="//usr/lib64/liblua.so.5", @name="liblua.so.5">, #<Executable:0x005630caa03ec0 @path="//usr/lib64/liblua.so.5.1.5", @name="liblua.so.5.1.5">, #<Executable:0x005630caa02f70 @path="//usr/lib64/liblzma.so", @name="liblzma.so">, #<Executable:0x005630caa01ee0 @path="//usr/lib64/liblzo2.so", @name="liblzo2.so">, #<Executable:0x005630caa00fe0 @path="//usr/lib64/liblzo2.so.2", @name="liblzo2.so.2">, #<Executable:0x005630caa00158 @path="//usr/lib64/liblzo2.so.2.0.0", @name="liblzo2.so.2.0.0">, #<Entry:0x005630ca9fb450 @path="//usr/lib64/libm.a", @name="libm.a">, #<Entry:0x005630ca9fa500 @path="//usr/lib64/libMagick++-6.Q16.la", @name="libMagick++-6.Q16.la">, #<Executable:0x005630ca9f8d40 @path="//usr/lib64/libMagick++-6.Q16.so", @name="libMagick++-6.Q16.so">, #<Executable:0x005630ca9f3728 @path="//usr/lib64/libMagick++-6.Q16.so.6", @name="libMagick++-6.Q16.so.6">, #<Executable:0x005630ca9f15e0 @path="//usr/lib64/libMagick++-6.Q16.so.6.0.0", @name="libMagick++-6.Q16.so.6.0.0">, #<Entry:0x005630ca9ef380 @path="//usr/lib64/libMagickCore-6.Q16.la", @name="libMagickCore-6.Q16.la">, #<Executable:0x005630ca9ecd60 @path="//usr/lib64/libMagickCore-6.Q16.so", @name="libMagickCore-6.Q16.so">, #<Executable:0x005630ca9ebd98 @path="//usr/lib64/libMagickCore-6.Q16.so.2", @name="libMagickCore-6.Q16.so.2">, #<Executable:0x005630ca9eb028 @path="//usr/lib64/libMagickCore-6.Q16.so.2.0.0", @name="libMagickCore-6.Q16.so.2.0.0">, #<Entry:0x005630ca9e9fe8 @path="//usr/lib64/libMagickWand-6.Q16.la", @name="libMagickWand-6.Q16.la">, #<Executable:0x005630ca9e8fa8 @path="//usr/lib64/libMagickWand-6.Q16.so", @name="libMagickWand-6.Q16.so">, #<Executable:0x005630ca9e8080 @path="//usr/lib64/libMagickWand-6.Q16.so.2", @name="libMagickWand-6.Q16.so.2">, #<Executable:0x005630ca9e72e8 @path="//usr/lib64/libMagickWand-6.Q16.so.2.0.0", @name="libMagickWand-6.Q16.so.2.0.0">, #<Executable:0x005630ca9e5c18 @path="//usr/lib64/libmagic.so", @name="libmagic.so">, #<Executable:0x005630ca9e46b0 @path="//usr/lib64/libmagic.so.1", @name="libmagic.so.1">, #<Executable:0x005630ca9e3c10 @path="//usr/lib64/libmagic.so.1.0.0", @name="libmagic.so.1.0.0">, #<Entry:0x005630ca9e3080 @path="//usr/lib64/libmcheck.a", @name="libmcheck.a">, #<Executable:0x005630ca9e2400 @path="//usr/lib64/libmdigest.so", @name="libmdigest.so">, #<Executable:0x005630ca9e1690 @path="//usr/lib64/libmdigest.so.1.0", @name="libmdigest.so.1.0">, #<Executable:0x005630ca9e09e8 @path="//usr/lib64/libmediastreamer_base.so", @name="libmediastreamer_base.so">, #<Executable:0x005630ca9cfcb0 @path="//usr/lib64/libmediastreamer_base.so.3", @name="libmediastreamer_base.so.3">, #<Executable:0x005630ca9ce310 @path="//usr/lib64/libmediastreamer_base.so.3.0.0", @name="libmediastreamer_base.so.3.0.0">, #<Executable:0x005630ca9cd6e0 @path="//usr/lib64/libmediastreamer_voip.so", @name="libmediastreamer_voip.so">, #<Executable:0x005630ca9cc6f0 @path="//usr/lib64/libmediastreamer_voip.so.3", @name="libmediastreamer_voip.so.3">, #<Executable:0x005630ca9ab6a8 @path="//usr/lib64/libmediastreamer_voip.so.3.0.0", @name="libmediastreamer_voip.so.3.0.0">, #<Executable:0x005630ca9a8e30 @path="//usr/lib64/libmenu.so", @name="libmenu.so">, #<Executable:0x005630ca987988 @path="//usr/lib64/libmenu.so.5", @name="libmenu.so.5">, #<Executable:0x005630ca986830 @path="//usr/lib64/libmenu.so.5.9", @name="libmenu.so.5.9">, #<Executable:0x005630ca985368 @path="//usr/lib64/libmenuw.so", @name="libmenuw.so">, #<Executable:0x005630ca984030 @path="//usr/lib64/libmenuw.so.5", @name="libmenuw.so.5">, #<Executable:0x005630ca962f98 @path="//usr/lib64/libmenuw.so.5.9", @name="libmenuw.so.5.9">, #<Executable:0x005630ca961d50 @path="//usr/lib64/libminiupnpc.so", @name="libminiupnpc.so">, #<Executable:0x005630ca960b80 @path="//usr/lib64/libminiupnpc.so.9", @name="libminiupnpc.so.9">, #<Executable:0x005630ca94a8a8 @path="//usr/lib64/libmix.so", @name="libmix.so">, #<Executable:0x005630ca9494d0 @path="//usr/lib64/libmix++.so", @name="libmix++.so">, #<Executable:0x005630ca948198 @path="//usr/lib64/libmnl.so", @name="libmnl.so">, #<Executable:0x005630ca9471a8 @path="//usr/lib64/libmount.so", @name="libmount.so">, #<Executable:0x005630ca9458f8 @path="//usr/lib64/libmozjs185.so", @name="libmozjs185.so">, #<Executable:0x005630ca944d40 @path="//usr/lib64/libmozjs185.so.1.0", @name="libmozjs185.so.1.0">, #<Executable:0x005630ca9441b0 @path="//usr/lib64/libmozjs185.so.1.0.0", @name="libmozjs185.so.1.0.0">, #<Executable:0x005630ca9437d8 @path="//usr/lib64/libmozjs-24.so", @name="libmozjs-24.so">, #<Executable:0x005630ca942bd0 @path="//usr/lib64/libmp3lame.so", @name="libmp3lame.so">, #<Executable:0x005630ca941fc8 @path="//usr/lib64/libmp3lame.so.0", @name="libmp3lame.so.0">, #<Executable:0x005630ca940c68 @path="//usr/lib64/libmp3lame.so.0.0.0", @name="libmp3lame.so.0.0.0">, #<Executable:0x005630ca93fde0 @path="//usr/lib64/libmp4ff.so", @name="libmp4ff.so">, #<Executable:0x005630ca93f1d8 @path="//usr/lib64/libmp4ff.so.0", @name="libmp4ff.so.0">, #<Executable:0x005630ca93e6c0 @path="//usr/lib64/libmp4ff.so.0.0.0", @name="libmp4ff.so.0.0.0">, #<Executable:0x005630ca93d9f0 @path="//usr/lib64/libmpc.so", @name="libmpc.so">, #<Executable:0x005630ca93cde8 @path="//usr/lib64/libmpc.so.3", @name="libmpc.so.3">, #<Executable:0x005630ca93c190 @path="//usr/lib64/libmpc.so.3.0.0", @name="libmpc.so.3.0.0">, #<Executable:0x005630ca93b150 @path="//usr/lib64/libmpfr.so", @name="libmpfr.so">, #<Executable:0x005630ca939b98 @path="//usr/lib64/libmpfr.so.4", @name="libmpfr.so.4">, #<Executable:0x005630ca938c48 @path="//usr/lib64/libmpfr.so.4.1.3", @name="libmpfr.so.4.1.3">, #<Entry:0x005630ca937fa0 @path="//usr/lib64/libmpg123.la", @name="libmpg123.la">, #<Executable:0x005630ca937280 @path="//usr/lib64/libmpg123.so", @name="libmpg123.so">, #<Executable:0x005630ca936560 @path="//usr/lib64/libmpg123.so.0", @name="libmpg123.so.0">, #<Executable:0x005630ca9359a8 @path="//usr/lib64/libmpg123.so.0.41.2", @name="libmpg123.so.0.41.2">, #<Executable:0x005630ca934d28 @path="//usr/lib64/libm.so", @name="libm.so">, #<Executable:0x005630ca9340f8 @path="//usr/lib64/libmtdev.so", @name="libmtdev.so">, #<Executable:0x005630ca933180 @path="//usr/lib64/libmtdev.so.1", @name="libmtdev.so.1">, #<Executable:0x005630ca9323c0 @path="//usr/lib64/libmtdev.so.1.0.0", @name="libmtdev.so.1.0.0">, #<Entry:0x005630ca9317b8 @path="//usr/lib64/libmvec.a", @name="libmvec.a">, #<Entry:0x005630ca930c00 @path="//usr/lib64/libmvec_nonshared.a", @name="libmvec_nonshared.a">, #<Executable:0x005630ca9300c0 @path="//usr/lib64/libmvec.so", @name="libmvec.so">, #<Executable:0x005630ca92f468 @path="//usr/lib64/libnatpmp.so", @name="libnatpmp.so">, #<Executable:0x005630ca92e798 @path="//usr/lib64/libnatpmp.so.1", @name="libnatpmp.so.1">, #<Entry:0x005630ca92db40 @path="//usr/lib64/libncurses++.a", @name="libncurses++.a">, #<Executable:0x005630ca92d000 @path="//usr/lib64/libncurses.so", @name="libncurses.so">, #<Entry:0x005630ca92c420 @path="//usr/lib64/libncurses++w.a", @name="libncurses++w.a">, #<Executable:0x005630ca8b7738 @path="//usr/lib64/libncursesw.so", @name="libncursesw.so">, #<Entry:0x005630ca8b6b58 @path="//usr/lib64/libnetlink.a", @name="libnetlink.a">, #<Executable:0x005630ca8b5e10 @path="//usr/lib64/libnettle.so", @name="libnettle.so">, #<Executable:0x005630ca8b5140 @path="//usr/lib64/libnettle.so.6", @name="libnettle.so.6">, #<Executable:0x005630ca8b4510 @path="//usr/lib64/libnettle.so.6.2", @name="libnettle.so.6.2">, #<Executable:0x005630ca8b2da0 @path="//usr/lib64/libnfsidmap.so", @name="libnfsidmap.so">, #<Executable:0x005630ca8b2170 @path="//usr/lib64/libnfsidmap.so.0", @name="libnfsidmap.so.0">, #<Executable:0x005630ca8b10b8 @path="//usr/lib64/libnfsidmap.so.0.3.0", @name="libnfsidmap.so.0.3.0">, #<Executable:0x005630ca8b0550 @path="//usr/lib64/libnl-3.so", @name="libnl-3.so">, #<Executable:0x005630ca8af808 @path="//usr/lib64/libnl-3.so.200", @name="libnl-3.so.200">, #<Executable:0x005630ca8aeac0 @path="//usr/lib64/libnl-3.so.200.22.0", @name="libnl-3.so.200.22.0">, #<Executable:0x005630ca8adbe8 @path="//usr/lib64/libnl-genl-3.so", @name="libnl-genl-3.so">, #<Executable:0x005630ca8acf90 @path="//usr/lib64/libnl-genl-3.so.200", @name="libnl-genl-3.so.200">, #<Executable:0x005630ca8ac3b0 @path="//usr/lib64/libnl-genl-3.so.200.22.0", @name="libnl-genl-3.so.200.22.0">, #<Executable:0x005630ca91e938 @path="//usr/lib64/libnl-idiag-3.so", @name="libnl-idiag-3.so">, #<Executable:0x005630ca91c5c0 @path="//usr/lib64/libnl-idiag-3.so.200", @name="libnl-idiag-3.so.200">, #<Executable:0x005630ca91b940 @path="//usr/lib64/libnl-idiag-3.so.200.22.0", @name="libnl-idiag-3.so.200.22.0">, #<Executable:0x005630ca91aab8 @path="//usr/lib64/libnl-nf-3.so", @name="libnl-nf-3.so">, #<Executable:0x005630ca919b90 @path="//usr/lib64/libnl-nf-3.so.200", @name="libnl-nf-3.so.200">, #<Executable:0x005630ca918d58 @path="//usr/lib64/libnl-nf-3.so.200.22.0", @name="libnl-nf-3.so.200.22.0">, #<Executable:0x005630ca918740 @path="//usr/lib64/libnl-route-3.so", @name="libnl-route-3.so">, #<Executable:0x005630ca913448 @path="//usr/lib64/libnl-route-3.so.200", @name="libnl-route-3.so.200">, #<Executable:0x005630ca9127f0 @path="//usr/lib64/libnl-route-3.so.200.22.0", @name="libnl-route-3.so.200.22.0">, #<Executable:0x005630ca911a30 @path="//usr/lib64/libnl-xfrm-3.so", @name="libnl-xfrm-3.so">, #<Executable:0x005630ca910810 @path="//usr/lib64/libnl-xfrm-3.so.200", @name="libnl-xfrm-3.so.200">, #<Executable:0x005630ca90bba8 @path="//usr/lib64/libnl-xfrm-3.so.200.22.0", @name="libnl-xfrm-3.so.200.22.0">, #<Executable:0x005630ca90ad70 @path="//usr/lib64/libnotify.so", @name="libnotify.so">, #<Executable:0x005630ca90a118 @path="//usr/lib64/libnotify.so.4", @name="libnotify.so.4">, #<Executable:0x005630ca909100 @path="//usr/lib64/libnotify.so.4.0.0", @name="libnotify.so.4.0.0">, #<Entry:0x005630ca907f58 @path="//usr/lib64/libnsl.a", @name="libnsl.a">, #<Executable:0x005630ca907260 @path="//usr/lib64/libnsl.so", @name="libnsl.so">, #<Executable:0x005630ca905de8 @path="//usr/lib64/libnspr4.so", @name="libnspr4.so">, #<Executable:0x005630ca9047e0 @path="//usr/lib64/libnss_compat.so", @name="libnss_compat.so">, #<Executable:0x005630ca902bc0 @path="//usr/lib64/libnss_db.so", @name="libnss_db.so">, #<Executable:0x005630ca900118 @path="//usr/lib64/libnss_dns.so", @name="libnss_dns.so">, #<Executable:0x005630ca8ff0d8 @path="//usr/lib64/libnss_files.so", @name="libnss_files.so">, #<Executable:0x005630ca8fe250 @path="//usr/lib64/libnss_hesiod.so", @name="libnss_hesiod.so">, #<Executable:0x005630ca8fcfb8 @path="//usr/lib64/libnss_nisplus.so", @name="libnss_nisplus.so">, #<Executable:0x005630ca8fc158 @path="//usr/lib64/libnss_nis.so", @name="libnss_nis.so">, #<Executable:0x005630ca8fb140 @path="//usr/lib64/libntfs-3g.so", @name="libntfs-3g.so">, #<Executable:0x005630ca8f9ea8 @path="//usr/lib64/libntfs-3g.so.86", @name="libntfs-3g.so.86">, #<Executable:0x005630ca8f8e40 @path="//usr/lib64/libntfs-3g.so.86.0.0", @name="libntfs-3g.so.86.0.0">, #<Executable:0x005630ca8f7d10 @path="//usr/lib64/libogg.so", @name="libogg.so">, #<Executable:0x005630ca8f6f28 @path="//usr/lib64/libogg.so.0", @name="libogg.so.0">, #<Executable:0x005630ca8f5a60 @path="//usr/lib64/libogg.so.0.8.1", @name="libogg.so.0.8.1">, #<Executable:0x005630ca8f4c28 @path="//usr/lib64/libogrove.so", @name="libogrove.so">, #<Executable:0x005630ca8dbc78 @path="//usr/lib64/libogrove.so.0", @name="libogrove.so.0">, #<Executable:0x005630ca8bf2d0 @path="//usr/lib64/libogrove.so.0.0.1", @name="libogrove.so.0.0.1">, #<Executable:0x005630ca8bc8a0 @path="//usr/lib64/libopcodes-2.25.1.so", @name="libopcodes-2.25.1.so">, #<Executable:0x005630ca8bb568 @path="//usr/lib64/libopcodes.so", @name="libopcodes.so">, #<Executable:0x005630ca8ba820 @path="//usr/lib64/libopenal.so", @name="libopenal.so">, #<Executable:0x005630ca8b9a88 @path="//usr/lib64/libopenal.so.1", @name="libopenal.so.1">, #<Executable:0x005630ca8b8cf0 @path="//usr/lib64/libopenal.so.1.15.1", @name="libopenal.so.1.15.1">, #<Executable:0x005630ca8abf00 @path="//usr/lib64/libopenjp2.so", @name="libopenjp2.so">, #<Executable:0x005630ca8ab258 @path="//usr/lib64/libopenjp2.so.2.1.0", @name="libopenjp2.so.2.1.0">, #<Executable:0x005630ca8a9c50 @path="//usr/lib64/libopenjp2.so.7", @name="libopenjp2.so.7">, #<Executable:0x005630ca8a8e18 @path="//usr/lib64/libopts.so", @name="libopts.so">, #<Executable:0x005630ca8a81c0 @path="//usr/lib64/libopts.so.25", @name="libopts.so.25">, #<Executable:0x005630ca8a74a0 @path="//usr/lib64/libopts.so.25.16.0", @name="libopts.so.25.16.0">, #<Executable:0x005630ca8a6910 @path="//usr/lib64/libortp.so", @name="libortp.so">, #<Executable:0x005630ca8a5d08 @path="//usr/lib64/libortp.so.9", @name="libortp.so.9">, #<Executable:0x005630ca8a5010 @path="//usr/lib64/libortp.so.9.0.0", @name="libortp.so.9.0.0">, #<Entry:0x005630ca8a4408 @path="//usr/lib64/libosip2.a", @name="libosip2.a">, #<Entry:0x005630ca88acd8 @path="//usr/lib64/libosip2.la", @name="libosip2.la">, #<Executable:0x005630ca8899c8 @path="//usr/lib64/libosip2.so", @name="libosip2.so">, #<Executable:0x005630ca888758 @path="//usr/lib64/libosip2.so.10", @name="libosip2.so.10">, #<Executable:0x005630ca7520f0 @path="//usr/lib64/libosip2.so.10.0.0", @name="libosip2.so.10.0.0">, #<Entry:0x005630ca74d848 @path="//usr/lib64/libosipparser2.a", @name="libosipparser2.a">, #<Entry:0x005630ca74a878 @path="//usr/lib64/libosipparser2.la", @name="libosipparser2.la">, #<Executable:0x005630ca747ba0 @path="//usr/lib64/libosipparser2.so", @name="libosipparser2.so">, #<Executable:0x005630ca744ea0 @path="//usr/lib64/libosipparser2.so.10", @name="libosipparser2.so.10">, #<Executable:0x005630ca73e578 @path="//usr/lib64/libosipparser2.so.10.0.0", @name="libosipparser2.so.10.0.0">, #<Executable:0x005630ca73a928 @path="//usr/lib64/libospgrove.so", @name="libospgrove.so">, #<Executable:0x005630ca736580 @path="//usr/lib64/libospgrove.so.0", @name="libospgrove.so.0">, #<Executable:0x005630ca7337b8 @path="//usr/lib64/libospgrove.so.0.0.1", @name="libospgrove.so.0.0.1">, #<Executable:0x005630ca72e970 @path="//usr/lib64/libosp.so", @name="libosp.so">, #<Executable:0x005630ca7271c0 @path="//usr/lib64/libosp.so.5", @name="libosp.so.5">, #<Executable:0x005630ca723908 @path="//usr/lib64/libosp.so.5.0.0", @name="libosp.so.5.0.0">, #<Executable:0x005630ca721838 @path="//usr/lib64/libostyle.so", @name="libostyle.so">, #<Executable:0x005630ca71e660 @path="//usr/lib64/libostyle.so.0", @name="libostyle.so.0">, #<Executable:0x005630ca71b488 @path="//usr/lib64/libostyle.so.0.0.1", @name="libostyle.so.0.0.1">, #<Executable:0x005630ca7171d0 @path="//usr/lib64/libpamc.so", @name="libpamc.so">, #<Executable:0x005630ca715308 @path="//usr/lib64/libpam_misc.so", @name="libpam_misc.so">, #<Executable:0x005630ca7130a8 @path="//usr/lib64/libpam.so", @name="libpam.so">, #<Executable:0x005630ca711370 @path="//usr/lib64/libpanel.so", @name="libpanel.so">, #<Executable:0x005630ca710290 @path="//usr/lib64/libpanel.so.5", @name="libpanel.so.5">, #<Executable:0x005630ca70f3e0 @path="//usr/lib64/libpanel.so.5.9", @name="libpanel.so.5.9">, #<Executable:0x005630ca70e148 @path="//usr/lib64/libpanelw.so", @name="libpanelw.so">, #<Executable:0x005630ca70d180 @path="//usr/lib64/libpanelw.so.5", @name="libpanelw.so.5">, #<Executable:0x005630ca70c320 @path="//usr/lib64/libpanelw.so.5.9", @name="libpanelw.so.5.9">, #<Executable:0x005630ca70b1c8 @path="//usr/lib64/libpango-1.0.so", @name="libpango-1.0.so">, #<Executable:0x005630ca70a548 @path="//usr/lib64/libpango-1.0.so.0", @name="libpango-1.0.so.0">, #<Executable:0x005630ca709850 @path="//usr/lib64/libpango-1.0.so.0.3800.1", @name="libpango-1.0.so.0.3800.1">, #<Executable:0x005630ca708bd0 @path="//usr/lib64/libpangocairo-1.0.so", @name="libpangocairo-1.0.so">, #<Executable:0x005630ca707c58 @path="//usr/lib64/libpangocairo-1.0.so.0", @name="libpangocairo-1.0.so.0">, #<Executable:0x005630ca706ce0 @path="//usr/lib64/libpangocairo-1.0.so.0.3800.1", @name="libpangocairo-1.0.so.0.3800.1">, #<Executable:0x005630ca705ca0 @path="//usr/lib64/libpangoft2-1.0.so", @name="libpangoft2-1.0.so">, #<Executable:0x005630ca704dc8 @path="//usr/lib64/libpangoft2-1.0.so.0", @name="libpangoft2-1.0.so.0">, #<Executable:0x005630ca703f68 @path="//usr/lib64/libpangoft2-1.0.so.0.3800.1", @name="libpangoft2-1.0.so.0.3800.1">, #<Executable:0x005630ca702f28 @path="//usr/lib64/libpangoxft-1.0.so", @name="libpangoxft-1.0.so">, #<Executable:0x005630ca702078 @path="//usr/lib64/libpangoxft-1.0.so.0", @name="libpangoxft-1.0.so.0">, #<Executable:0x005630ca701290 @path="//usr/lib64/libpangoxft-1.0.so.0.3800.1", @name="libpangoxft-1.0.so.0.3800.1">, #<Executable:0x005630ca700458 @path="//usr/lib64/libpaper.so", @name="libpaper.so">, #<Executable:0x005630ca6ff5a8 @path="//usr/lib64/libpaper.so.1", @name="libpaper.so.1">, #<Executable:0x005630ca6fe5e0 @path="//usr/lib64/libpaper.so.1.1.2", @name="libpaper.so.1.1.2">, #<Executable:0x005630ca6fd5a0 @path="//usr/lib64/libparanoia.so", @name="libparanoia.so">, #<Executable:0x005630ca6fc8d0 @path="//usr/lib64/libparanoia.so.1.0", @name="libparanoia.so.1.0">, #<Executable:0x005630ca6fb9a8 @path="//usr/lib64/libparted-fs-resize.so", @name="libparted-fs-resize.so">, #<Executable:0x005630ca6fabc0 @path="//usr/lib64/libparted-fs-resize.so.0", @name="libparted-fs-resize.so.0">, #<Executable:0x005630ca6f9c48 @path="//usr/lib64/libparted-fs-resize.so.0.0.1", @name="libparted-fs-resize.so.0.0.1">, #<Executable:0x005630ca6f8c08 @path="//usr/lib64/libparted.so", @name="libparted.so">, #<Executable:0x005630ca6f7bc8 @path="//usr/lib64/libparted.so.2", @name="libparted.so.2">, #<Executable:0x005630ca6f6d18 @path="//usr/lib64/libparted.so.2.0.1", @name="libparted.so.2.0.1">, #<Executable:0x005630ca6f5e90 @path="//usr/lib64/libpcap.so", @name="libpcap.so">, #<Executable:0x005630ca6f4ec8 @path="//usr/lib64/libpcap.so.1", @name="libpcap.so.1">, #<Executable:0x005630ca6f41f8 @path="//usr/lib64/libpcap.so.1.7.4", @name="libpcap.so.1.7.4">, #<Executable:0x005630caa80e48 @path="//usr/lib64/libpciaccess.so", @name="libpciaccess.so">, #<Executable:0x005630caa77488 @path="//usr/lib64/libpciaccess.so.0", @name="libpciaccess.so.0">, #<Executable:0x005630caa75c78 @path="//usr/lib64/libpciaccess.so.0.11.1", @name="libpciaccess.so.0.11.1">, #<Executable:0x005630caa74008 @path="//usr/lib64/libpci.so", @name="libpci.so">, #<Executable:0x005630caa6e6f8 @path="//usr/lib64/libpci.so.3", @name="libpci.so.3">, #<Executable:0x005630caa6d258 @path="//usr/lib64/libpci.so.3.4.1", @name="libpci.so.3.4.1">, #<Executable:0x005630caa6c588 @path="//usr/lib64/libpcrecpp.so", @name="libpcrecpp.so">, #<Executable:0x005630caa66778 @path="//usr/lib64/libpcrecpp.so.0", @name="libpcrecpp.so.0">, #<Executable:0x005630caa65440 @path="//usr/lib64/libpcrecpp.so.0.0.1", @name="libpcrecpp.so.0.0.1">, #<Executable:0x005630caa646d0 @path="//usr/lib64/libpcreposix.so", @name="libpcreposix.so">, #<Executable:0x005630caa56f08 @path="//usr/lib64/libpcreposix.so.0", @name="libpcreposix.so.0">, #<Executable:0x005630caa56008 @path="//usr/lib64/libpcreposix.so.0.0.3", @name="libpcreposix.so.0.0.3">, #<Executable:0x005630caa4f500 @path="//usr/lib64/libpcre.so", @name="libpcre.so">, #<Executable:0x005630caa4e650 @path="//usr/lib64/libperl.so", @name="libperl.so">, #<Executable:0x005630caa4d228 @path="//usr/lib64/libperl.so.5.20", @name="libperl.so.5.20">, #<Executable:0x005630caa433e0 @path="//usr/lib64/libperl.so.5.20.2", @name="libperl.so.5.20.2">, #<Executable:0x005630caa42670 @path="//usr/lib64/libpipeline.so", @name="libpipeline.so">, #<Executable:0x005630caa41928 @path="//usr/lib64/libpipeline.so.1", @name="libpipeline.so.1">, #<Executable:0x005630caa40780 @path="//usr/lib64/libpipeline.so.1.4.0", @name="libpipeline.so.1.4.0">, #<Executable:0x005630caa3f830 @path="//usr/lib64/libpixman-1.so", @name="libpixman-1.so">, #<Executable:0x005630caa3e700 @path="//usr/lib64/libpixman-1.so.0", @name="libpixman-1.so.0">, #<Executable:0x005630caa2b678 @path="//usr/lib64/libpixman-1.so.0.32.8", @name="libpixman-1.so.0.32.8">, #<Executable:0x005630caa29d50 @path="//usr/lib64/libplc4.so", @name="libplc4.so">, #<Executable:0x005630caa28630 @path="//usr/lib64/libplds4.so", @name="libplds4.so">, #<Executable:0x005630caa27780 @path="//usr/lib64/libpng16.so", @name="libpng16.so">, #<Executable:0x005630caa26588 @path="//usr/lib64/libpng16.so.16", @name="libpng16.so.16">, #<Executable:0x005630caa254a8 @path="//usr/lib64/libpng16.so.16.21.0", @name="libpng16.so.16.21.0">, #<Executable:0x005630caa24530 @path="//usr/lib64/libpng.so", @name="libpng.so">, #<Executable:0x005630caa237c0 @path="//usr/lib64/libpolkit-agent-1.so", @name="libpolkit-agent-1.so">, #<Executable:0x005630caa22898 @path="//usr/lib64/libpolkit-agent-1.so.0", @name="libpolkit-agent-1.so.0">, #<Executable:0x005630caa218a8 @path="//usr/lib64/libpolkit-agent-1.so.0.0.0", @name="libpolkit-agent-1.so.0.0.0">, #<Executable:0x005630caa20890 @path="//usr/lib64/libpolkit-gobject-1.so", @name="libpolkit-gobject-1.so">, #<Executable:0x005630caa13410 @path="//usr/lib64/libpolkit-gobject-1.so.0", @name="libpolkit-gobject-1.so.0">, #<Executable:0x005630caa11c00 @path="//usr/lib64/libpolkit-gobject-1.so.0.0.0", @name="libpolkit-gobject-1.so.0.0.0">, #<Executable:0x005630caa10be8 @path="//usr/lib64/libpoppler-cpp.so", @name="libpoppler-cpp.so">, #<Executable:0x005630caa0bda0 @path="//usr/lib64/libpoppler-cpp.so.0", @name="libpoppler-cpp.so.0">, #<Executable:0x005630caa0ad88 @path="//usr/lib64/libpoppler-cpp.so.0.2.1", @name="libpoppler-cpp.so.0.2.1">, #<Executable:0x005630caa09e60 @path="//usr/lib64/libpoppler-glib.so", @name="libpoppler-glib.so">, #<Executable:0x005630caa08bf0 @path="//usr/lib64/libpoppler-glib.so.8", @name="libpoppler-glib.so.8">, #<Executable:0x005630caa03df8 @path="//usr/lib64/libpoppler-glib.so.8.7.0", @name="libpoppler-glib.so.8.7.0">, #<Executable:0x005630caa02d18 @path="//usr/lib64/libpoppler.so", @name="libpoppler.so">, #<Executable:0x005630caa01d00 @path="//usr/lib64/libpoppler.so.59", @name="libpoppler.so.59">, #<Executable:0x005630caa00ba8 @path="//usr/lib64/libpoppler.so.59.0.0", @name="libpoppler.so.59.0.0">, #<Executable:0x005630ca9fbc98 @path="//usr/lib64/libpopt.so", @name="libpopt.so">, #<Executable:0x005630ca9fad48 @path="//usr/lib64/libpopt.so.0", @name="libpopt.so.0">, #<Executable:0x005630ca9f99c0 @path="//usr/lib64/libpopt.so.0.0.0", @name="libpopt.so.0.0.0">, #<Executable:0x005630ca9f8250 @path="//usr/lib64/libportaudiocpp.so", @name="libportaudiocpp.so">, #<Executable:0x005630ca9f1e50 @path="//usr/lib64/libportaudiocpp.so.0", @name="libportaudiocpp.so.0">, #<Executable:0x005630ca9efbc8 @path="//usr/lib64/libportaudiocpp.so.0.0.12", @name="libportaudiocpp.so.0.0.12">, #<Executable:0x005630ca9ed620 @path="//usr/lib64/libportaudio.so", @name="libportaudio.so">, #<Executable:0x005630ca9ee390 @path="//usr/lib64/libportaudio.so.2", @name="libportaudio.so.2">, #<Executable:0x005630ca9eb078 @path="//usr/lib64/libportaudio.so.2.0.0", @name="libportaudio.so.2.0.0">, #<Executable:0x005630ca9e9ef8 @path="//usr/lib64/libpostproc.so", @name="libpostproc.so">, #<Executable:0x005630ca9e8d78 @path="//usr/lib64/libpostproc.so.53", @name="libpostproc.so.53">, #<Executable:0x005630ca9e7ea0 @path="//usr/lib64/libpostproc.so.53.3.100", @name="libpostproc.so.53.3.100">, #<Executable:0x005630ca9e6c30 @path="//usr/lib64/libprocps.so", @name="libprocps.so">, #<Executable:0x005630ca9e5600 @path="//usr/lib64/libproxychains.so", @name="libproxychains.so">, #<Executable:0x005630ca9e4228 @path="//usr/lib64/libproxychains.so.4", @name="libproxychains.so.4">, #<Executable:0x005630ca9e35d0 @path="//usr/lib64/libproxychains.so.4.11", @name="libproxychains.so.4.11">, #<Executable:0x005630ca9e2950 @path="//usr/lib64/libproxy.so", @name="libproxy.so">, #<Executable:0x005630ca9e1b90 @path="//usr/lib64/libproxy.so.1", @name="libproxy.so.1">, #<Executable:0x005630ca9e0d58 @path="//usr/lib64/libproxy.so.1.0.0", @name="libproxy.so.1.0.0">, #<Entry:0x005630ca9e1a00 @path="//usr/lib64/libpthread.a", @name="libpthread.a">, #<Entry:0x005630ca9ce568 @path="//usr/lib64/libpthread_nonshared.a", @name="libpthread_nonshared.a">, #<Executable:0x005630ca9cd8c0 @path="//usr/lib64/libpthread.so", @name="libpthread.so">, #<Executable:0x005630ca9cc6c8 @path="//usr/lib64/libpth.so", @name="libpth.so">, #<Executable:0x005630ca9ab5b8 @path="//usr/lib64/libpth.so.20", @name="libpth.so.20">, #<Executable:0x005630ca9a89f8 @path="//usr/lib64/libpth.so.20.0.27", @name="libpth.so.20.0.27">, #<Executable:0x005630ca987500 @path="//usr/lib64/libpyglib-2.0-python2.72.7.so", @name="libpyglib-2.0-python2.72.7.so">, #<Executable:0x005630ca986218 @path="//usr/lib64/libpyglib-2.0-python2.72.7.so.0", @name="libpyglib-2.0-python2.72.7.so.0">, #<Executable:0x005630ca984c60 @path="//usr/lib64/libpyglib-2.0-python2.72.7.so.0.0.0", @name="libpyglib-2.0-python2.72.7.so.0.0.0">, #<Entry:0x005630ca963a88 @path="//usr/lib64/libpython2.7.a", @name="libpython2.7.a">, #<Executable:0x005630ca962750 @path="//usr/lib64/libpython2.7.so", @name="libpython2.7.so">, #<Executable:0x005630ca9613c8 @path="//usr/lib64/libpython2.7.so.1.0", @name="libpython2.7.so.1.0">, #<Entry:0x005630ca94b0c8 @path="//usr/lib64/libpython3.4.a", @name="libpython3.4.a">, #<Executable:0x005630ca949b10 @path="//usr/lib64/libpython3.4.so", @name="libpython3.4.so">, #<Executable:0x005630ca948878 @path="//usr/lib64/libpython3.4.so.1.0", @name="libpython3.4.so.1.0">, #<Executable:0x005630ca947478 @path="//usr/lib64/libqpdf.so", @name="libqpdf.so">, #<Executable:0x005630ca945b50 @path="//usr/lib64/libqpdf.so.13", @name="libqpdf.so.13">, #<Executable:0x005630ca944e80 @path="//usr/lib64/libqpdf.so.13.1.1", @name="libqpdf.so.13.1.1">, #<Executable:0x005630ca944228 @path="//usr/lib64/libquvi-0.9-0.9.4.so", @name="libquvi-0.9-0.9.4.so">, #<Executable:0x005630ca943620 @path="//usr/lib64/libquvi-0.9.so", @name="libquvi-0.9.so">, #<Executable:0x005630ca942978 @path="//usr/lib64/libquvi.so", @name="libquvi.so">, #<Executable:0x005630ca941d20 @path="//usr/lib64/libquvi.so.7", @name="libquvi.so.7">, #<Executable:0x005630ca940920 @path="//usr/lib64/libquvi.so.7.0.1", @name="libquvi.so.7.0.1">, #<Executable:0x005630ca93fa48 @path="//usr/lib64/librc.so", @name="librc.so">, #<Executable:0x005630ca93ec88 @path="//usr/lib64/libreadline.so", @name="libreadline.so">, #<Executable:0x005630ca93e030 @path="//usr/lib64/librecode.so", @name="librecode.so">, #<Executable:0x005630ca93d338 @path="//usr/lib64/librecode.so.0", @name="librecode.so.0">, #<Executable:0x005630ca93c690 @path="//usr/lib64/librecode.so.0.0.0", @name="librecode.so.0.0.0">, #<Executable:0x005630ca93b740 @path="//usr/lib64/libreg.so", @name="libreg.so">, #<Entry:0x005630ca93a2c8 @path="//usr/lib64/libresolv.a", @name="libresolv.a">, #<Executable:0x005630ca938ec8 @path="//usr/lib64/libresolv.so", @name="libresolv.so">, #<Entry:0x005630ca938040 @path="//usr/lib64/librpcsvc.a", @name="librpcsvc.a">, #<Executable:0x005630ca937348 @path="//usr/lib64/librscg.so", @name="librscg.so">, #<Executable:0x005630ca936498 @path="//usr/lib64/librscg.so.1.0", @name="librscg.so.1.0">, #<Executable:0x005630ca935818 @path="//usr/lib64/librsvg-2.so", @name="librsvg-2.so">, #<Executable:0x005630ca934b48 @path="//usr/lib64/librsvg-2.so.2", @name="librsvg-2.so.2">, #<Executable:0x005630ca933dd8 @path="//usr/lib64/librsvg-2.so.2.40.15", @name="librsvg-2.so.2.40.15">, #<Entry:0x005630ca932cf8 @path="//usr/lib64/librt.a", @name="librt.a">, #<Entry:0x005630ca931f88 @path="//usr/lib64/librtmp.a", @name="librtmp.a">, #<Executable:0x005630ca931218 @path="//usr/lib64/librtmp.so", @name="librtmp.so">, #<Executable:0x005630ca9305e8 @path="//usr/lib64/librtmp.so.1", @name="librtmp.so.1">, #<Executable:0x005630ca92faf8 @path="//usr/lib64/librt.so", @name="librt.so">, #<Executable:0x005630ca92eb30 @path="//usr/lib64/libruby23.so", @name="libruby23.so">, #<Executable:0x005630ca92de10 @path="//usr/lib64/libruby23.so.2.3", @name="libruby23.so.2.3">, #<Executable:0x005630ca92d1e0 @path="//usr/lib64/libruby23.so.2.3.0", @name="libruby23.so.2.3.0">, #<Entry:0x005630ca92c560 @path="//usr/lib64/libruby23-static.a", @name="libruby23-static.a">, #<Executable:0x005630ca8b76e8 @path="//usr/lib64/libsamplerate.so", @name="libsamplerate.so">, #<Executable:0x005630ca8b69f0 @path="//usr/lib64/libsamplerate.so.0", @name="libsamplerate.so.0">, #<Executable:0x005630ca8b5b90 @path="//usr/lib64/libsamplerate.so.0.1.8", @name="libsamplerate.so.0.1.8">, #<Executable:0x005630ca8b4df8 @path="//usr/lib64/libsandbox.so", @name="libsandbox.so">, #<Executable:0x005630ca8b4150 @path="//usr/lib64/libsbc.so", @name="libsbc.so">, #<Executable:0x005630ca8b3458 @path="//usr/lib64/libsbc.so.1", @name="libsbc.so.1">, #<Executable:0x005630ca8b2738 @path="//usr/lib64/libsbc.so.1.2.1", @name="libsbc.so.1.2.1">, #<Executable:0x005630ca8b1978 @path="//usr/lib64/libscgcmd.so", @name="libscgcmd.so">, #<Executable:0x005630ca8b08e8 @path="//usr/lib64/libscgcmd.so.1.0", @name="libscgcmd.so.1.0">, #<Executable:0x005630ca8afb50 @path="//usr/lib64/libscg.so", @name="libscg.so">, #<Executable:0x005630ca8aed40 @path="//usr/lib64/libscg.so.1.0", @name="libscg.so.1.0">, #<Executable:0x005630ca8adf30 @path="//usr/lib64/libschily.so", @name="libschily.so">, #<Executable:0x005630ca8ad0d0 @path="//usr/lib64/libschily.so.1.0", @name="libschily.so.1.0">, #<Executable:0x005630ca8ac310 @path="//usr/lib64/libSDL-1.2.so.0", @name="libSDL-1.2.so.0">, #<Executable:0x005630ca91e460 @path="//usr/lib64/libSDL-1.2.so.0.11.4", @name="libSDL-1.2.so.0.11.4">, #<Executable:0x005630ca91c2f0 @path="//usr/lib64/libSDL2-2.0.so.0", @name="libSDL2-2.0.so.0">, #<Executable:0x005630ca91b558 @path="//usr/lib64/libSDL2-2.0.so.0.4.0", @name="libSDL2-2.0.so.0.4.0">, #<Entry:0x005630ca91a450 @path="//usr/lib64/libSDL2main.a", @name="libSDL2main.a">, #<Entry:0x005630ca919758 @path="//usr/lib64/libSDL2main.la", @name="libSDL2main.la">, #<Executable:0x005630ca918830 @path="//usr/lib64/libSDL2.so", @name="libSDL2.so">, #<Entry:0x005630ca913a10 @path="//usr/lib64/libSDL2_test.a", @name="libSDL2_test.a">, #<Entry:0x005630ca912c50 @path="//usr/lib64/libSDL2_test.la", @name="libSDL2_test.la">, #<Executable:0x005630ca911fd0 @path="//usr/lib64/libSDL2_ttf-2.0.so.0", @name="libSDL2_ttf-2.0.so.0">, #<Executable:0x005630ca910ce8 @path="//usr/lib64/libSDL2_ttf-2.0.so.0.14.0", @name="libSDL2_ttf-2.0.so.0.14.0">, #<Executable:0x005630ca90be28 @path="//usr/lib64/libSDL2_ttf.so", @name="libSDL2_ttf.so">, #<Executable:0x005630ca90afa0 @path="//usr/lib64/libSDL_gfx.so", @name="libSDL_gfx.so">, #<Executable:0x005630ca90a1b8 @path="//usr/lib64/libSDL_gfx.so.15", @name="libSDL_gfx.so.15">, #<Executable:0x005630ca908fe8 @path="//usr/lib64/libSDL_gfx.so.15.9.1", @name="libSDL_gfx.so.15.9.1">, #<Executable:0x005630ca907e40 @path="//usr/lib64/libSDL_image-1.2.so.0", @name="libSDL_image-1.2.so.0">, #<Executable:0x005630ca906f68 @path="//usr/lib64/libSDL_image-1.2.so.0.8.4", @name="libSDL_image-1.2.so.0.8.4">, #<Executable:0x005630ca9058c0 @path="//usr/lib64/libSDL_image.so", @name="libSDL_image.so">, #<Entry:0x005630ca903930 @path="//usr/lib64/libSDLmain.a", @name="libSDLmain.a">, #<Executable:0x005630ca901ef0 @path="//usr/lib64/libSDL_mixer-1.2.so.0", @name="libSDL_mixer-1.2.so.0">, #<Executable:0x005630ca8ffa60 @path="//usr/lib64/libSDL_mixer-1.2.so.0.12.0", @name="libSDL_mixer-1.2.so.0.12.0">, #<Executable:0x005630ca8fe9f8 @path="//usr/lib64/libSDL_mixer.so", @name="libSDL_mixer.so">, #<Executable:0x005630ca8fd9b8 @path="//usr/lib64/libSDL.so", @name="libSDL.so">, #<Executable:0x005630ca8fc658 @path="//usr/lib64/libSDL_ttf-2.0.so.0", @name="libSDL_ttf-2.0.so.0">, #<Executable:0x005630ca8fb550 @path="//usr/lib64/libSDL_ttf-2.0.so.0.10.1", @name="libSDL_ttf-2.0.so.0.10.1">, #<Executable:0x005630ca8fa448 @path="//usr/lib64/libSDL_ttf.so", @name="libSDL_ttf.so">, #<Executable:0x005630ca8f9110 @path="//usr/lib64/libseccomp.so", @name="libseccomp.so">, #<Executable:0x005630ca8f7e28 @path="//usr/lib64/libseccomp.so.2", @name="libseccomp.so.2">, #<Executable:0x005630ca8f6ed8 @path="//usr/lib64/libseccomp.so.2.3.0", @name="libseccomp.so.2.3.0">, #<Executable:0x005630ca8f5920 @path="//usr/lib64/libsensors.so", @name="libsensors.so">, #<Executable:0x005630ca8f4a20 @path="//usr/lib64/libsensors.so.4", @name="libsensors.so.4">, #<Executable:0x005630ca8bfdc0 @path="//usr/lib64/libsensors.so.4.3.2", @name="libsensors.so.4.3.2">, #<Executable:0x005630ca8bed08 @path="//usr/lib64/libsiconv.so", @name="libsiconv.so">, #<Executable:0x005630ca8bbce8 @path="//usr/lib64/libsiconv.so.1.0", @name="libsiconv.so.1.0">, #<Executable:0x005630ca8baeb0 @path="//usr/lib64/libslang.so", @name="libslang.so">, #<Executable:0x005630ca8ba140 @path="//usr/lib64/libslang.so.2", @name="libslang.so.2">, #<Executable:0x005630ca8b9240 @path="//usr/lib64/libslang.so.2.2.4", @name="libslang.so.2.2.4">, #<Executable:0x005630ca8b83b8 @path="//usr/lib64/libslim.so", @name="libslim.so">, #<Executable:0x005630ca8ab690 @path="//usr/lib64/libslim.so.1.3.6", @name="libslim.so.1.3.6">, #<Executable:0x005630ca8aa240 @path="//usr/lib64/libsmartcols.so", @name="libsmartcols.so">, #<Executable:0x005630ca8a8f08 @path="//usr/lib64/libSM.so", @name="libSM.so">, #<Executable:0x005630ca8a8170 @path="//usr/lib64/libSM.so.6", @name="libSM.so.6">, #<Executable:0x005630ca8a73d8 @path="//usr/lib64/libSM.so.6.0.1", @name="libSM.so.6.0.1">, #<Executable:0x005630ca8a67d0 @path="//usr/lib64/libsndfile.so", @name="libsndfile.so">, #<Executable:0x005630ca8a5a38 @path="//usr/lib64/libsndfile.so.1", @name="libsndfile.so.1">, #<Executable:0x005630ca8a4cf0 @path="//usr/lib64/libsndfile.so.1.0.26", @name="libsndfile.so.1.0.26">, #<Executable:0x005630ca88bef8 @path="//usr/lib64/libsocks.so", @name="libsocks.so">, #<Executable:0x005630ca88a490 @path="//usr/lib64/libsocks.so.0", @name="libsocks.so.0">, #<Executable:0x005630ca888eb0 @path="//usr/lib64/libsocks.so.0.1.1", @name="libsocks.so.0.1.1">, #<Executable:0x005630ca8880a0 @path="//usr/lib64/libsoup-2.4.so", @name="libsoup-2.4.so">, #<Executable:0x005630ca74f0d0 @path="//usr/lib64/libsoup-2.4.so.1", @name="libsoup-2.4.so.1">, #<Executable:0x005630ca74b278 @path="//usr/lib64/libsoup-2.4.so.1.7.0", @name="libsoup-2.4.so.1.7.0">, #<Executable:0x005630ca748398 @path="//usr/lib64/libspeexdsp.so", @name="libspeexdsp.so">, #<Executable:0x005630ca7451e8 @path="//usr/lib64/libspeexdsp.so.1", @name="libspeexdsp.so.1">, #<Executable:0x005630ca73e960 @path="//usr/lib64/libspeexdsp.so.1.5.0", @name="libspeexdsp.so.1.5.0">, #<Executable:0x005630ca73a158 @path="//usr/lib64/libspeex.so", @name="libspeex.so">, #<Executable:0x005630ca736008 @path="//usr/lib64/libspeex.so.1", @name="libspeex.so.1">, #<Executable:0x005630ca732318 @path="//usr/lib64/libspeex.so.1.5.0", @name="libspeex.so.1.5.0">, #<Executable:0x005630ca72d8b8 @path="//usr/lib64/libsqlite3.so", @name="libsqlite3.so">, #<Executable:0x005630ca7261f8 @path="//usr/lib64/libsqlite3.so.0", @name="libsqlite3.so.0">, #<Executable:0x005630ca722e68 @path="//usr/lib64/libsqlite3.so.0.8.6", @name="libsqlite3.so.0.8.6">, #<Executable:0x005630ca71fce0 @path="//usr/lib64/libssh2.so", @name="libssh2.so">, #<Executable:0x005630ca71cce8 @path="//usr/lib64/libssh2.so.1", @name="libssh2.so.1">, #<Executable:0x005630ca718f80 @path="//usr/lib64/libssh2.so.1.0.1", @name="libssh2.so.1.0.1">, #<Executable:0x005630ca715e48 @path="//usr/lib64/libssl.so", @name="libssl.so">, #<Executable:0x005630ca7138c8 @path="//usr/lib64/libssl.so.1.0.0", @name="libssl.so.1.0.0">, #<Executable:0x005630ca711640 @path="//usr/lib64/libss.so", @name="libss.so">, #<Executable:0x005630ca7104c0 @path="//usr/lib64/libswmhack.so", @name="libswmhack.so">, #<Executable:0x005630ca70f4f8 @path="//usr/lib64/libswmhack.so.0", @name="libswmhack.so.0">, #<Executable:0x005630ca70e080 @path="//usr/lib64/libswmhack.so.0.0", @name="libswmhack.so.0.0">, #<Executable:0x005630ca70cfa0 @path="//usr/lib64/libswresample.so", @name="libswresample.so">, #<Executable:0x005630ca70e788 @path="//usr/lib64/libswresample.so.1", @name="libswresample.so.1">, #<Executable:0x005630ca70ae08 @path="//usr/lib64/libswresample.so.1.2.101", @name="libswresample.so.1.2.101">, #<Executable:0x005630ca70a098 @path="//usr/lib64/libswscale.so", @name="libswscale.so">, #<Executable:0x005630ca709378 @path="//usr/lib64/libswscale.so.3", @name="libswscale.so.3">, #<Executable:0x005630ca708388 @path="//usr/lib64/libswscale.so.3.1.101", @name="libswscale.so.3.1.101">, #<Entry:0x005630ca707500 @path="//usr/lib64/libsylph-0.la", @name="libsylph-0.la">, #<Executable:0x005630ca706470 @path="//usr/lib64/libsylph-0.so", @name="libsylph-0.so">, #<Executable:0x005630ca705278 @path="//usr/lib64/libsylph-0.so.1", @name="libsylph-0.so.1">, #<Executable:0x005630ca704148 @path="//usr/lib64/libsylph-0.so.1.2.0", @name="libsylph-0.so.1.2.0">, #<Entry:0x005630ca7032c0 @path="//usr/lib64/libsylpheed-plugin-0.la", @name="libsylpheed-plugin-0.la">, #<Executable:0x005630ca702168 @path="//usr/lib64/libsylpheed-plugin-0.so", @name="libsylpheed-plugin-0.so">, #<Executable:0x005630ca701240 @path="//usr/lib64/libsylpheed-plugin-0.so.1", @name="libsylpheed-plugin-0.so.1">, #<Executable:0x005630ca700340 @path="//usr/lib64/libsylpheed-plugin-0.so.1.2.0", @name="libsylpheed-plugin-0.so.1.2.0">, #<Executable:0x005630ca6ff350 @path="//usr/lib64/libsyslog-ng-3.7.so.0", @name="libsyslog-ng-3.7.so.0">, #<Executable:0x005630ca6fe2c0 @path="//usr/lib64/libsyslog-ng-3.7.so.0.0.0", @name="libsyslog-ng-3.7.so.0.0.0">, #<Executable:0x005630ca6fd140 @path="//usr/lib64/libsyslog-ng.so", @name="libsyslog-ng.so">, #<Executable:0x005630ca6fc290 @path="//usr/lib64/libtasn1.so", @name="libtasn1.so">, #<Executable:0x005630ca6fb430 @path="//usr/lib64/libtasn1.so.6", @name="libtasn1.so.6">, #<Executable:0x005630ca6fa698 @path="//usr/lib64/libtasn1.so.6.4.2", @name="libtasn1.so.6.4.2">, #<Executable:0x005630ca6f9310 @path="//usr/lib64/libtcl8.5.so", @name="libtcl8.5.so">, #<Executable:0x005630ca6f82a8 @path="//usr/lib64/libtcl.so", @name="libtcl.so">, #<Entry:0x005630ca6f7560 @path="//usr/lib64/libtclstub8.5.a", @name="libtclstub8.5.a">, #<Entry:0x005630ca6f6598 @path="//usr/lib64/libtclstub.a", @name="libtclstub.a">, #<Executable:0x005630ca6f5490 @path="//usr/lib64/libtheoradec.so", @name="libtheoradec.so">, #<Executable:0x005630ca6f4248 @path="//usr/lib64/libtheoradec.so.1", @name="libtheoradec.so.1">, #<Executable:0x005630caa80d30 @path="//usr/lib64/libtheoradec.so.1.1.4", @name="libtheoradec.so.1.1.4">, #<Executable:0x005630caa771e0 @path="//usr/lib64/libtheoraenc.so", @name="libtheoraenc.so">, #<Executable:0x005630caa757a0 @path="//usr/lib64/libtheoraenc.so.1", @name="libtheoraenc.so.1">, #<Executable:0x005630caa6fad0 @path="//usr/lib64/libtheoraenc.so.1.1.2", @name="libtheoraenc.so.1.1.2">, #<Executable:0x005630caa6dd48 @path="//usr/lib64/libtheora.so", @name="libtheora.so">, #<Executable:0x005630caa6cda8 @path="//usr/lib64/libtheora.so.0", @name="libtheora.so.0">, #<Executable:0x005630caa6d5c8 @path="//usr/lib64/libtheora.so.0.3.10", @name="libtheora.so.0.3.10">, #<Executable:0x005630caa65f58 @path="//usr/lib64/libthread_db.so", @name="libthread_db.so">, #<Executable:0x005630caa64c20 @path="//usr/lib64/libtiff.so", @name="libtiff.so">, #<Executable:0x005630caa57908 @path="//usr/lib64/libtiff.so.5", @name="libtiff.so.5">, #<Executable:0x005630caa56508 @path="//usr/lib64/libtiff.so.5.2.4", @name="libtiff.so.5.2.4">, #<Executable:0x005630caa4ff00 @path="//usr/lib64/libtiffxx.so", @name="libtiffxx.so">, #<Executable:0x005630caa4ea10 @path="//usr/lib64/libtiffxx.so.5", @name="libtiffxx.so.5">, #<Executable:0x005630caa4d480 @path="//usr/lib64/libtiffxx.so.5.2.4", @name="libtiffxx.so.5.2.4">, #<Executable:0x005630caa43318 @path="//usr/lib64/libtirpc.so", @name="libtirpc.so">, #<Executable:0x005630caa42530 @path="//usr/lib64/libTix8.4.3.so", @name="libTix8.4.3.so">, #<Executable:0x005630caa41720 @path="//usr/lib64/libtk8.5.so", @name="libtk8.5.so">, #<Executable:0x005630caa40280 @path="//usr/lib64/libtk.so", @name="libtk.so">, #<Entry:0x005630caa3f3a8 @path="//usr/lib64/libtkstub8.5.a", @name="libtkstub8.5.a">, #<Entry:0x005630caa3c3b0 @path="//usr/lib64/libtkstub.a", @name="libtkstub.a">, #<Entry:0x005630caa2aae8 @path="//usr/lib64/libToglstub2.0.a", @name="libToglstub2.0.a">, #<Executable:0x005630caa28e00 @path="//usr/lib64/libtommath.so", @name="libtommath.so">, #<Executable:0x005630caa27cd0 @path="//usr/lib64/libtommath.so.0", @name="libtommath.so.0">, #<Executable:0x005630caa26cb8 @path="//usr/lib64/libtommath.so.0.0.41", @name="libtommath.so.0.0.41">, #<Executable:0x005630caa25bb0 @path="//usr/lib64/libtomoyotools.so.3", @name="libtomoyotools.so.3">, #<Executable:0x005630caa24a58 @path="//usr/lib64/libtomoyotools.so.3.0.2", @name="libtomoyotools.so.3.0.2">, #<Executable:0x005630caa23a90 @path="//usr/lib64/libtorrent-rasterbar.so", @name="libtorrent-rasterbar.so">, #<Executable:0x005630caa22a78 @path="//usr/lib64/libtorrent-rasterbar.so.7", @name="libtorrent-rasterbar.so.7">, #<Executable:0x005630caa21a10 @path="//usr/lib64/libtorrent-rasterbar.so.7.0.0", @name="libtorrent-rasterbar.so.7.0.0">, #<Executable:0x005630caa207a0 @path="//usr/lib64/libts-1.0.so.0", @name="libts-1.0.so.0">, #<Executable:0x005630caa13028 @path="//usr/lib64/libts-1.0.so.0.1.1", @name="libts-1.0.so.0.1.1">, #<Entry:0x005630caa11958 @path="//usr/lib64/libts.la", @name="libts.la">, #<Executable:0x005630caa10800 @path="//usr/lib64/libts.so", @name="libts.so">, #<Executable:0x005630caa0b878 @path="//usr/lib64/libturbojpeg.so", @name="libturbojpeg.so">, #<Executable:0x005630caa0a6f8 @path="//usr/lib64/libturbojpeg.so.0", @name="libturbojpeg.so.0">, #<Executable:0x005630caa09690 @path="//usr/lib64/libturbojpeg.so.0.1.0", @name="libturbojpeg.so.0.1.0">, #<Executable:0x005630caa084c0 @path="//usr/lib64/libudev.so", @name="libudev.so">, #<Executable:0x005630caa03358 @path="//usr/lib64/libulockmgr.so", @name="libulockmgr.so">, #<Executable:0x005630caa02278 @path="//usr/lib64/libulockmgr.so.1", @name="libulockmgr.so.1">, #<Executable:0x005630caa01030 @path="//usr/lib64/libulockmgr.so.1.0.1", @name="libulockmgr.so.1.0.1">, #<Executable:0x005630caa02138 @path="//usr/lib64/libunrar.so", @name="libunrar.so">, #<Executable:0x005630ca9faf28 @path="//usr/lib64/libunrar.so.5", @name="libunrar.so.5">, #<Executable:0x005630ca9f9948 @path="//usr/lib64/libunrar.so.5.3.11", @name="libunrar.so.5.3.11">, #<Executable:0x005630ca9fb090 @path="//usr/lib64/libusb-1.0.so", @name="libusb-1.0.so">, #<Executable:0x005630ca9f1ae0 @path="//usr/lib64/libusb.so", @name="libusb.so">, #<Entry:0x005630ca9ef4e8 @path="//usr/lib64/libutil.a", @name="libutil.a">, #<Executable:0x005630ca9eca90 @path="//usr/lib64/libutil.so", @name="libutil.so">, #<Entry:0x005630ca9ebac8 @path="//usr/lib64/libuu.a", @name="libuu.a">, #<Executable:0x005630ca9ea970 @path="//usr/lib64/libuuid.so", @name="libuuid.so">, #<Executable:0x005630ca9e8580 @path="//usr/lib64/libv4l1.so", @name="libv4l1.so">, #<Executable:0x005630ca9e75b8 @path="//usr/lib64/libv4l1.so.0", @name="libv4l1.so.0">, #<Executable:0x005630ca9e5d08 @path="//usr/lib64/libv4l1.so.0.0.0", @name="libv4l1.so.0.0.0">, #<Executable:0x005630ca9e44a8 @path="//usr/lib64/libv4l2rds.so", @name="libv4l2rds.so">, #<Executable:0x005630ca9e3878 @path="//usr/lib64/libv4l2rds.so.0", @name="libv4l2rds.so.0">, #<Executable:0x005630ca9e2a68 @path="//usr/lib64/libv4l2rds.so.0.0.0", @name="libv4l2rds.so.0.0.0">, #<Executable:0x005630ca9e1be0 @path="//usr/lib64/libv4l2.so", @name="libv4l2.so">, #<Executable:0x005630ca9e0c40 @path="//usr/lib64/libv4l2.so.0", @name="libv4l2.so.0">, #<Executable:0x005630ca9cfd78 @path="//usr/lib64/libv4l2.so.0.0.0", @name="libv4l2.so.0.0.0">, #<Executable:0x005630ca9ce0b8 @path="//usr/lib64/libv4lconvert.so", @name="libv4lconvert.so">, #<Executable:0x005630ca9cd2a8 @path="//usr/lib64/libv4lconvert.so.0", @name="libv4lconvert.so.0">, #<Executable:0x005630ca9cc1c8 @path="//usr/lib64/libv4lconvert.so.0.0.0", @name="libv4lconvert.so.0.0.0">, #<Executable:0x005630ca9a95b0 @path="//usr/lib64/libvo-aacenc.so", @name="libvo-aacenc.so">, #<Executable:0x005630ca987fa0 @path="//usr/lib64/libvo-aacenc.so.0", @name="libvo-aacenc.so.0">, #<Executable:0x005630ca9869e8 @path="//usr/lib64/libvo-aacenc.so.0.0.4", @name="libvo-aacenc.so.0.0.4">, #<Executable:0x005630ca985340 @path="//usr/lib64/libvorbisenc.so", @name="libvorbisenc.so">, #<Executable:0x005630ca963dd0 @path="//usr/lib64/libvorbisenc.so.2", @name="libvorbisenc.so.2">, #<Executable:0x005630ca9629f8 @path="//usr/lib64/libvorbisenc.so.2.0.10", @name="libvorbisenc.so.2.0.10">, #<Executable:0x005630ca9615a8 @path="//usr/lib64/libvorbisfile.so", @name="libvorbisfile.so">, #<Executable:0x005630ca94ae98 @path="//usr/lib64/libvorbisfile.so.3", @name="libvorbisfile.so.3">, #<Executable:0x005630ca949890 @path="//usr/lib64/libvorbisfile.so.3.3.6", @name="libvorbisfile.so.3.3.6">, #<Executable:0x005630ca9482b0 @path="//usr/lib64/libvorbis.so", @name="libvorbis.so">, #<Executable:0x005630ca947108 @path="//usr/lib64/libvorbis.so.0", @name="libvorbis.so.0">, #<Executable:0x005630ca945600 @path="//usr/lib64/libvorbis.so.0.4.7", @name="libvorbis.so.0.4.7">, #<Executable:0x005630ca944868 @path="//usr/lib64/libwacom.so", @name="libwacom.so">, #<Executable:0x005630ca943cb0 @path="//usr/lib64/libwacom.so.2", @name="libwacom.so.2">, #<Executable:0x005630ca942fe0 @path="//usr/lib64/libwacom.so.2.4.5", @name="libwacom.so.2.4.5">, #<Executable:0x005630ca9423b0 @path="//usr/lib64/libwebkit2gtk-4.0.so", @name="libwebkit2gtk-4.0.so">, #<Executable:0x005630ca940df8 @path="//usr/lib64/libwebkit2gtk-4.0.so.37", @name="libwebkit2gtk-4.0.so.37">, #<Executable:0x005630ca93fd18 @path="//usr/lib64/libwebkit2gtk-4.0.so.37.11.12", @name="libwebkit2gtk-4.0.so.37.11.12">, #<Executable:0x005630ca93ef08 @path="//usr/lib64/libwebkitgtk-1.0.so", @name="libwebkitgtk-1.0.so">, #<Executable:0x005630ca93e1e8 @path="//usr/lib64/libwebkitgtk-1.0.so.0", @name="libwebkitgtk-1.0.so.0">, #<Executable:0x005630ca93d450 @path="//usr/lib64/libwebkitgtk-1.0.so.0.22.17", @name="libwebkitgtk-1.0.so.0.22.17">, #<Executable:0x005630ca93c618 @path="//usr/lib64/libwebpdecoder.so", @name="libwebpdecoder.so">, #<Executable:0x005630ca93b470 @path="//usr/lib64/libwebpdecoder.so.1", @name="libwebpdecoder.so.1">, #<Executable:0x005630ca939c38 @path="//usr/lib64/libwebpdecoder.so.1.0.0", @name="libwebpdecoder.so.1.0.0">, #<Executable:0x005630ca9389f0 @path="//usr/lib64/libwebpdemux.so", @name="libwebpdemux.so">, #<Executable:0x005630ca937c08 @path="//usr/lib64/libwebpdemux.so.1", @name="libwebpdemux.so.1">, #<Executable:0x005630ca936d30 @path="//usr/lib64/libwebpdemux.so.1.0.0", @name="libwebpdemux.so.1.0.0">, #<Executable:0x005630ca935fe8 @path="//usr/lib64/libwebpmux.so", @name="libwebpmux.so">, #<Executable:0x005630ca9351d8 @path="//usr/lib64/libwebpmux.so.1", @name="libwebpmux.so.1">, #<Executable:0x005630ca9342d8 @path="//usr/lib64/libwebpmux.so.1.0.0", @name="libwebpmux.so.1.0.0">, #<Executable:0x005630ca933298 @path="//usr/lib64/libwebp.so", @name="libwebp.so">, #<Executable:0x005630ca932280 @path="//usr/lib64/libwebp.so.5", @name="libwebp.so.5">, #<Executable:0x005630ca931470 @path="//usr/lib64/libwebp.so.5.0.0", @name="libwebp.so.5.0.0">, #<Executable:0x005630ca9307c8 @path="//usr/lib64/libwebrtc_audio_processing.so", @name="libwebrtc_audio_processing.so">, #<Executable:0x005630ca92fb70 @path="//usr/lib64/libwebrtc_audio_processing.so.0", @name="libwebrtc_audio_processing.so.0">, #<Executable:0x005630ca92eab8 @path="//usr/lib64/libwebrtc_audio_processing.so.0.0.0", @name="libwebrtc_audio_processing.so.0.0.0">, #<Executable:0x005630ca92dca8 @path="//usr/lib64/libwrap.so", @name="libwrap.so">, #<Executable:0x005630ca92ce98 @path="//usr/lib64/libwx_baseu-3.0.so", @name="libwx_baseu-3.0.so">, #<Executable:0x005630ca92c1f0 @path="//usr/lib64/libwx_baseu-3.0.so.0", @name="libwx_baseu-3.0.so.0">, #<Executable:0x005630ca8b7350 @path="//usr/lib64/libwx_baseu-3.0.so.0.2.0", @name="libwx_baseu-3.0.so.0.2.0">, #<Executable:0x005630ca8b6428 @path="//usr/lib64/libwx_baseu_net-3.0.so", @name="libwx_baseu_net-3.0.so">, #<Executable:0x005630ca8b54d8 @path="//usr/lib64/libwx_baseu_net-3.0.so.0", @name="libwx_baseu_net-3.0.so.0">, #<Executable:0x005630ca8b4718 @path="//usr/lib64/libwx_baseu_net-3.0.so.0.2.0", @name="libwx_baseu_net-3.0.so.0.2.0">, #<Executable:0x005630ca8b39f8 @path="//usr/lib64/libwx_baseu_xml-3.0.so", @name="libwx_baseu_xml-3.0.so">, #<Executable:0x005630ca8b2c10 @path="//usr/lib64/libwx_baseu_xml-3.0.so.0", @name="libwx_baseu_xml-3.0.so.0">, #<Executable:0x005630ca8b1d38 @path="//usr/lib64/libwx_baseu_xml-3.0.so.0.2.0", @name="libwx_baseu_xml-3.0.so.0.2.0">, #<Executable:0x005630ca8b0b18 @path="//usr/lib64/libwx_gtk2u_adv-3.0.so", @name="libwx_gtk2u_adv-3.0.so">, #<Executable:0x005630ca8afc18 @path="//usr/lib64/libwx_gtk2u_adv-3.0.so.0", @name="libwx_gtk2u_adv-3.0.so.0">, #<Executable:0x005630ca8aed90 @path="//usr/lib64/libwx_gtk2u_adv-3.0.so.0.2.0", @name="libwx_gtk2u_adv-3.0.so.0.2.0">, #<Executable:0x005630ca8add78 @path="//usr/lib64/libwx_gtk2u_aui-3.0.so", @name="libwx_gtk2u_aui-3.0.so">, #<Executable:0x005630ca8ace00 @path="//usr/lib64/libwx_gtk2u_aui-3.0.so.0", @name="libwx_gtk2u_aui-3.0.so.0">, #<Executable:0x005630ca8ac6d0 @path="//usr/lib64/libwx_gtk2u_aui-3.0.so.0.2.0", @name="libwx_gtk2u_aui-3.0.so.0.2.0">, #<Executable:0x005630ca91ce80 @path="//usr/lib64/libwx_gtk2u_core-3.0.so", @name="libwx_gtk2u_core-3.0.so">, #<Executable:0x005630ca91bf80 @path="//usr/lib64/libwx_gtk2u_core-3.0.so.0", @name="libwx_gtk2u_core-3.0.so.0">, #<Executable:0x005630ca91af90 @path="//usr/lib64/libwx_gtk2u_core-3.0.so.0.2.0", @name="libwx_gtk2u_core-3.0.so.0.2.0">, #<Executable:0x005630ca919de8 @path="//usr/lib64/libwx_gtk2u_gl-3.0.so", @name="libwx_gtk2u_gl-3.0.so">, #<Executable:0x005630ca918d08 @path="//usr/lib64/libwx_gtk2u_gl-3.0.so.0", @name="libwx_gtk2u_gl-3.0.so.0">, #<Executable:0x005630ca913ec0 @path="//usr/lib64/libwx_gtk2u_gl-3.0.so.0.2.0", @name="libwx_gtk2u_gl-3.0.so.0.2.0">, #<Executable:0x005630ca912e58 @path="//usr/lib64/libwx_gtk2u_html-3.0.so", @name="libwx_gtk2u_html-3.0.so">, #<Executable:0x005630ca9120e8 @path="//usr/lib64/libwx_gtk2u_html-3.0.so.0", @name="libwx_gtk2u_html-3.0.so.0">, #<Executable:0x005630ca910d38 @path="//usr/lib64/libwx_gtk2u_html-3.0.so.0.2.0", @name="libwx_gtk2u_html-3.0.so.0.2.0">, #<Executable:0x005630ca90bdb0 @path="//usr/lib64/libwx_gtk2u_propgrid-3.0.so", @name="libwx_gtk2u_propgrid-3.0.so">, #<Executable:0x005630ca90ad48 @path="//usr/lib64/libwx_gtk2u_propgrid-3.0.so.0", @name="libwx_gtk2u_propgrid-3.0.so.0">, #<Executable:0x005630ca909ee8 @path="//usr/lib64/libwx_gtk2u_propgrid-3.0.so.0.2.0", @name="libwx_gtk2u_propgrid-3.0.so.0.2.0">, #<Executable:0x005630ca9087c8 @path="//usr/lib64/libwx_gtk2u_qa-3.0.so", @name="libwx_gtk2u_qa-3.0.so">, #<Executable:0x005630ca9079b8 @path="//usr/lib64/libwx_gtk2u_qa-3.0.so.0", @name="libwx_gtk2u_qa-3.0.so.0">, #<Executable:0x005630ca9064c8 @path="//usr/lib64/libwx_gtk2u_qa-3.0.so.0.2.0", @name="libwx_gtk2u_qa-3.0.so.0.2.0">, #<Executable:0x005630ca904da8 @path="//usr/lib64/libwx_gtk2u_ribbon-3.0.so", @name="libwx_gtk2u_ribbon-3.0.so">, #<Executable:0x005630ca902d50 @path="//usr/lib64/libwx_gtk2u_ribbon-3.0.so.0", @name="libwx_gtk2u_ribbon-3.0.so.0">, #<Executable:0x005630ca8fff38 @path="//usr/lib64/libwx_gtk2u_ribbon-3.0.so.0.2.0", @name="libwx_gtk2u_ribbon-3.0.so.0.2.0">, #<Executable:0x005630ca8fedb8 @path="//usr/lib64/libwx_gtk2u_richtext-3.0.so", @name="libwx_gtk2u_richtext-3.0.so">, #<Executable:0x005630ca8fdc88 @path="//usr/lib64/libwx_gtk2u_richtext-3.0.so.0", @name="libwx_gtk2u_richtext-3.0.so.0">, #<Executable:0x005630ca8fc798 @path="//usr/lib64/libwx_gtk2u_richtext-3.0.so.0.2.0", @name="libwx_gtk2u_richtext-3.0.so.0.2.0">, #<Executable:0x005630ca8fb5a0 @path="//usr/lib64/libwx_gtk2u_stc-3.0.so", @name="libwx_gtk2u_stc-3.0.so">, #<Executable:0x005630ca8fa290 @path="//usr/lib64/libwx_gtk2u_stc-3.0.so.0", @name="libwx_gtk2u_stc-3.0.so.0">, #<Executable:0x005630ca8f8d00 @path="//usr/lib64/libwx_gtk2u_stc-3.0.so.0.2.0", @name="libwx_gtk2u_stc-3.0.so.0.2.0">, #<Executable:0x005630ca8f7ae0 @path="//usr/lib64/libwx_gtk2u_xrc-3.0.so", @name="libwx_gtk2u_xrc-3.0.so">, #<Executable:0x005630ca8f67d0 @path="//usr/lib64/libwx_gtk2u_xrc-3.0.so.0", @name="libwx_gtk2u_xrc-3.0.so.0">, #<Executable:0x005630ca8f5380 @path="//usr/lib64/libwx_gtk2u_xrc-3.0.so.0.2.0", @name="libwx_gtk2u_xrc-3.0.so.0.2.0">, #<Executable:0x005630ca8f4318 @path="//usr/lib64/libX11.so", @name="libX11.so">, #<Executable:0x005630ca8bf690 @path="//usr/lib64/libX11.so.6", @name="libX11.so.6">, #<Executable:0x005630ca8bcd50 @path="//usr/lib64/libX11.so.6.3.0", @name="libX11.so.6.3.0">, #<Executable:0x005630ca8bb3b0 @path="//usr/lib64/libX11-xcb.so", @name="libX11-xcb.so">, #<Executable:0x005630ca8ba4d8 @path="//usr/lib64/libX11-xcb.so.1", @name="libX11-xcb.so.1">, #<Executable:0x005630ca8b9510 @path="//usr/lib64/libX11-xcb.so.1.0.0", @name="libX11-xcb.so.1.0.0">, #<Executable:0x005630ca8b8548 @path="//usr/lib64/libx264.so", @name="libx264.so">, #<Executable:0x005630ca8ab7d0 @path="//usr/lib64/libx264.so.142", @name="libx264.so.142">, #<Entry:0x005630ca8aa218 @path="//usr/lib64/libx265.a", @name="libx265.a">, #<Executable:0x005630ca8a8df0 @path="//usr/lib64/libx265.so", @name="libx265.so">, #<Executable:0x005630ca8ab988 @path="//usr/lib64/libx265.so.68", @name="libx265.so.68">, #<Executable:0x005630ca8a7158 @path="//usr/lib64/libXau.so", @name="libXau.so">, #<Executable:0x005630ca8a6410 @path="//usr/lib64/libXau.so.6", @name="libXau.so.6">, #<Executable:0x005630ca8a5498 @path="//usr/lib64/libXau.so.6.0.0", @name="libXau.so.6.0.0">, #<Executable:0x005630ca8a4728 @path="//usr/lib64/libXaw7.so", @name="libXaw7.so">, #<Executable:0x005630ca88ae18 @path="//usr/lib64/libXaw7.so.7", @name="libXaw7.so.7">, #<Executable:0x005630ca889928 @path="//usr/lib64/libXaw7.so.7.0.0", @name="libXaw7.so.7.0.0">, #<Executable:0x005630ca888460 @path="//usr/lib64/libXaw.so", @name="libXaw.so">, #<Executable:0x005630ca7500e8 @path="//usr/lib64/libXaw.so.7", @name="libXaw.so.7">, #<Executable:0x005630ca74fe18 @path="//usr/lib64/libxcb-composite.so", @name="libxcb-composite.so">, #<Executable:0x005630ca748a28 @path="//usr/lib64/libxcb-composite.so.0", @name="libxcb-composite.so.0">, #<Executable:0x005630ca745300 @path="//usr/lib64/libxcb-composite.so.0.0.0", @name="libxcb-composite.so.0.0.0">, #<Executable:0x005630ca73e000 @path="//usr/lib64/libxcb-cursor.so", @name="libxcb-cursor.so">, #<Executable:0x005630ca739398 @path="//usr/lib64/libxcb-cursor.so.0", @name="libxcb-cursor.so.0">, #<Executable:0x005630ca735798 @path="//usr/lib64/libxcb-cursor.so.0.0.0", @name="libxcb-cursor.so.0.0.0">, #<Executable:0x005630ca730c70 @path="//usr/lib64/libxcb-damage.so", @name="libxcb-damage.so">, #<Executable:0x005630ca72c1c0 @path="//usr/lib64/libxcb-damage.so.0", @name="libxcb-damage.so.0">, #<Executable:0x005630ca724038 @path="//usr/lib64/libxcb-damage.so.0.0.0", @name="libxcb-damage.so.0.0.0">, #<Executable:0x005630ca722300 @path="//usr/lib64/libxcb-dpms.so", @name="libxcb-dpms.so">, #<Executable:0x005630ca71dfd0 @path="//usr/lib64/libxcb-dpms.so.0", @name="libxcb-dpms.so.0">, #<Executable:0x005630ca71a470 @path="//usr/lib64/libxcb-dpms.so.0.0.0", @name="libxcb-dpms.so.0.0.0">, #<Executable:0x005630ca716960 @path="//usr/lib64/libxcb-dri2.so", @name="libxcb-dri2.so">, #<Executable:0x005630ca714048 @path="//usr/lib64/libxcb-dri2.so.0", @name="libxcb-dri2.so.0">, #<Executable:0x005630ca711ac8 @path="//usr/lib64/libxcb-dri2.so.0.0.0", @name="libxcb-dri2.so.0.0.0">, #<Executable:0x005630ca710740 @path="//usr/lib64/libxcb-dri3.so", @name="libxcb-dri3.so">, #<Executable:0x005630ca70f570 @path="//usr/lib64/libxcb-dri3.so.0", @name="libxcb-dri3.so.0">, #<Executable:0x005630ca70df90 @path="//usr/lib64/libxcb-dri3.so.0.0.0", @name="libxcb-dri3.so.0.0.0">, #<Executable:0x005630ca70cc30 @path="//usr/lib64/libxcb-ewmh.so", @name="libxcb-ewmh.so">, #<Executable:0x005630ca70bcb8 @path="//usr/lib64/libxcb-ewmh.so.2", @name="libxcb-ewmh.so.2">, #<Executable:0x005630ca70ab10 @path="//usr/lib64/libxcb-ewmh.so.2.0.0", @name="libxcb-ewmh.so.2.0.0">, #<Executable:0x005630ca709c60 @path="//usr/lib64/libxcb-glx.so", @name="libxcb-glx.so">, #<Executable:0x005630ca708d88 @path="//usr/lib64/libxcb-glx.so.0", @name="libxcb-glx.so.0">, #<Executable:0x005630ca707a50 @path="//usr/lib64/libxcb-glx.so.0.0.0", @name="libxcb-glx.so.0.0.0">, #<Executable:0x005630ca706a60 @path="//usr/lib64/libxcb-icccm.so", @name="libxcb-icccm.so">, #<Executable:0x005630ca705868 @path="//usr/lib64/libxcb-icccm.so.4", @name="libxcb-icccm.so.4">, #<Executable:0x005630ca704670 @path="//usr/lib64/libxcb-icccm.so.4.0.0", @name="libxcb-icccm.so.4.0.0">, #<Executable:0x005630ca7034c8 @path="//usr/lib64/libxcb-image.so", @name="libxcb-image.so">, #<Executable:0x005630ca7022a8 @path="//usr/lib64/libxcb-image.so.0", @name="libxcb-image.so.0">, #<Executable:0x005630ca701218 @path="//usr/lib64/libxcb-image.so.0.0.0", @name="libxcb-image.so.0.0.0">, #<Executable:0x005630ca700138 @path="//usr/lib64/libxcb-keysyms.so", @name="libxcb-keysyms.so">, #<Executable:0x005630ca6ff170 @path="//usr/lib64/libxcb-keysyms.so.1", @name="libxcb-keysyms.so.1">, #<Executable:0x005630ca6fded8 @path="//usr/lib64/libxcb-keysyms.so.1.0.0", @name="libxcb-keysyms.so.1.0.0">, #<Executable:0x005630ca6fcdf8 @path="//usr/lib64/libxcb-present.so", @name="libxcb-present.so">, #<Executable:0x005630ca6fbea8 @path="//usr/lib64/libxcb-present.so.0", @name="libxcb-present.so.0">, #<Executable:0x005630ca6fad78 @path="//usr/lib64/libxcb-present.so.0.0.0", @name="libxcb-present.so.0.0.0">, #<Executable:0x005630ca6f9bd0 @path="//usr/lib64/libxcb-randr.so", @name="libxcb-randr.so">, #<Executable:0x005630ca6f8988 @path="//usr/lib64/libxcb-randr.so.0", @name="libxcb-randr.so.0">, #<Executable:0x005630ca6f7998 @path="//usr/lib64/libxcb-randr.so.0.1.0", @name="libxcb-randr.so.0.1.0">, #<Executable:0x005630ca6f6818 @path="//usr/lib64/libxcb-record.so", @name="libxcb-record.so">, #<Executable:0x005630ca6f5850 @path="//usr/lib64/libxcb-record.so.0", @name="libxcb-record.so.0">, #<Executable:0x005630ca6f4590 @path="//usr/lib64/libxcb-record.so.0.0.0", @name="libxcb-record.so.0.0.0">, #<Executable:0x005630caa812f8 @path="//usr/lib64/libxcb-render.so", @name="libxcb-render.so">, #<Executable:0x005630caa773e8 @path="//usr/lib64/libxcb-render.so.0", @name="libxcb-render.so.0">, #<Executable:0x005630caa75570 @path="//usr/lib64/libxcb-render.so.0.0.0", @name="libxcb-render.so.0.0.0">, #<Executable:0x005630caa6f7d8 @path="//usr/lib64/libxcb-render-util.so", @name="libxcb-render-util.so">, #<Executable:0x005630caa6d910 @path="//usr/lib64/libxcb-render-util.so.0", @name="libxcb-render-util.so.0">, #<Executable:0x005630caa6c998 @path="//usr/lib64/libxcb-render-util.so.0.0.0", @name="libxcb-render-util.so.0.0.0">, #<Executable:0x005630caa66a48 @path="//usr/lib64/libxcb-res.so", @name="libxcb-res.so">, #<Executable:0x005630caa65800 @path="//usr/lib64/libxcb-res.so.0", @name="libxcb-res.so.0">, #<Executable:0x005630caa644a0 @path="//usr/lib64/libxcb-res.so.0.0.0", @name="libxcb-res.so.0.0.0">, #<Executable:0x005630caa56bc0 @path="//usr/lib64/libxcb-screensaver.so", @name="libxcb-screensaver.so">, #<Executable:0x005630caa55090 @path="//usr/lib64/libxcb-screensaver.so.0", @name="libxcb-screensaver.so.0">, #<Executable:0x005630caa4edd0 @path="//usr/lib64/libxcb-screensaver.so.0.0.0", @name="libxcb-screensaver.so.0.0.0">, #<Executable:0x005630caa4dc28 @path="//usr/lib64/libxcb-shape.so", @name="libxcb-shape.so">, #<Executable:0x005630caa436d8 @path="//usr/lib64/libxcb-shape.so.0", @name="libxcb-shape.so.0">, #<Executable:0x005630caa42760 @path="//usr/lib64/libxcb-shape.so.0.0.0", @name="libxcb-shape.so.0.0.0">, #<Executable:0x005630caa41770 @path="//usr/lib64/libxcb-shm.so", @name="libxcb-shm.so">, #<Executable:0x005630caa400f0 @path="//usr/lib64/libxcb-shm.so.0", @name="libxcb-shm.so.0">, #<Executable:0x005630caa3ef48 @path="//usr/lib64/libxcb-shm.so.0.0.0", @name="libxcb-shm.so.0.0.0">, #<Executable:0x005630caa3c040 @path="//usr/lib64/libxcb.so", @name="libxcb.so">, #<Executable:0x005630caa2a430 @path="//usr/lib64/libxcb.so.1", @name="libxcb.so.1">, #<Executable:0x005630caa287c0 @path="//usr/lib64/libxcb.so.1.1.0", @name="libxcb.so.1.1.0">, #<Executable:0x005630caa27820 @path="//usr/lib64/libxcb-sync.so", @name="libxcb-sync.so">, #<Executable:0x005630caa26150 @path="//usr/lib64/libxcb-sync.so.1", @name="libxcb-sync.so.1">, #<Executable:0x005630caa25098 @path="//usr/lib64/libxcb-sync.so.1.0.0", @name="libxcb-sync.so.1.0.0">, #<Executable:0x005630caa24ee0 @path="//usr/lib64/libxcb-util.so", @name="libxcb-util.so">, #<Executable:0x005630caa22ed8 @path="//usr/lib64/libxcb-util.so.1", @name="libxcb-util.so.1">, #<Executable:0x005630caa21cb8 @path="//usr/lib64/libxcb-util.so.1.0.0", @name="libxcb-util.so.1.0.0">, #<Executable:0x005630caa20b88 @path="//usr/lib64/libxcb-xf86dri.so", @name="libxcb-xf86dri.so">, #<Executable:0x005630caa13168 @path="//usr/lib64/libxcb-xf86dri.so.0", @name="libxcb-xf86dri.so.0">, #<Executable:0x005630caa117a0 @path="//usr/lib64/libxcb-xf86dri.so.0.0.0", @name="libxcb-xf86dri.so.0.0.0">, #<Executable:0x005630caa10558 @path="//usr/lib64/libxcb-xfixes.so", @name="libxcb-xfixes.so">, #<Executable:0x005630caa0b3c8 @path="//usr/lib64/libxcb-xfixes.so.0", @name="libxcb-xfixes.so.0">, #<Executable:0x005630caa0a388 @path="//usr/lib64/libxcb-xfixes.so.0.0.0", @name="libxcb-xfixes.so.0.0.0">, #<Executable:0x005630caa08f88 @path="//usr/lib64/libxcb-xinerama.so", @name="libxcb-xinerama.so">, #<Executable:0x005630caa03da8 @path="//usr/lib64/libxcb-xinerama.so.0", @name="libxcb-xinerama.so.0">, #<Executable:0x005630caa02a98 @path="//usr/lib64/libxcb-xinerama.so.0.0.0", @name="libxcb-xinerama.so.0.0.0">, #<Executable:0x005630caa016c0 @path="//usr/lib64/libxcb-xinput.so", @name="libxcb-xinput.so">, #<Executable:0x005630caa004c8 @path="//usr/lib64/libxcb-xinput.so.0", @name="libxcb-xinput.so.0">, #<Executable:0x005630ca9fb518 @path="//usr/lib64/libxcb-xinput.so.0.1.0", @name="libxcb-xinput.so.0.1.0">, #<Executable:0x005630ca9fa1e0 @path="//usr/lib64/libxcb-xtest.so", @name="libxcb-xtest.so">, #<Executable:0x005630ca9f84a8 @path="//usr/lib64/libxcb-xtest.so.0", @name="libxcb-xtest.so.0">, #<Executable:0x005630ca9f1d60 @path="//usr/lib64/libxcb-xtest.so.0.0.0", @name="libxcb-xtest.so.0.0.0">, #<Executable:0x005630ca9ef588 @path="//usr/lib64/libxcb-xvmc.so", @name="libxcb-xvmc.so">, #<Executable:0x005630ca9ec9f0 @path="//usr/lib64/libxcb-xvmc.so.0", @name="libxcb-xvmc.so.0">, #<Executable:0x005630ca9eb898 @path="//usr/lib64/libxcb-xvmc.so.0.0.0", @name="libxcb-xvmc.so.0.0.0">, #<Executable:0x005630ca9ea6a0 @path="//usr/lib64/libxcb-xv.so", @name="libxcb-xv.so">, #<Executable:0x005630ca9e92f0 @path="//usr/lib64/libxcb-xv.so.0", @name="libxcb-xv.so.0">, #<Executable:0x005630ca9ead80 @path="//usr/lib64/libxcb-xv.so.0.0.0", @name="libxcb-xv.so.0.0.0">, #<Executable:0x005630ca9e6a78 @path="//usr/lib64/libXcomposite.so", @name="libXcomposite.so">, #<Executable:0x005630ca9e5268 @path="//usr/lib64/libXcomposite.so.1", @name="libXcomposite.so.1">, #<Executable:0x005630ca9e3eb8 @path="//usr/lib64/libXcomposite.so.1.0.0", @name="libXcomposite.so.1.0.0">, #<Executable:0x005630ca9e3008 @path="//usr/lib64/libXcursor.so", @name="libXcursor.so">, #<Executable:0x005630ca9e1ff0 @path="//usr/lib64/libXcursor.so.1", @name="libXcursor.so.1">, #<Executable:0x005630ca9e1050 @path="//usr/lib64/libXcursor.so.1.0.2", @name="libXcursor.so.1.0.2">, #<Executable:0x005630ca9e0150 @path="//usr/lib64/libXdamage.so", @name="libXdamage.so">, #<Executable:0x005630ca9ce248 @path="//usr/lib64/libXdamage.so.1", @name="libXdamage.so.1">, #<Executable:0x005630ca9cd258 @path="//usr/lib64/libXdamage.so.1.1.0", @name="libXdamage.so.1.1.0">, #<Executable:0x005630ca9cd6b8 @path="//usr/lib64/libXdmcp.so", @name="libXdmcp.so">, #<Executable:0x005630ca9a9308 @path="//usr/lib64/libXdmcp.so.6", @name="libXdmcp.so.6">, #<Executable:0x005630ca987a78 @path="//usr/lib64/libXdmcp.so.6.0.0", @name="libXdmcp.so.6.0.0">, #<Executable:0x005630ca986380 @path="//usr/lib64/libXext.so", @name="libXext.so">, #<Executable:0x005630ca9849e0 @path="//usr/lib64/libXext.so.6", @name="libXext.so.6">, #<Executable:0x005630ca963588 @path="//usr/lib64/libXext.so.6.4.0", @name="libXext.so.6.4.0">, #<Entry:0x005630ca961f30 @path="//usr/lib64/libxf86config.a", @name="libxf86config.a">, #<Executable:0x005630ca960900 @path="//usr/lib64/libXfixes.so", @name="libXfixes.so">, #<Executable:0x005630ca949fc0 @path="//usr/lib64/libXfixes.so.3", @name="libXfixes.so.3">, #<Executable:0x005630ca9489e0 @path="//usr/lib64/libXfixes.so.3.1.0", @name="libXfixes.so.3.1.0">, #<Executable:0x005630ca947400 @path="//usr/lib64/libXfont.so", @name="libXfont.so">, #<Executable:0x005630ca945858 @path="//usr/lib64/libXfont.so.1", @name="libXfont.so.1">, #<Executable:0x005630ca9448e0 @path="//usr/lib64/libXfont.so.1.4.1", @name="libXfont.so.1.4.1">, #<Executable:0x005630ca943bc0 @path="//usr/lib64/libXft.so", @name="libXft.so">, #<Executable:0x005630ca942e78 @path="//usr/lib64/libXft.so.2", @name="libXft.so.2">, #<Executable:0x005630ca941eb0 @path="//usr/lib64/libXft.so.2.3.2", @name="libXft.so.2.3.2">, #<Executable:0x005630ca9408a8 @path="//usr/lib64/libXinerama.so", @name="libXinerama.so">, #<Executable:0x005630ca93f890 @path="//usr/lib64/libXinerama.so.1", @name="libXinerama.so.1">, #<Executable:0x005630ca93e968 @path="//usr/lib64/libXinerama.so.1.0.0", @name="libXinerama.so.1.0.0">, #<Executable:0x005630ca93db08 @path="//usr/lib64/libXi.so", @name="libXi.so">, #<Executable:0x005630ca93cc80 @path="//usr/lib64/libXi.so.6", @name="libXi.so.6">, #<Executable:0x005630ca93bce0 @path="//usr/lib64/libXi.so.6.1.0", @name="libXi.so.6.1.0">, #<Executable:0x005630ca93a520 @path="//usr/lib64/libxkbfile.so", @name="libxkbfile.so">, #<Executable:0x005630ca938e00 @path="//usr/lib64/libxkbfile.so.1", @name="libxkbfile.so.1">, #<Executable:0x005630ca937de8 @path="//usr/lib64/libxkbfile.so.1.0.2", @name="libxkbfile.so.1.0.2">, #<Executable:0x005630ca936dd0 @path="//usr/lib64/libxml2.so", @name="libxml2.so">, #<Executable:0x005630ca935f20 @path="//usr/lib64/libxml2.so.2", @name="libxml2.so.2">, #<Executable:0x005630ca934fa8 @path="//usr/lib64/libxml2.so.2.9.4", @name="libxml2.so.2.9.4">, #<Executable:0x005630ca934080 @path="//usr/lib64/libXmu.so", @name="libXmu.so">, #<Executable:0x005630ca932d70 @path="//usr/lib64/libXmu.so.6", @name="libXmu.so.6">, #<Executable:0x005630ca931df8 @path="//usr/lib64/libXmu.so.6.2.0", @name="libXmu.so.6.2.0">, #<Executable:0x005630ca930e80 @path="//usr/lib64/libXmuu.so", @name="libXmuu.so">, #<Executable:0x005630ca930160 @path="//usr/lib64/libXmuu.so.1", @name="libXmuu.so.1">, #<Executable:0x005630ca92f210 @path="//usr/lib64/libXmuu.so.1.0.0", @name="libXmuu.so.1.0.0">, #<Executable:0x005630ca92e2e8 @path="//usr/lib64/libXpm.so", @name="libXpm.so">, #<Executable:0x005630ca92d3c0 @path="//usr/lib64/libXpm.so.4", @name="libXpm.so.4">, #<Executable:0x005630ca92c6a0 @path="//usr/lib64/libXpm.so.4.11.0", @name="libXpm.so.4.11.0">, #<Executable:0x005630ca8b74e0 @path="//usr/lib64/libXrandr.so", @name="libXrandr.so">, #<Executable:0x005630ca8b65e0 @path="//usr/lib64/libXrandr.so.2", @name="libXrandr.so.2">, #<Executable:0x005630ca8b54b0 @path="//usr/lib64/libXrandr.so.2.2.0", @name="libXrandr.so.2.2.0">, #<Executable:0x005630ca8b45d8 @path="//usr/lib64/libXrender.so", @name="libXrender.so">, #<Executable:0x005630ca8b3778 @path="//usr/lib64/libXrender.so.1", @name="libXrender.so.1">, #<Executable:0x005630ca8b2788 @path="//usr/lib64/libXrender.so.1.3.0", @name="libXrender.so.1.3.0">, #<Executable:0x005630ca8b1518 @path="//usr/lib64/libxshmfence.so", @name="libxshmfence.so">, #<Executable:0x005630ca8b05f0 @path="//usr/lib64/libxshmfence.so.1", @name="libxshmfence.so.1">, #<Executable:0x005630ca8af5d8 @path="//usr/lib64/libxshmfence.so.1.0.0", @name="libxshmfence.so.1.0.0">, #<Executable:0x005630ca8ad5d0 @path="//usr/lib64/libxslt.so", @name="libxslt.so">, #<Executable:0x005630ca8ac658 @path="//usr/lib64/libxslt.so.1", @name="libxslt.so.1">, #<Executable:0x005630ca91e618 @path="//usr/lib64/libxslt.so.1.1.29", @name="libxslt.so.1.1.29">, #<Executable:0x005630ca91c138 @path="//usr/lib64/libxtables.so", @name="libxtables.so">, #<Executable:0x005630ca91b170 @path="//usr/lib64/libXt.so", @name="libXt.so">, #<Executable:0x005630ca919f28 @path="//usr/lib64/libXt.so.6", @name="libXt.so.6">, #<Executable:0x005630ca918c68 @path="//usr/lib64/libXt.so.6.0.0", @name="libXt.so.6.0.0">, #<Executable:0x005630ca913da8 @path="//usr/lib64/libXtst.so", @name="libXtst.so">, #<Executable:0x005630ca912bd8 @path="//usr/lib64/libXtst.so.6", @name="libXtst.so.6">, #<Executable:0x005630ca911df0 @path="//usr/lib64/libXtst.so.6.1.0", @name="libXtst.so.6.1.0">, #<Executable:0x005630ca910748 @path="//usr/lib64/libXv.so", @name="libXv.so">, #<Executable:0x005630ca90b658 @path="//usr/lib64/libXv.so.1", @name="libXv.so.1">, #<Executable:0x005630ca90a640 @path="//usr/lib64/libXv.so.1.0.0", @name="libXv.so.1.0.0">, #<Executable:0x005630ca9096c8 @path="//usr/lib64/libXxf86vm.so", @name="libXxf86vm.so">, #<Executable:0x005630ca907f08 @path="//usr/lib64/libXxf86vm.so.1", @name="libXxf86vm.so.1">, #<Executable:0x005630ca906ae0 @path="//usr/lib64/libXxf86vm.so.1.0.0", @name="libXxf86vm.so.1.0.0">, #<Executable:0x005630ca905190 @path="//usr/lib64/libyaml-0.so.2", @name="libyaml-0.so.2">, #<Executable:0x005630ca903020 @path="//usr/lib64/libyaml-0.so.2.0.4", @name="libyaml-0.so.2.0.4">, #<Executable:0x005630ca903200 @path="//usr/lib64/libyaml.so", @name="libyaml.so">, #<Entry:0x005630ca8fed18 @path="//usr/lib64/libyasm.a", @name="libyasm.a">, #<Executable:0x005630ca8fdb48 @path="//usr/lib64/libzip.so", @name="libzip.so">, #<Executable:0x005630ca8fc4a0 @path="//usr/lib64/libzip.so.4", @name="libzip.so.4">, #<Executable:0x005630ca8fb050 @path="//usr/lib64/libzip.so.4.0.0", @name="libzip.so.4.0.0">, #<Executable:0x005630ca8f97a0 @path="//usr/lib64/libz.so", @name="libz.so">, #<Executable:0x005630ca8f7310 @path="//usr/lib64/LLVMHello.so", @name="LLVMHello.so">, #<Entry:0x005630ca8be100 @path="//usr/lib64/Mcrt1.o", @name="Mcrt1.o">, #<Executable:0x005630ca8883c0 @path="//usr/lib64/preloadable_libintl.so", @name="preloadable_libintl.so">, #<Entry:0x005630ca7378e0 @path="//usr/lib64/Scrt1.o", @name="Scrt1.o">, #<Executable:0x005630ca7346b8 @path="//usr/lib64/sendmail", @name="sendmail">, #<Entry:0x005630ca712748 @path="//usr/lib64/tclConfig.sh", @name="tclConfig.sh">, #<Executable:0x005630ca710b00 @path="//usr/lib64/terminfo", @name="terminfo">, #<Entry:0x005630ca70bee8 @path="//usr/lib64/tkConfig.sh", @name="tkConfig.sh">, #<Executable:0x005630ca701ce0 @path="//usr/lib64/v4l1compat.so", @name="v4l1compat.so">, #<Executable:0x005630ca700bd8 @path="//usr/lib64/v4l2convert.so", @name="v4l2convert.so">, #<Entry:0x005630ca6fd4d8 @path="//usr/lib64/xml2Conf.sh", @name="xml2Conf.sh">, #<Entry:0x005630ca6fb408 @path="//usr/lib64/xsltConf.sh", @name="xsltConf.sh">], :down=>[#<Directory:0x005630ca919f78 @path="//usr/lib64/alsa-lib", @name="alsa-lib">, #<Directory:0x005630ca9195a0 @path="//usr/lib64/audit", @name="audit">, #<Directory:0x005630ca918ba0 @path="//usr/lib64/babl-0.1", @name="babl-0.1">, #<Directory:0x005630ca9181f0 @path="//usr/lib64/bcc", @name="bcc">, #<Directory:0x005630ca9138f8 @path="//usr/lib64/binutils", @name="binutils">, #<Directory:0x005630ca912f20 @path="//usr/lib64/blt2.4", @name="blt2.4">, #<Directory:0x005630ca9125e8 @path="//usr/lib64/bluetooth", @name="bluetooth">, #<Directory:0x005630ca910dd8 @path="//usr/lib64/cairo", @name="cairo">, #<Directory:0x005630ca9104a0 @path="//usr/lib64/cmake", @name="cmake">, #<Directory:0x005630ca90ba90 @path="//usr/lib64/colord-plugins", @name="colord-plugins">, #<Directory:0x005630ca90b130 @path="//usr/lib64/colord-sensors", @name="colord-sensors">, #<Directory:0x005630ca909e48 @path="//usr/lib64/ConsoleKit", @name="ConsoleKit">, #<Directory:0x005630ca9068b0 @path="//usr/lib64/crda", @name="crda">, #<Directory:0x005630ca901248 @path="//usr/lib64/dbus-1.0", @name="dbus-1.0">, #<Directory:0x005630ca8ffd58 @path="//usr/lib64/dracut", @name="dracut">, #<Directory:0x005630ca8ff150 @path="//usr/lib64/dri", @name="dri">, #<Directory:0x005630ca8fdc10 @path="//usr/lib64/elfutils", @name="elfutils">, #<Directory:0x005630ca8fcd88 @path="//usr/lib64/engines", @name="engines">, #<Directory:0x005630ca8fc1f8 @path="//usr/lib64/gawk", @name="gawk">, #<Directory:0x005630ca8fb5f0 @path="//usr/lib64/gcc", @name="gcc">, #<Directory:0x005630ca8faa60 @path="//usr/lib64/gconv", @name="gconv">, #<Directory:0x005630ca8f9048 @path="//usr/lib64/gdk-pixbuf-2.0", @name="gdk-pixbuf-2.0">, #<Directory:0x005630ca8f83f0 @path="//usr/lib64/gegl-0.2", @name="gegl-0.2">, #<Directory:0x005630ca8f7798 @path="//usr/lib64/gettext", @name="gettext">, #<Directory:0x005630ca8f6c80 @path="//usr/lib64/ghostscript", @name="ghostscript">, #<Directory:0x005630ca8f5c68 @path="//usr/lib64/gimp", @name="gimp">, #<Directory:0x005630ca8f50d8 @path="//usr/lib64/gio", @name="gio">, #<Directory:0x005630ca8f4520 @path="//usr/lib64/girepository-1.0", @name="girepository-1.0">, #<Directory:0x005630ca8bff28 @path="//usr/lib64/glib-2.0", @name="glib-2.0">, #<Directory:0x005630ca8bf528 @path="//usr/lib64/gnome-settings-daemon-3.0", @name="gnome-settings-daemon-3.0">, #<Directory:0x005630ca8bdca0 @path="//usr/lib64/gobject-introspection", @name="gobject-introspection">, #<Directory:0x005630ca8bbe00 @path="//usr/lib64/gpac", @name="gpac">, #<Directory:0x005630ca8bb310 @path="//usr/lib64/groff", @name="groff">, #<Directory:0x005630ca8ba938 @path="//usr/lib64/grub", @name="grub">, #<Directory:0x005630ca8b9f38 @path="//usr/lib64/gtk-2.0", @name="gtk-2.0">, #<Directory:0x005630ca8b9538 @path="//usr/lib64/gtk-3.0", @name="gtk-3.0">, #<Directory:0x005630ca8b8a48 @path="//usr/lib64/hamlib", @name="hamlib">, #<Directory:0x005630ca8b80c0 @path="//usr/lib64/help2man", @name="help2man">, #<Directory:0x005630ca8ab9d8 @path="//usr/lib64/icu", @name="icu">, #<Directory:0x005630ca8ab078 @path="//usr/lib64/ImageMagick-6.9.4", @name="ImageMagick-6.9.4">, #<Directory:0x005630ca8a9f70 @path="//usr/lib64/imlib2", @name="imlib2">, #<Directory:0x005630ca939c60 @path="//usr/lib64/libcanberra-0.30", @name="libcanberra-0.30">, #<Directory:0x005630caa3e368 @path="//usr/lib64/libffi-3.2.1", @name="libffi-3.2.1">, #<Directory:0x005630ca8b3a48 @path="//usr/lib64/libnfsidmap", @name="libnfsidmap">, #<Directory:0x005630ca9e9930 @path="//usr/lib64/libv4l", @name="libv4l">, #<Directory:0x005630ca8ae458 @path="//usr/lib64/libxslt-plugins", @name="libxslt-plugins">, #<Directory:0x005630ca8f86e8 @path="//usr/lib64/linux-boot-probes", @name="linux-boot-probes">, #<Directory:0x005630ca8f5dd0 @path="//usr/lib64/locale", @name="locale">, #<Directory:0x005630ca8f4d68 @path="//usr/lib64/lua", @name="lua">, #<Directory:0x005630ca8bfd48 @path="//usr/lib64/man-db", @name="man-db">, #<Directory:0x005630ca8bb9a0 @path="//usr/lib64/mediastreamer", @name="mediastreamer">, #<Directory:0x005630ca8bab18 @path="//usr/lib64/mesa", @name="mesa">, #<Directory:0x005630ca8b9998 @path="//usr/lib64/misc", @name="misc">, #<Directory:0x005630ca8b88b8 @path="//usr/lib64/mpg123", @name="mpg123">, #<Directory:0x005630ca8abb18 @path="//usr/lib64/nfs", @name="nfs">, #<Directory:0x005630ca8aaab0 @path="//usr/lib64/openjpeg-2.1", @name="openjpeg-2.1">, #<Directory:0x005630ca8a9070 @path="//usr/lib64/os-prober", @name="os-prober">, #<Directory:0x005630ca8a8260 @path="//usr/lib64/os-probes", @name="os-probes">, #<Directory:0x005630ca8a7388 @path="//usr/lib64/p7zip", @name="p7zip">, #<Directory:0x005630ca8a6640 @path="//usr/lib64/perl5", @name="perl5">, #<Directory:0x005630ca8a56a0 @path="//usr/lib64/pkgconfig", @name="pkgconfig">, #<Directory:0x005630ca8a4890 @path="//usr/lib64/pm-utils", @name="pm-utils">, #<Directory:0x005630ca88b070 @path="//usr/lib64/polkit-1", @name="polkit-1">, #<Directory:0x005630ca889a90 @path="//usr/lib64/portage", @name="portage">, #<Directory:0x005630ca74f850 @path="//usr/lib64/python2.7", @name="python2.7">, #<Directory:0x005630ca74b778 @path="//usr/lib64/python3.4", @name="python3.4">, #<Directory:0x005630ca7481b8 @path="//usr/lib64/python-exec", @name="python-exec">, #<Directory:0x005630ca744310 @path="//usr/lib64/rkhunter", @name="rkhunter">, #<Directory:0x005630ca73d128 @path="//usr/lib64/ruby", @name="ruby">, #<Directory:0x005630ca72ed58 @path="//usr/lib64/siconv", @name="siconv">, #<Directory:0x005630ca726ae0 @path="//usr/lib64/slang", @name="slang">, #<Directory:0x005630ca723098 @path="//usr/lib64/sylpheed", @name="sylpheed">, #<Directory:0x005630ca71fbc8 @path="//usr/lib64/syslog-ng", @name="syslog-ng">, #<Directory:0x005630ca71c6f8 @path="//usr/lib64/systemd", @name="systemd">, #<Directory:0x005630ca7176f8 @path="//usr/lib64/tcl8", @name="tcl8">, #<Directory:0x005630ca715100 @path="//usr/lib64/tcl8.5", @name="tcl8.5">, #<Directory:0x005630ca70f8e0 @path="//usr/lib64/texinfo", @name="texinfo">, #<Directory:0x005630ca70e5a8 @path="//usr/lib64/Tix8.4.3", @name="Tix8.4.3">, #<Directory:0x005630ca70cf50 @path="//usr/lib64/tk8.5", @name="tk8.5">, #<Directory:0x005630ca70abd8 @path="//usr/lib64/tmpfiles.d", @name="tmpfiles.d">, #<Directory:0x005630ca709c38 @path="//usr/lib64/Togl2.0", @name="Togl2.0">, #<Directory:0x005630ca708ce8 @path="//usr/lib64/tomoyo", @name="tomoyo">, #<Directory:0x005630ca7078e8 @path="//usr/lib64/torsocks", @name="torsocks">, #<Directory:0x005630ca7067e0 @path="//usr/lib64/tribler", @name="tribler">, #<Directory:0x005630ca705548 @path="//usr/lib64/ts", @name="ts">, #<Directory:0x005630ca704120 @path="//usr/lib64/ufed", @name="ufed">, #<Directory:0x005630ca702e88 @path="//usr/lib64/urxvt", @name="urxvt">, #<Directory:0x005630ca6ffc88 @path="//usr/lib64/webkit2gtk-4.0", @name="webkit2gtk-4.0">, #<Directory:0x005630ca6fe928 @path="//usr/lib64/wx", @name="wx">, #<Directory:0x005630ca6fc4c0 @path="//usr/lib64/xorg", @name="xorg">, #<Directory:0x005630ca6fa3a0 @path="//usr/lib64/xtables", @name="xtables">, #<Directory:0x005630ca6f8fc8 @path="//usr/lib64/zathura", @name="zathura">, #<Directory:0x005630ca6f7d80 @path="//usr/lib64/zsh", @name="zsh">]}
D, [2016-11-29T18:31:23.990881 #32260] DEBUG -- : nil
D, [2016-11-29T18:31:23.991454 #32260] DEBUG -- : nil
D, [2016-11-29T18:33:21.027753 #32329] DEBUG -- : nil
D, [2016-11-29T18:33:22.640925 #32329] DEBUG -- : {:right=>[#<Executable:0x00564580ed9718 @path="//lib", @name="lib">], :down=>[#<Directory:0x00564580edd278 @path="//bin", @name="bin">, #<Directory:0x00564580edca30 @path="//boot", @name="boot">, #<Directory:0x00564580edc170 @path="//dev", @name="dev">, #<Directory:0x00564580edb4f0 @path="//etc", @name="etc">, #<Directory:0x00564580eda730 @path="//home", @name="home">, #<Directory:0x00564580ed8cf0 @path="//lib32", @name="lib32">, #<Directory:0x00564580ed83b8 @path="//lib64", @name="lib64">, #<Directory:0x00564580ed79b8 @path="//lost+found", @name="lost+found">, #<Directory:0x00564580ed6fe0 @path="//media", @name="media">, #<Directory:0x00564580ed6770 @path="//mnt", @name="mnt">, #<Directory:0x00564580ed5ed8 @path="//opt", @name="opt">, #<Directory:0x00564580ed5618 @path="//proc", @name="proc">, #<Directory:0x00564580ed4d58 @path="//root", @name="root">, #<Directory:0x00564580ed4470 @path="//run", @name="run">, #<Directory:0x00564580ed3d68 @path="//sbin", @name="sbin">, #<Directory:0x00564580ed2f80 @path="//sys", @name="sys">, #<Directory:0x00564580ed2620 @path="//tmp", @name="tmp">, #<Directory:0x00564580ed1ce8 @path="//usr", @name="usr">, #<Directory:0x00564580ed1428 @path="//var", @name="var">]}
D, [2016-11-29T18:33:22.643179 #32329] DEBUG -- : nil
D, [2016-11-29T18:33:22.645330 #32329] DEBUG -- : nil
D, [2016-11-29T18:33:24.686551 #32329] DEBUG -- : {:right=>[#<Executable:0x00564580e56e08 @path="//lib32/ld-2.22.so", @name="ld-2.22.so">, #<Executable:0x00564580e56430 @path="//lib32/ld-linux.so.2", @name="ld-linux.so.2">, #<Executable:0x00564580e55a80 @path="//lib32/libanl-2.22.so", @name="libanl-2.22.so">, #<Executable:0x00564580e55170 @path="//lib32/libanl.so.1", @name="libanl.so.1">, #<Executable:0x00564580e548b0 @path="//lib32/libBrokenLocale-2.22.so", @name="libBrokenLocale-2.22.so">, #<Executable:0x00564580e577b8 @path="//lib32/libBrokenLocale.so.1", @name="libBrokenLocale.so.1">, #<Executable:0x00564580e53690 @path="//lib32/libc-2.22.so", @name="libc-2.22.so">, #<Executable:0x00564580e52d08 @path="//lib32/libcidn-2.22.so", @name="libcidn-2.22.so">, #<Executable:0x00564580e52448 @path="//lib32/libcidn.so.1", @name="libcidn.so.1">, #<Executable:0x00564580e51b10 @path="//lib32/libcrypt-2.22.so", @name="libcrypt-2.22.so">, #<Executable:0x00564580e50df0 @path="//lib32/libcrypt.so.1", @name="libcrypt.so.1">, #<Executable:0x00564580e50418 @path="//lib32/libc.so.6", @name="libc.so.6">, #<Executable:0x00564580e4fa18 @path="//lib32/libdl-2.22.so", @name="libdl-2.22.so">, #<Executable:0x00564580e4f018 @path="//lib32/libdl.so.2", @name="libdl.so.2">, #<Executable:0x00564580e4e618 @path="//lib32/libm-2.22.so", @name="libm-2.22.so">, #<Executable:0x00564580e4dc18 @path="//lib32/libmemusage.so", @name="libmemusage.so">, #<Executable:0x00564580e4d268 @path="//lib32/libm.so.6", @name="libm.so.6">, #<Executable:0x00564580e4c890 @path="//lib32/libnsl-2.22.so", @name="libnsl-2.22.so">, #<Executable:0x00564580e4d6a0 @path="//lib32/libnsl.so.1", @name="libnsl.so.1">, #<Executable:0x00564580ebe4b8 @path="//lib32/libnss_compat-2.22.so", @name="libnss_compat-2.22.so">, #<Executable:0x00564580ebc6b8 @path="//lib32/libnss_compat.so.2", @name="libnss_compat.so.2">, #<Executable:0x00564580eb7c58 @path="//lib32/libnss_db-2.22.so", @name="libnss_db-2.22.so">, #<Executable:0x00564580eb71e0 @path="//lib32/libnss_db.so.2", @name="libnss_db.so.2">, #<Executable:0x00564580eb6768 @path="//lib32/libnss_dns-2.22.so", @name="libnss_dns-2.22.so">, #<Executable:0x00564580eb5de0 @path="//lib32/libnss_dns.so.2", @name="libnss_dns.so.2">, #<Executable:0x00564580eb53b8 @path="//lib32/libnss_files-2.22.so", @name="libnss_files-2.22.so">, #<Executable:0x00564580eb4968 @path="//lib32/libnss_files.so.2", @name="libnss_files.so.2">, #<Executable:0x00564580eb7af0 @path="//lib32/libnss_hesiod-2.22.so", @name="libnss_hesiod-2.22.so">, #<Executable:0x00564580eaf620 @path="//lib32/libnss_hesiod.so.2", @name="libnss_hesiod.so.2">, #<Executable:0x00564580eaec48 @path="//lib32/libnss_nis-2.22.so", @name="libnss_nis-2.22.so">, #<Executable:0x00564580eae2c0 @path="//lib32/libnss_nisplus-2.22.so", @name="libnss_nisplus-2.22.so">, #<Executable:0x00564580ead9d8 @path="//lib32/libnss_nisplus.so.2", @name="libnss_nisplus.so.2">, #<Executable:0x00564580eacb28 @path="//lib32/libnss_nis.so.2", @name="libnss_nis.so.2">, #<Executable:0x00564580eac0d8 @path="//lib32/libpcprofile.so", @name="libpcprofile.so">, #<Executable:0x00564580eab778 @path="//lib32/libpthread-2.22.so", @name="libpthread-2.22.so">, #<Executable:0x00564580eaada0 @path="//lib32/libpthread.so.0", @name="libpthread.so.0">, #<Executable:0x00564580eaa440 @path="//lib32/libresolv-2.22.so", @name="libresolv-2.22.so">, #<Executable:0x00564580ea9ae0 @path="//lib32/libresolv.so.2", @name="libresolv.so.2">, #<Executable:0x00564580ea8528 @path="//lib32/librt-2.22.so", @name="librt-2.22.so">, #<Executable:0x00564580ea7c68 @path="//lib32/librt.so.1", @name="librt.so.1">, #<Executable:0x00564580ea7330 @path="//lib32/libSegFault.so", @name="libSegFault.so">, #<Executable:0x00564580ea63b8 @path="//lib32/libthread_db-1.0.so", @name="libthread_db-1.0.so">, #<Executable:0x00564580ea5418 @path="//lib32/libthread_db.so.1", @name="libthread_db.so.1">, #<Executable:0x00564580ea44a0 @path="//lib32/libutil-2.22.so", @name="libutil-2.22.so">, #<Executable:0x00564580ea2cb8 @path="//lib32/libutil.so.1", @name="libutil.so.1">], :down=>[]}
D, [2016-11-29T18:33:24.689472 #32329] DEBUG -- : nil
D, [2016-11-29T18:33:24.690035 #32329] DEBUG -- : nil
D, [2016-11-29T18:33:29.366652 #32329] DEBUG -- : {:right=>[#<Executable:0x00564580e476b0 @path="//lib", @name="lib">], :down=>[#<Directory:0x00564580e5bb38 @path="//bin", @name="bin">, #<Directory:0x00564580e4b670 @path="//boot", @name="boot">, #<Directory:0x00564580e4ad88 @path="//dev", @name="dev">, #<Directory:0x00564580e49be0 @path="//etc", @name="etc">, #<Directory:0x00564580e48f60 @path="//home", @name="home">, #<Directory:0x00564580e459a0 @path="//lib32", @name="lib32">, #<Directory:0x00564580e2bed8 @path="//lib64", @name="lib64">, #<Directory:0x00564580e2a9c0 @path="//lost+found", @name="lost+found">, #<Directory:0x00564580e29c28 @path="//media", @name="media">, #<Directory:0x00564580e28e18 @path="//mnt", @name="mnt">, #<Directory:0x00564580e28508 @path="//opt", @name="opt">, #<Directory:0x00564580cf29b8 @path="//proc", @name="proc">, #<Directory:0x00564580ceeef8 @path="//root", @name="root">, #<Directory:0x00564580cec608 @path="//run", @name="run">, #<Directory:0x00564580cea538 @path="//sbin", @name="sbin">, #<Directory:0x00564580ce89b8 @path="//sys", @name="sys">, #<Directory:0x00564580ce5f10 @path="//tmp", @name="tmp">, #<Directory:0x00564580ce1de8 @path="//usr", @name="usr">, #<Directory:0x00564580cdea30 @path="//var", @name="var">]}
D, [2016-11-29T18:33:29.368970 #32329] DEBUG -- : nil
D, [2016-11-29T18:33:29.371028 #32329] DEBUG -- : nil
D, [2016-11-29T18:33:34.973851 #32329] DEBUG -- : {:right=>[], :down=>[#<Directory:0x00564580cbeb68 @path="//sys/block", @name="block">, #<Directory:0x00564580cbcd40 @path="//sys/bus", @name="bus">, #<Directory:0x00564580cba518 @path="//sys/class", @name="class">, #<Directory:0x00564580cb74a8 @path="//sys/dev", @name="dev">, #<Directory:0x00564580cb5fb8 @path="//sys/devices", @name="devices">, #<Directory:0x00564580cb45c8 @path="//sys/firmware", @name="firmware">, #<Directory:0x00564580cb2b38 @path="//sys/fs", @name="fs">, #<Directory:0x00564580cb1558 @path="//sys/kernel", @name="kernel">, #<Directory:0x00564580cb0950 @path="//sys/module", @name="module">, #<Directory:0x00564580cafeb0 @path="//sys/power", @name="power">]}
D, [2016-11-29T18:33:34.975247 #32329] DEBUG -- : nil
D, [2016-11-29T18:33:34.975969 #32329] DEBUG -- : nil
D, [2016-11-29T18:33:37.116668 #32329] DEBUG -- : {:right=>[#<Executable:0x00564580caa168 @path="//sys/block/mmcblk0", @name="mmcblk0">, #<Executable:0x00564580ca9718 @path="//sys/block/mmcblk0boot0", @name="mmcblk0boot0">, #<Executable:0x00564580ca8d18 @path="//sys/block/mmcblk0boot1", @name="mmcblk0boot1">, #<Executable:0x00564580ca7df0 @path="//sys/block/mmcblk0rpmb", @name="mmcblk0rpmb">], :down=>[]}
D, [2016-11-29T18:33:37.117555 #32329] DEBUG -- : nil
D, [2016-11-29T18:33:37.118575 #32329] DEBUG -- : nil
D, [2016-11-29T18:33:39.357015 #32329] DEBUG -- : {:right=>[], :down=>[#<Directory:0x00564580ca4178 @path="//sys/block", @name="block">, #<Directory:0x00564580ca35e8 @path="//sys/bus", @name="bus">, #<Directory:0x00564580ca2b20 @path="//sys/class", @name="class">, #<Directory:0x00564580ca2170 @path="//sys/dev", @name="dev">, #<Directory:0x00564580ca1838 @path="//sys/devices", @name="devices">, #<Directory:0x00564580ca0f00 @path="//sys/firmware", @name="firmware">, #<Directory:0x00564580ca04b0 @path="//sys/fs", @name="fs">, #<Directory:0x00564580c9fa38 @path="//sys/kernel", @name="kernel">, #<Directory:0x00564580c9f060 @path="//sys/module", @name="module">, #<Directory:0x00564580c9e520 @path="//sys/power", @name="power">]}
D, [2016-11-29T18:33:39.358355 #32329] DEBUG -- : nil
D, [2016-11-29T18:33:39.359461 #32329] DEBUG -- : nil
D, [2016-11-29T18:33:40.583118 #32329] DEBUG -- : {:right=>[], :down=>[#<Directory:0x00564580c99778 @path="//sys/devices/breakpoint", @name="breakpoint">, #<Directory:0x00564580c98b98 @path="//sys/devices/cpu", @name="cpu">, #<Directory:0x00564580c98148 @path="//sys/devices/cstate_core", @name="cstate_core">, #<Directory:0x00564580c976a8 @path="//sys/devices/cstate_pkg", @name="cstate_pkg">, #<Directory:0x00564580c96ca8 @path="//sys/devices/intel_bts", @name="intel_bts">, #<Directory:0x00564580c96280 @path="//sys/devices/LNXSYSTM:00", @name="LNXSYSTM:00">, #<Directory:0x00564580c957e0 @path="//sys/devices/msr", @name="msr">, #<Directory:0x00564580c94ca0 @path="//sys/devices/pci0000:00", @name="pci0000:00">, #<Directory:0x00564580c94228 @path="//sys/devices/platform", @name="platform">, #<Directory:0x005645810214e0 @path="//sys/devices/pnp0", @name="pnp0">, #<Directory:0x00564581020158 @path="//sys/devices/software", @name="software">, #<Directory:0x00564581012f30 @path="//sys/devices/system", @name="system">, #<Directory:0x00564581011d60 @path="//sys/devices/virtual", @name="virtual">]}
D, [2016-11-29T18:33:40.584944 #32329] DEBUG -- : nil
D, [2016-11-29T18:33:40.586077 #32329] DEBUG -- : nil
D, [2016-11-29T18:33:42.127834 #32329] DEBUG -- : {:right=>[#<Entry:0x00564581000d30 @path="//sys/devices/cstate_pkg/cpumask", @name="cpumask">, #<Entry:0x00564580ff65b0 @path="//sys/devices/cstate_pkg/perf_event_mux_interval_ms", @name="perf_event_mux_interval_ms">, #<Executable:0x00564580fef238 @path="//sys/devices/cstate_pkg/subsystem", @name="subsystem">, #<Entry:0x00564580fee798 @path="//sys/devices/cstate_pkg/type", @name="type">, #<Entry:0x00564580fed988 @path="//sys/devices/cstate_pkg/uevent", @name="uevent">], :down=>[#<Directory:0x005645810003d0 @path="//sys/devices/cstate_pkg/events", @name="events">, #<Directory:0x00564580ff7078 @path="//sys/devices/cstate_pkg/format", @name="format">, #<Directory:0x00564580ff51d8 @path="//sys/devices/cstate_pkg/power", @name="power">]}
D, [2016-11-29T18:33:42.129247 #32329] DEBUG -- : nil
D, [2016-11-29T18:33:42.130369 #32329] DEBUG -- : nil
D, [2016-11-29T18:34:02.694453 #32358] DEBUG -- : nil
D, [2016-11-29T18:34:13.930247 #32358] DEBUG -- : {:down=>[#<Builder:0x00559915810fc0 @name="BUILD", @manpage=#<ManPage:0x00559915811fb0 @page={"NAME"=>"\n       find - search for files in a directory hierarchy\n\n", "SYNOPSIS"=>"\n       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]\n\n", "DESCRIPTION"=>"\n       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.\n\n       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the \"Security Considerations\" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.\n\n", "OPTIONS"=>"\n       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).\n\n       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).\n\n       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.\n\n       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.\n\n              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.\n\n       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).\n\n       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.\n\n       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.\n\n       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.\n\n       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).\n\n       -D debugoptions\n              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include\n\n              help   Explain the debugging options\n\n              tree   Show the expression tree in its original and optimised form.\n\n              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.\n\n              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.\n\n              rates  Prints a summary indicating how often each predicate succeeded or failed.\n\n       -Olevel\n              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.\n\n              0      Equivalent to optimisation level 1.\n\n              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.\n\n              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.\n\n              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.\n\n              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.\n\n", "EXPRESSION"=>"\n       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:\n\n       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.\n\n       Actions\n              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.\n\n       Global options\n              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.\n\n       Positional options\n              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.\n\n       Operators\n              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.\n\n       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.\n\n       The -delete action also acts like an option (since it implies -depth).\n\n   POSITIONAL OPTIONS\n       Positional options always return true.  They affect only tests occurring later on the command line.\n\n       -daystart\n              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.\n\n       -follow\n              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.\n\n       -regextype type\n              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.\n\n       -warn, -nowarn\n              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.\n\n   GLOBAL OPTIONS\n       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.\n\n       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.\n\n       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.\n\n       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.\n\n       -help, --help\n              Print a summary of the command-line usage of find and exit.\n\n       -ignore_readdir_race\n              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).\n\n       -maxdepth levels\n              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0\n               means only apply the tests and actions to the starting-points themselves.\n\n       -mindepth levels\n              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.\n\n       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.\n\n       -noignore_readdir_race\n              Turns off the effect of -ignore_readdir_race.\n\n       -noleaf\n              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.\n\n       -version, --version\n              Print the find version number and exit.\n\n       -xdev  Don't descend directories on other filesystems.\n\n   TESTS\n       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.\n\n       Numeric arguments can be specified as\n\n       +n     for greater than n,\n\n       -n     for less than n,\n\n       n      for exactly n.\n\n       -amin n\n              File was last accessed n minutes ago.\n\n       -anewer file\n              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.\n\n       -atime n\n              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.\n\n       -cmin n\n              File's status was last changed n minutes ago.\n\n       -cnewer file\n              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.\n\n       -ctime n\n              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.\n\n       -empty File is empty and is either a regular file or a directory.\n\n       -executable\n              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.\n\n       -false Always false.\n\n       -fstype type\n              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.\n\n       -gid n File's numeric group ID is n.\n\n       -group gname\n              File belongs to group gname (numeric group ID allowed).\n\n       -ilname pattern\n              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.\n\n       -iname pattern\n              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.\n\n       -inum n\n              File has inode number n.  It is normally easier to use the -samefile test instead.\n\n       -ipath pattern\n              Like -path.  but the match is case insensitive.\n\n       -iregex pattern\n              Like -regex, but the match is case insensitive.\n\n       -iwholename pattern\n              See -ipath.  This alternative is less portable than -ipath.\n\n       -links n\n              File has n links.\n\n       -lname pattern\n              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.\n\n       -mmin n\n              File's data was last modified n minutes ago.\n\n       -mtime n\n              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.\n\n       -name pattern\n              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order\n              to protect it from expansion by the shell.\n\n       -newer file\n              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.\n\n       -newerXY reference\n              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:\n\n              a   The access time of the file reference\n\n              B   The birth time of the file reference\n              c   The inode status change time of reference\n              m   The modification time of the file reference\n              t   reference is interpreted directly as a time\n\n              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.\n\n       -nogroup\n              No group corresponds to file's numeric group ID.\n\n       -nouser\n              No user corresponds to file's numeric user ID.\n\n       -path pattern\n              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,\n                        find . -path \"./sr*sc\"\n              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:\n                        find . -path ./src/emacs -prune -o -print\n              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:\n                        find bar -path /foo/bar/myfile -print\n              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.\n\n       -perm mode\n              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.\n\n       -perm -mode\n              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.\n\n       -perm /mode\n              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).\n\n       -perm +mode\n              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.\n\n       -readable\n              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.\n\n       -regex pattern\n              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.\n\n       -samefile name\n              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.\n\n       -size n[cwbkMG]\n              File uses n units of space, rounding up.  The following suffixes can be used:\n\n              `b'    for 512-byte blocks (this is the default if no suffix is used)\n\n              `c'    for bytes\n\n              `w'    for two-byte words\n\n              `k'    for Kilobytes (units of 1024 bytes)\n\n              `M'    for Megabytes (units of 1048576 bytes)\n\n              `G'    for Gigabytes (units of 1073741824 bytes)\n\n              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).\n\n       -true  Always true.\n\n       -type c\n              File is of type c:\n\n              b      block (buffered) special\n\n              c      character (unbuffered) special\n\n              d      directory\n\n              p      named pipe (FIFO)\n\n              f      regular file\n\n              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.\n\n              s      socket\n\n              D      door (Solaris)\n\n       -uid n File's numeric user ID is n.\n\n       -used n\n              File was last accessed n days after its status was last changed.\n\n       -user uname\n              File is owned by user uname (numeric user ID allowed).\n\n       -wholename pattern\n              See -path.  This alternative is less portable than -path.\n\n       -writable\n              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.\n\n       -xtype c\n              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.\n\n       -context pattern\n              (SELinux only) Security context of the file matches glob pattern.\n\n   ACTIONS\n       -delete\n              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.\n\n              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.\n\n       -exec command ;\n              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.\n\n       -exec command {} +\n              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.\n\n       -execdir command ;\n\n       -execdir command {} +\n              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not\n              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.\n\n       -fls file\n              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -fprint file\n              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -fprint0 file\n              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -fprintf file format\n              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -ok command ;\n              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.\n\n              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).\n\n       -okdir command ;\n              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.\n\n       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -print0\n              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.\n\n       -printf format\n              True; print format on the standard output, interpreting `\\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:\n\n              \\a     Alarm bell.\n\n              \\b     Backspace.\n\n              \\c     Stop printing from this format immediately and flush the output.\n\n              \\f     Form feed.\n\n              \\n     Newline.\n\n              \\r     Carriage return.\n\n              \\t     Horizontal tab.\n\n              \\v     Vertical tab.\n\n              \\0     ASCII NUL.\n\n              \\\\     A literal backslash (`\\').\n\n              \\NNN   The character whose ASCII code is NNN (octal).\n\n              A `\\' character followed by any other character is treated as an ordinary character, so they both are printed.\n\n              %%     A literal percent sign.\n\n              %a     File's last access time in the format returned by the C `ctime' function.\n\n              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.\n\n                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.\n\n                     Time fields:\n\n                     H      hour (00..23)\n\n                     I      hour (01..12)\n\n                     k      hour ( 0..23)\n\n                     l      hour ( 1..12)\n\n                     M      minute (00..59)\n\n                     p      locale's AM or PM\n\n                     r      time, 12-hour (hh:mm:ss [AP]M)\n\n                     S      Second (00.00 .. 61.00).  There is a fractional part.\n\n                     T      time, 24-hour (hh:mm:ss)\n\n                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.\n\n                     X      locale's time representation (H:M:S)\n\n                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable\n\n                     Date fields:\n\n                     a      locale's abbreviated weekday name (Sun..Sat)\n\n                     A      locale's full weekday name, variable length (Sunday..Saturday)\n\n                     b      locale's abbreviated month name (Jan..Dec)\n\n                     B      locale's full month name, variable length (January..December)\n\n                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.\n\n                     d      day of month (01..31)\n\n                     D      date (mm/dd/yy)\n\n                     h      same as b\n\n                     j      day of year (001..366)\n\n                     m      month (01..12)\n\n                     U      week number of year with Sunday as first day of week (00..53)\n\n                     w      day of week (0..6)\n\n                     W      week number of year with Monday as first day of week (00..53)\n\n                     x      locale's date representation (mm/dd/yy)\n\n                     y      last two digits of year (00..99)\n\n                     Y      year (1970...)\n\n              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.\n\n              %c     File's last status change time in the format returned by the C `ctime' function.\n\n              %Ck    File's last status change time in the format specified by k, which is the same as for %A.\n\n              %d     File's depth in the directory tree; 0 means the file is a starting-point.\n\n              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.\n\n              %f     File's name with any leading directories removed (only the last element).\n\n              %F     Type of the filesystem the file is on; this value can be used for -fstype.\n\n              %g     File's group name, or numeric group ID if the group has no name.\n\n              %G     File's numeric group ID.\n\n              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to \".\".\n\n              %H     Starting-point under which file was found.\n\n              %i     File's inode number (in decimal).\n\n              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.\n\n              %l     Object of symbolic link (empty string if file is not a symbolic link).\n\n              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').\n\n              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.\n\n              %n     Number of hard links to file.\n\n              %p     File's name.\n\n              %P     File's name with the name of the starting-point under which it was found removed.\n\n              %s     File's size in bytes.\n\n              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.\n\n              %t     File's last modification time in the format returned by the C `ctime' function.\n\n              %Tk    File's last modification time in the format specified by k, which is the same as for %A.\n\n              %u     File's user name, or numeric user ID if the user has no name.\n\n              %U     File's numeric user ID.\n\n              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)\n\n              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent\n\n              %Z     (SELinux only) file's security context.\n\n              %{ %[ %(\n                     Reserved for future use.\n\n              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.\n\n              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.\n\n              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.\n\n       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.\n\n   OPERATORS\n       Listed in order of decreasing precedence:\n\n       ( expr )\n              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\\(...\\)' instead of `(...)'.\n\n       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.\n\n       -not expr\n              Same as ! expr, but not POSIX compliant.\n\n       expr1 expr2\n              Two expressions in a row are taken to be joined with an implied \"and\"; expr2 is not evaluated if expr1 is false.\n\n       expr1 -a expr2\n              Same as expr1 expr2.\n\n       expr1 -and expr2\n              Same as expr1 expr2, but not POSIX compliant.\n\n       expr1 -o expr2\n              Or; expr2 is not evaluated if expr1 is true.\n\n       expr1 -or expr2\n              Same as expr1 -o expr2, but not POSIX compliant.\n\n       expr1 , expr2\n              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.\n\n", "UNUSUAL FILENAMES"=>"\n       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.\n\n       -print0, -fprint0\n              Always print the exact filename, unchanged, even if the output is going to a terminal.\n\n       -ls, -fls\n              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\\f', `\\\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.\n\n       -printf, -fprintf\n              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which\n              characters need to be quoted.\n\n       -print, -fprint\n              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.\n\n       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.\n\n", "STANDARDS CONFORMANCE"=>"\n       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):\n\n       -H     This option is supported.\n\n       -L     This option is supported.\n\n       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.\n\n       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.\n\n       -ok    Supported.  Interpretation of the response is according to the \"yes\" and \"no\" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.\n\n       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.\n\n       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.\n\n       Other predicates\n              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.\n\n       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).\n\n       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.\n\n       The POSIX standard requires that find detects loops:\n\n              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.\n\n       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf\n       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.\n\n       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.\n\n       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.\n\n", "ENVIRONMENT VARIABLES"=>"\n       LANG   Provides a default value for the internationalization variables that are unset or null.\n\n       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.\n\n       LC_COLLATE\n              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.\n\n       LC_CTYPE\n              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.\n\n       LC_MESSAGES\n              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.\n\n       NLSPATH\n              Determines the location of the internationalisation message catalogues.\n\n       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.\n\n       POSIXLY_CORRECT\n              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.\n\n              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.\n\n              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.\n\n              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.\n\n       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.\n\n", "EXAMPLES"=>"\n       find /tmp -name core -type f -print | xargs /bin/rm -f\n\n       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.\n\n       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f\n\n       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.\n\n       find . -type f -exec file '{}' \\;\n\n       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.\n\n       find / \\( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\\n' \\) , \\\n       \\( -size +100M -fprintf /root/big.txt '%-10s %p\\n' \\)\n\n       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.\n\n       find $HOME -mtime 0\n\n       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.\n\n       find /sbin /usr/sbin -executable \\! -readable -print\n\n       Search for files which are executable but not readable.\n\n       find . -perm 664\n\n       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.\n\n       find . -perm -664\n\n       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.\n\n       find . -perm /222\n\n       Search for files which are writable by somebody (their owner, or their group, or anybody else).\n\n       find . -perm /220\n       find . -perm /u+w,g+w\n       find . -perm /u=w,g=w\n\n       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.\n\n       find . -perm -220\n       find . -perm -g+w,u+w\n\n       Both these commands do the same thing; search for files which are writable by both their owner and their group.\n\n       find . -perm -444 -perm /222 ! -perm /111\n       find . -perm -a+r -perm /a+w ! -perm /a+x\n\n       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).\n\n       cd /source-dir\n       find . -name .snapshot -prune -o \\( \\! -name *~ -print0 \\)|\n       cpio -pmd0 /dest-dir\n\n       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \\( ... -print0 \\) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what\n       is going on.\n\n       find repo/ -exec test -d {}/.svn \\; -or \\\n       -exec test -d {}/.git \\; -or -exec test -d {}/CVS \\; \\\n       -print -prune\n\n       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:\n\n       repo/project1/CVS\n       repo/gnu/project2/.svn\n       repo/gnu/project3/.svn\n       repo/gnu/project3/src/.svn\n       repo/project4/.git\n\n       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.\n\n", "EXIT STATUS"=>"\n       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.\n\n       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.\n\n", "SEE ALSO"=>"\n       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)\n\n       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.\n\n", "HISTORY"=>"\n       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.\n\n       As of findutils-4.3.3, -perm /000 now matches all files instead of none.\n\n       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.\n\n       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.\n\n       Feature                Added in   Also occurs in\n       -newerXY               4.3.3      BSD\n       -D                     4.3.1\n       -O                     4.3.1\n       -readable              4.3.0\n       -writable              4.3.0\n       -executable            4.3.0\n       -regextype             4.2.24\n       -exec ... +            4.2.12     POSIX\n       -execdir               4.2.12     BSD\n       -okdir                 4.2.12\n       -samefile              4.2.11\n       -H                     4.2.5      POSIX\n       -L                     4.2.5      POSIX\n       -P                     4.2.5      BSD\n       -delete                4.2.3\n       -quit                  4.2.3\n       -d                     4.2.3      BSD\n       -wholename             4.2.0\n       -iwholename            4.2.0\n       -ignore_readdir_race   4.2.0\n       -fls                   4.0\n       -ilname                3.8\n       -iname                 3.8\n       -ipath                 3.8\n       -iregex                3.8\n\n       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.\n\n", "NON-BUGS"=>"\n       $ find . -name *.c -print\n       find: paths must precede expression\n       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]\n\n       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:\n\n       find . -name bigram.c code.c frcode.c locate.c -print\n\n       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:\n       $ find . -name '*.c' -print\n       $ find . -name \\*.c -print\n\n", "BUGS"=>"\n       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.\n\n       The environment variable LC_COLLATE has no effect on the -ok action.\n\n       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.\n\nn"}, @options={"-P  "=>"Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.\n\n", "-L  "=>"Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.\n\n              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.\n\n", "-H  "=>"Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).\n\n       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.\n\n       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.\n\n       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.\n\n       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).\n\n", "-D debugoptions"=>"Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include\n\n              help   Explain the debugging options\n\n              tree   Show the expression tree in its original and optimised form.\n\n              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.\n\n              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.\n\n              rates  Prints a summary indicating how often each predicate succeeded or failed.\n\n", "-Olevel"=>"Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.\n\n              0      Equivalent to optimisation level 1.\n\n              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.\n\n              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.\n\n              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.\n\n              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.\n\n"}>>, #<Section:0x00559915810ea8 @content="\n       find - search for files in a directory hierarchy\n\n", @name="NAME">, #<Section:0x00559915810e58 @content="\n       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]\n\n", @name="SYNOPSIS">, #<Section:0x00559915810e08 @content="\n       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.\n\n       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the \"Security Considerations\" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.\n\n", @name="DESCRIPTION">, #<Section:0x00559915810db8 @content="\n       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).\n\n       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).\n\n       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.\n\n       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.\n\n              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.\n\n       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).\n\n       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.\n\n       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.\n\n       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.\n\n       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).\n\n       -D debugoptions\n              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include\n\n              help   Explain the debugging options\n\n              tree   Show the expression tree in its original and optimised form.\n\n              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.\n\n              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.\n\n              rates  Prints a summary indicating how often each predicate succeeded or failed.\n\n       -Olevel\n              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.\n\n              0      Equivalent to optimisation level 1.\n\n              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.\n\n              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.\n\n              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.\n\n              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.\n\n", @name="OPTIONS">, #<Section:0x00559915810d68 @content="\n       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:\n\n       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.\n\n       Actions\n              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.\n\n       Global options\n              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.\n\n       Positional options\n              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.\n\n       Operators\n              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.\n\n       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.\n\n       The -delete action also acts like an option (since it implies -depth).\n\n   POSITIONAL OPTIONS\n       Positional options always return true.  They affect only tests occurring later on the command line.\n\n       -daystart\n              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.\n\n       -follow\n              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.\n\n       -regextype type\n              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.\n\n       -warn, -nowarn\n              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.\n\n   GLOBAL OPTIONS\n       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.\n\n       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.\n\n       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.\n\n       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.\n\n       -help, --help\n              Print a summary of the command-line usage of find and exit.\n\n       -ignore_readdir_race\n              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).\n\n       -maxdepth levels\n              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0\n               means only apply the tests and actions to the starting-points themselves.\n\n       -mindepth levels\n              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.\n\n       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.\n\n       -noignore_readdir_race\n              Turns off the effect of -ignore_readdir_race.\n\n       -noleaf\n              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.\n\n       -version, --version\n              Print the find version number and exit.\n\n       -xdev  Don't descend directories on other filesystems.\n\n   TESTS\n       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.\n\n       Numeric arguments can be specified as\n\n       +n     for greater than n,\n\n       -n     for less than n,\n\n       n      for exactly n.\n\n       -amin n\n              File was last accessed n minutes ago.\n\n       -anewer file\n              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.\n\n       -atime n\n              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.\n\n       -cmin n\n              File's status was last changed n minutes ago.\n\n       -cnewer file\n              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.\n\n       -ctime n\n              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.\n\n       -empty File is empty and is either a regular file or a directory.\n\n       -executable\n              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.\n\n       -false Always false.\n\n       -fstype type\n              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.\n\n       -gid n File's numeric group ID is n.\n\n       -group gname\n              File belongs to group gname (numeric group ID allowed).\n\n       -ilname pattern\n              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.\n\n       -iname pattern\n              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.\n\n       -inum n\n              File has inode number n.  It is normally easier to use the -samefile test instead.\n\n       -ipath pattern\n              Like -path.  but the match is case insensitive.\n\n       -iregex pattern\n              Like -regex, but the match is case insensitive.\n\n       -iwholename pattern\n              See -ipath.  This alternative is less portable than -ipath.\n\n       -links n\n              File has n links.\n\n       -lname pattern\n              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.\n\n       -mmin n\n              File's data was last modified n minutes ago.\n\n       -mtime n\n              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.\n\n       -name pattern\n              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order\n              to protect it from expansion by the shell.\n\n       -newer file\n              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.\n\n       -newerXY reference\n              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:\n\n              a   The access time of the file reference\n\n              B   The birth time of the file reference\n              c   The inode status change time of reference\n              m   The modification time of the file reference\n              t   reference is interpreted directly as a time\n\n              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.\n\n       -nogroup\n              No group corresponds to file's numeric group ID.\n\n       -nouser\n              No user corresponds to file's numeric user ID.\n\n       -path pattern\n              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,\n                        find . -path \"./sr*sc\"\n              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:\n                        find . -path ./src/emacs -prune -o -print\n              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:\n                        find bar -path /foo/bar/myfile -print\n              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.\n\n       -perm mode\n              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.\n\n       -perm -mode\n              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.\n\n       -perm /mode\n              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).\n\n       -perm +mode\n              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.\n\n       -readable\n              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.\n\n       -regex pattern\n              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.\n\n       -samefile name\n              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.\n\n       -size n[cwbkMG]\n              File uses n units of space, rounding up.  The following suffixes can be used:\n\n              `b'    for 512-byte blocks (this is the default if no suffix is used)\n\n              `c'    for bytes\n\n              `w'    for two-byte words\n\n              `k'    for Kilobytes (units of 1024 bytes)\n\n              `M'    for Megabytes (units of 1048576 bytes)\n\n              `G'    for Gigabytes (units of 1073741824 bytes)\n\n              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).\n\n       -true  Always true.\n\n       -type c\n              File is of type c:\n\n              b      block (buffered) special\n\n              c      character (unbuffered) special\n\n              d      directory\n\n              p      named pipe (FIFO)\n\n              f      regular file\n\n              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.\n\n              s      socket\n\n              D      door (Solaris)\n\n       -uid n File's numeric user ID is n.\n\n       -used n\n              File was last accessed n days after its status was last changed.\n\n       -user uname\n              File is owned by user uname (numeric user ID allowed).\n\n       -wholename pattern\n              See -path.  This alternative is less portable than -path.\n\n       -writable\n              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.\n\n       -xtype c\n              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.\n\n       -context pattern\n              (SELinux only) Security context of the file matches glob pattern.\n\n   ACTIONS\n       -delete\n              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.\n\n              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.\n\n       -exec command ;\n              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.\n\n       -exec command {} +\n              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.\n\n       -execdir command ;\n\n       -execdir command {} +\n              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not\n              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.\n\n       -fls file\n              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -fprint file\n              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -fprint0 file\n              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -fprintf file format\n              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -ok command ;\n              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.\n\n              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).\n\n       -okdir command ;\n              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.\n\n       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -print0\n              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.\n\n       -printf format\n              True; print format on the standard output, interpreting `\\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:\n\n              \\a     Alarm bell.\n\n              \\b     Backspace.\n\n              \\c     Stop printing from this format immediately and flush the output.\n\n              \\f     Form feed.\n\n              \\n     Newline.\n\n              \\r     Carriage return.\n\n              \\t     Horizontal tab.\n\n              \\v     Vertical tab.\n\n              \\0     ASCII NUL.\n\n              \\\\     A literal backslash (`\\').\n\n              \\NNN   The character whose ASCII code is NNN (octal).\n\n              A `\\' character followed by any other character is treated as an ordinary character, so they both are printed.\n\n              %%     A literal percent sign.\n\n              %a     File's last access time in the format returned by the C `ctime' function.\n\n              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.\n\n                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.\n\n                     Time fields:\n\n                     H      hour (00..23)\n\n                     I      hour (01..12)\n\n                     k      hour ( 0..23)\n\n                     l      hour ( 1..12)\n\n                     M      minute (00..59)\n\n                     p      locale's AM or PM\n\n                     r      time, 12-hour (hh:mm:ss [AP]M)\n\n                     S      Second (00.00 .. 61.00).  There is a fractional part.\n\n                     T      time, 24-hour (hh:mm:ss)\n\n                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.\n\n                     X      locale's time representation (H:M:S)\n\n                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable\n\n                     Date fields:\n\n                     a      locale's abbreviated weekday name (Sun..Sat)\n\n                     A      locale's full weekday name, variable length (Sunday..Saturday)\n\n                     b      locale's abbreviated month name (Jan..Dec)\n\n                     B      locale's full month name, variable length (January..December)\n\n                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.\n\n                     d      day of month (01..31)\n\n                     D      date (mm/dd/yy)\n\n                     h      same as b\n\n                     j      day of year (001..366)\n\n                     m      month (01..12)\n\n                     U      week number of year with Sunday as first day of week (00..53)\n\n                     w      day of week (0..6)\n\n                     W      week number of year with Monday as first day of week (00..53)\n\n                     x      locale's date representation (mm/dd/yy)\n\n                     y      last two digits of year (00..99)\n\n                     Y      year (1970...)\n\n              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.\n\n              %c     File's last status change time in the format returned by the C `ctime' function.\n\n              %Ck    File's last status change time in the format specified by k, which is the same as for %A.\n\n              %d     File's depth in the directory tree; 0 means the file is a starting-point.\n\n              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.\n\n              %f     File's name with any leading directories removed (only the last element).\n\n              %F     Type of the filesystem the file is on; this value can be used for -fstype.\n\n              %g     File's group name, or numeric group ID if the group has no name.\n\n              %G     File's numeric group ID.\n\n              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to \".\".\n\n              %H     Starting-point under which file was found.\n\n              %i     File's inode number (in decimal).\n\n              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.\n\n              %l     Object of symbolic link (empty string if file is not a symbolic link).\n\n              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').\n\n              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.\n\n              %n     Number of hard links to file.\n\n              %p     File's name.\n\n              %P     File's name with the name of the starting-point under which it was found removed.\n\n              %s     File's size in bytes.\n\n              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.\n\n              %t     File's last modification time in the format returned by the C `ctime' function.\n\n              %Tk    File's last modification time in the format specified by k, which is the same as for %A.\n\n              %u     File's user name, or numeric user ID if the user has no name.\n\n              %U     File's numeric user ID.\n\n              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)\n\n              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent\n\n              %Z     (SELinux only) file's security context.\n\n              %{ %[ %(\n                     Reserved for future use.\n\n              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.\n\n              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.\n\n              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.\n\n       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.\n\n   OPERATORS\n       Listed in order of decreasing precedence:\n\n       ( expr )\n              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\\(...\\)' instead of `(...)'.\n\n       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.\n\n       -not expr\n              Same as ! expr, but not POSIX compliant.\n\n       expr1 expr2\n              Two expressions in a row are taken to be joined with an implied \"and\"; expr2 is not evaluated if expr1 is false.\n\n       expr1 -a expr2\n              Same as expr1 expr2.\n\n       expr1 -and expr2\n              Same as expr1 expr2, but not POSIX compliant.\n\n       expr1 -o expr2\n              Or; expr2 is not evaluated if expr1 is true.\n\n       expr1 -or expr2\n              Same as expr1 -o expr2, but not POSIX compliant.\n\n       expr1 , expr2\n              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.\n\n", @name="EXPRESSION">, #<Section:0x00559915810d18 @content="\n       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.\n\n       -print0, -fprint0\n              Always print the exact filename, unchanged, even if the output is going to a terminal.\n\n       -ls, -fls\n              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\\f', `\\\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.\n\n       -printf, -fprintf\n              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which\n              characters need to be quoted.\n\n       -print, -fprint\n              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.\n\n       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.\n\n", @name="UNUSUAL FILENAMES">, #<Section:0x00559915810cc8 @content="\n       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):\n\n       -H     This option is supported.\n\n       -L     This option is supported.\n\n       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.\n\n       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.\n\n       -ok    Supported.  Interpretation of the response is according to the \"yes\" and \"no\" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.\n\n       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.\n\n       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.\n\n       Other predicates\n              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.\n\n       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).\n\n       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.\n\n       The POSIX standard requires that find detects loops:\n\n              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.\n\n       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf\n       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.\n\n       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.\n\n       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.\n\n", @name="STANDARDS CONFORMANCE">, #<Section:0x00559915810c78 @content="\n       LANG   Provides a default value for the internationalization variables that are unset or null.\n\n       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.\n\n       LC_COLLATE\n              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.\n\n       LC_CTYPE\n              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.\n\n       LC_MESSAGES\n              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.\n\n       NLSPATH\n              Determines the location of the internationalisation message catalogues.\n\n       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.\n\n       POSIXLY_CORRECT\n              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.\n\n              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.\n\n              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.\n\n              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.\n\n       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.\n\n", @name="ENVIRONMENT VARIABLES">, #<Section:0x00559915810c28 @content="\n       find /tmp -name core -type f -print | xargs /bin/rm -f\n\n       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.\n\n       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f\n\n       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.\n\n       find . -type f -exec file '{}' \\;\n\n       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.\n\n       find / \\( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\\n' \\) , \\\n       \\( -size +100M -fprintf /root/big.txt '%-10s %p\\n' \\)\n\n       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.\n\n       find $HOME -mtime 0\n\n       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.\n\n       find /sbin /usr/sbin -executable \\! -readable -print\n\n       Search for files which are executable but not readable.\n\n       find . -perm 664\n\n       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.\n\n       find . -perm -664\n\n       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.\n\n       find . -perm /222\n\n       Search for files which are writable by somebody (their owner, or their group, or anybody else).\n\n       find . -perm /220\n       find . -perm /u+w,g+w\n       find . -perm /u=w,g=w\n\n       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.\n\n       find . -perm -220\n       find . -perm -g+w,u+w\n\n       Both these commands do the same thing; search for files which are writable by both their owner and their group.\n\n       find . -perm -444 -perm /222 ! -perm /111\n       find . -perm -a+r -perm /a+w ! -perm /a+x\n\n       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).\n\n       cd /source-dir\n       find . -name .snapshot -prune -o \\( \\! -name *~ -print0 \\)|\n       cpio -pmd0 /dest-dir\n\n       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \\( ... -print0 \\) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what\n       is going on.\n\n       find repo/ -exec test -d {}/.svn \\; -or \\\n       -exec test -d {}/.git \\; -or -exec test -d {}/CVS \\; \\\n       -print -prune\n\n       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:\n\n       repo/project1/CVS\n       repo/gnu/project2/.svn\n       repo/gnu/project3/.svn\n       repo/gnu/project3/src/.svn\n       repo/project4/.git\n\n       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.\n\n", @name="EXAMPLES">, #<Section:0x00559915810bd8 @content="\n       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.\n\n       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.\n\n", @name="EXIT STATUS">, #<Section:0x00559915810b88 @content="\n       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)\n\n       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.\n\n", @name="SEE ALSO">, #<Section:0x00559915810b10 @content="\n       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.\n\n       As of findutils-4.3.3, -perm /000 now matches all files instead of none.\n\n       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.\n\n       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.\n\n       Feature                Added in   Also occurs in\n       -newerXY               4.3.3      BSD\n       -D                     4.3.1\n       -O                     4.3.1\n       -readable              4.3.0\n       -writable              4.3.0\n       -executable            4.3.0\n       -regextype             4.2.24\n       -exec ... +            4.2.12     POSIX\n       -execdir               4.2.12     BSD\n       -okdir                 4.2.12\n       -samefile              4.2.11\n       -H                     4.2.5      POSIX\n       -L                     4.2.5      POSIX\n       -P                     4.2.5      BSD\n       -delete                4.2.3\n       -quit                  4.2.3\n       -d                     4.2.3      BSD\n       -wholename             4.2.0\n       -iwholename            4.2.0\n       -ignore_readdir_race   4.2.0\n       -fls                   4.0\n       -ilname                3.8\n       -iname                 3.8\n       -ipath                 3.8\n       -iregex                3.8\n\n       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.\n\n", @name="HISTORY">, #<Section:0x00559915810ac0 @content="\n       $ find . -name *.c -print\n       find: paths must precede expression\n       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]\n\n       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:\n\n       find . -name bigram.c code.c frcode.c locate.c -print\n\n       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:\n       $ find . -name '*.c' -print\n       $ find . -name \\*.c -print\n\n", @name="NON-BUGS">, #<Section:0x00559915810a48 @content="\n       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.\n\n       The environment variable LC_COLLATE has no effect on the -ok action.\n\n       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.\n\nn", @name="BUGS">], :right=>"\n       find - search for files in a directory hierarchy\n\n"}
D, [2016-11-29T18:34:13.941407 #32358] DEBUG -- : nil
D, [2016-11-29T18:34:15.553128 #32358] DEBUG -- : {:right=>"\n       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:\n\n       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.\n\n       Actions\n              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.\n\n       Global options\n              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.\n\n       Positional options\n              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.\n\n       Operators\n              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.\n\n       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.\n\n       The -delete action also acts like an option (since it implies -depth).\n\n   POSITIONAL OPTIONS\n       Positional options always return true.  They affect only tests occurring later on the command line.\n\n       -daystart\n              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.\n\n       -follow\n              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.\n\n       -regextype type\n              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.\n\n       -warn, -nowarn\n              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.\n\n   GLOBAL OPTIONS\n       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.\n\n       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.\n\n       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.\n\n       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.\n\n       -help, --help\n              Print a summary of the command-line usage of find and exit.\n\n       -ignore_readdir_race\n              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).\n\n       -maxdepth levels\n              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0\n               means only apply the tests and actions to the starting-points themselves.\n\n       -mindepth levels\n              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.\n\n       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.\n\n       -noignore_readdir_race\n              Turns off the effect of -ignore_readdir_race.\n\n       -noleaf\n              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.\n\n       -version, --version\n              Print the find version number and exit.\n\n       -xdev  Don't descend directories on other filesystems.\n\n   TESTS\n       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.\n\n       Numeric arguments can be specified as\n\n       +n     for greater than n,\n\n       -n     for less than n,\n\n       n      for exactly n.\n\n       -amin n\n              File was last accessed n minutes ago.\n\n       -anewer file\n              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.\n\n       -atime n\n              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.\n\n       -cmin n\n              File's status was last changed n minutes ago.\n\n       -cnewer file\n              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.\n\n       -ctime n\n              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.\n\n       -empty File is empty and is either a regular file or a directory.\n\n       -executable\n              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.\n\n       -false Always false.\n\n       -fstype type\n              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.\n\n       -gid n File's numeric group ID is n.\n\n       -group gname\n              File belongs to group gname (numeric group ID allowed).\n\n       -ilname pattern\n              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.\n\n       -iname pattern\n              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.\n\n       -inum n\n              File has inode number n.  It is normally easier to use the -samefile test instead.\n\n       -ipath pattern\n              Like -path.  but the match is case insensitive.\n\n       -iregex pattern\n              Like -regex, but the match is case insensitive.\n\n       -iwholename pattern\n              See -ipath.  This alternative is less portable than -ipath.\n\n       -links n\n              File has n links.\n\n       -lname pattern\n              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.\n\n       -mmin n\n              File's data was last modified n minutes ago.\n\n       -mtime n\n              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.\n\n       -name pattern\n              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order\n              to protect it from expansion by the shell.\n\n       -newer file\n              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.\n\n       -newerXY reference\n              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:\n\n              a   The access time of the file reference\n\n              B   The birth time of the file reference\n              c   The inode status change time of reference\n              m   The modification time of the file reference\n              t   reference is interpreted directly as a time\n\n              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.\n\n       -nogroup\n              No group corresponds to file's numeric group ID.\n\n       -nouser\n              No user corresponds to file's numeric user ID.\n\n       -path pattern\n              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,\n                        find . -path \"./sr*sc\"\n              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:\n                        find . -path ./src/emacs -prune -o -print\n              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:\n                        find bar -path /foo/bar/myfile -print\n              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.\n\n       -perm mode\n              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.\n\n       -perm -mode\n              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.\n\n       -perm /mode\n              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).\n\n       -perm +mode\n              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.\n\n       -readable\n              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.\n\n       -regex pattern\n              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.\n\n       -samefile name\n              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.\n\n       -size n[cwbkMG]\n              File uses n units of space, rounding up.  The following suffixes can be used:\n\n              `b'    for 512-byte blocks (this is the default if no suffix is used)\n\n              `c'    for bytes\n\n              `w'    for two-byte words\n\n              `k'    for Kilobytes (units of 1024 bytes)\n\n              `M'    for Megabytes (units of 1048576 bytes)\n\n              `G'    for Gigabytes (units of 1073741824 bytes)\n\n              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).\n\n       -true  Always true.\n\n       -type c\n              File is of type c:\n\n              b      block (buffered) special\n\n              c      character (unbuffered) special\n\n              d      directory\n\n              p      named pipe (FIFO)\n\n              f      regular file\n\n              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.\n\n              s      socket\n\n              D      door (Solaris)\n\n       -uid n File's numeric user ID is n.\n\n       -used n\n              File was last accessed n days after its status was last changed.\n\n       -user uname\n              File is owned by user uname (numeric user ID allowed).\n\n       -wholename pattern\n              See -path.  This alternative is less portable than -path.\n\n       -writable\n              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.\n\n       -xtype c\n              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.\n\n       -context pattern\n              (SELinux only) Security context of the file matches glob pattern.\n\n   ACTIONS\n       -delete\n              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.\n\n              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.\n\n       -exec command ;\n              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.\n\n       -exec command {} +\n              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.\n\n       -execdir command ;\n\n       -execdir command {} +\n              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not\n              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.\n\n       -fls file\n              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -fprint file\n              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -fprint0 file\n              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -fprintf file format\n              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -ok command ;\n              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.\n\n              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).\n\n       -okdir command ;\n              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.\n\n       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -print0\n              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.\n\n       -printf format\n              True; print format on the standard output, interpreting `\\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:\n\n              \\a     Alarm bell.\n\n              \\b     Backspace.\n\n              \\c     Stop printing from this format immediately and flush the output.\n\n              \\f     Form feed.\n\n              \\n     Newline.\n\n              \\r     Carriage return.\n\n              \\t     Horizontal tab.\n\n              \\v     Vertical tab.\n\n              \\0     ASCII NUL.\n\n              \\\\     A literal backslash (`\\').\n\n              \\NNN   The character whose ASCII code is NNN (octal).\n\n              A `\\' character followed by any other character is treated as an ordinary character, so they both are printed.\n\n              %%     A literal percent sign.\n\n              %a     File's last access time in the format returned by the C `ctime' function.\n\n              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.\n\n                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.\n\n                     Time fields:\n\n                     H      hour (00..23)\n\n                     I      hour (01..12)\n\n                     k      hour ( 0..23)\n\n                     l      hour ( 1..12)\n\n                     M      minute (00..59)\n\n                     p      locale's AM or PM\n\n                     r      time, 12-hour (hh:mm:ss [AP]M)\n\n                     S      Second (00.00 .. 61.00).  There is a fractional part.\n\n                     T      time, 24-hour (hh:mm:ss)\n\n                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.\n\n                     X      locale's time representation (H:M:S)\n\n                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable\n\n                     Date fields:\n\n                     a      locale's abbreviated weekday name (Sun..Sat)\n\n                     A      locale's full weekday name, variable length (Sunday..Saturday)\n\n                     b      locale's abbreviated month name (Jan..Dec)\n\n                     B      locale's full month name, variable length (January..December)\n\n                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.\n\n                     d      day of month (01..31)\n\n                     D      date (mm/dd/yy)\n\n                     h      same as b\n\n                     j      day of year (001..366)\n\n                     m      month (01..12)\n\n                     U      week number of year with Sunday as first day of week (00..53)\n\n                     w      day of week (0..6)\n\n                     W      week number of year with Monday as first day of week (00..53)\n\n                     x      locale's date representation (mm/dd/yy)\n\n                     y      last two digits of year (00..99)\n\n                     Y      year (1970...)\n\n              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.\n\n              %c     File's last status change time in the format returned by the C `ctime' function.\n\n              %Ck    File's last status change time in the format specified by k, which is the same as for %A.\n\n              %d     File's depth in the directory tree; 0 means the file is a starting-point.\n\n              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.\n\n              %f     File's name with any leading directories removed (only the last element).\n\n              %F     Type of the filesystem the file is on; this value can be used for -fstype.\n\n              %g     File's group name, or numeric group ID if the group has no name.\n\n              %G     File's numeric group ID.\n\n              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to \".\".\n\n              %H     Starting-point under which file was found.\n\n              %i     File's inode number (in decimal).\n\n              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.\n\n              %l     Object of symbolic link (empty string if file is not a symbolic link).\n\n              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').\n\n              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.\n\n              %n     Number of hard links to file.\n\n              %p     File's name.\n\n              %P     File's name with the name of the starting-point under which it was found removed.\n\n              %s     File's size in bytes.\n\n              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.\n\n              %t     File's last modification time in the format returned by the C `ctime' function.\n\n              %Tk    File's last modification time in the format specified by k, which is the same as for %A.\n\n              %u     File's user name, or numeric user ID if the user has no name.\n\n              %U     File's numeric user ID.\n\n              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)\n\n              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent\n\n              %Z     (SELinux only) file's security context.\n\n              %{ %[ %(\n                     Reserved for future use.\n\n              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.\n\n              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.\n\n              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.\n\n       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.\n\n       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.\n\n   OPERATORS\n       Listed in order of decreasing precedence:\n\n       ( expr )\n              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\\(...\\)' instead of `(...)'.\n\n       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.\n\n       -not expr\n              Same as ! expr, but not POSIX compliant.\n\n       expr1 expr2\n              Two expressions in a row are taken to be joined with an implied \"and\"; expr2 is not evaluated if expr1 is false.\n\n       expr1 -a expr2\n              Same as expr1 expr2.\n\n       expr1 -and expr2\n              Same as expr1 expr2, but not POSIX compliant.\n\n       expr1 -o expr2\n              Or; expr2 is not evaluated if expr1 is true.\n\n       expr1 -or expr2\n              Same as expr1 -o expr2, but not POSIX compliant.\n\n       expr1 , expr2\n              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.\n\n"}
D, [2016-11-29T18:35:57.040365 #32428] DEBUG -- : nil
D, [2016-11-29T18:51:03.607010 #376] DEBUG -- : nil
D, [2016-11-29T18:51:05.257257 #376] DEBUG -- : nil
D, [2016-11-29T18:51:05.259337 #376] DEBUG -- : nil
D, [2016-11-29T18:51:07.479357 #376] DEBUG -- : nil
D, [2016-11-29T18:51:07.480637 #376] DEBUG -- : nil
D, [2016-11-29T18:51:14.095412 #376] DEBUG -- : nil
D, [2016-11-29T18:51:14.095854 #376] DEBUG -- : nil
D, [2016-11-29T18:52:03.331997 #376] DEBUG -- : nil
D, [2016-11-29T18:52:05.103415 #376] DEBUG -- : nil
D, [2016-11-29T18:52:05.104521 #376] DEBUG -- : nil
D, [2016-11-29T19:00:23.355282 #646] DEBUG -- : nil
D, [2016-11-29T19:00:25.323508 #646] DEBUG -- : nil
D, [2016-11-29T19:00:25.325561 #646] DEBUG -- : nil
D, [2016-11-29T19:00:43.851555 #660] DEBUG -- : nil
D, [2016-11-29T19:00:45.838215 #660] DEBUG -- : nil
D, [2016-11-29T19:00:45.839352 #660] DEBUG -- : nil
D, [2016-11-29T19:03:19.078518 #735] DEBUG -- : nil
D, [2016-11-29T19:03:20.272874 #735] DEBUG -- : nil
D, [2016-11-29T19:03:20.274785 #735] DEBUG -- : nil
D, [2016-11-29T19:03:46.243862 #752] DEBUG -- : nil
D, [2016-11-29T19:03:54.961965 #752] DEBUG -- : nil
D, [2016-11-29T19:03:54.962936 #752] DEBUG -- : nil
D, [2016-11-29T19:03:56.113321 #752] DEBUG -- : 
D, [2016-11-29T19:04:21.477309 #772] DEBUG -- : nil
D, [2016-11-29T19:04:23.191545 #772] DEBUG -- : nil
D, [2016-11-29T19:04:23.192464 #772] DEBUG -- : nil
D, [2016-11-29T19:04:24.185257 #772] DEBUG -- : 
D, [2016-11-29T19:04:46.671960 #786] DEBUG -- : nil
D, [2016-11-29T19:04:48.654100 #786] DEBUG -- : nil
D, [2016-11-29T19:04:48.655597 #786] DEBUG -- : nil
D, [2016-11-29T19:04:50.511505 #786] DEBUG -- : nil
D, [2016-11-29T19:04:50.512282 #786] DEBUG -- : nil
D, [2016-11-29T19:04:52.162709 #786] DEBUG -- : 
D, [2016-11-29T19:11:26.486407 #977] DEBUG -- : nil
D, [2016-11-29T19:11:28.668917 #977] DEBUG -- : nil
D, [2016-11-29T19:11:28.669840 #977] DEBUG -- : nil
D, [2016-11-29T19:11:31.769437 #977] DEBUG -- : nil
D, [2016-11-29T19:11:31.769928 #977] DEBUG -- : nil
D, [2016-11-29T19:11:33.085422 #977] DEBUG -- : nil
D, [2016-11-29T19:11:33.973215 #977] DEBUG -- : nil
D, [2016-11-29T19:11:33.974163 #977] DEBUG -- : nil
D, [2016-11-29T19:11:35.932406 #977] DEBUG -- : nil
D, [2016-11-29T19:11:35.932967 #977] DEBUG -- : nil
D, [2016-11-29T19:11:37.430945 #977] DEBUG -- : nil
D, [2016-11-29T19:11:37.432129 #977] DEBUG -- : nil
D, [2016-11-29T19:11:38.517894 #977] DEBUG -- : nil
D, [2016-11-29T19:11:38.518876 #977] DEBUG -- : nil
D, [2016-11-29T19:11:41.062472 #977] DEBUG -- : nil
D, [2016-11-29T19:11:42.459312 #977] DEBUG -- : nil
D, [2016-11-29T19:11:42.459789 #977] DEBUG -- : nil
D, [2016-11-29T19:11:45.310134 #977] DEBUG -- : 
D, [2016-11-29T19:23:09.653841 #1298] DEBUG -- : nil
D, [2016-11-29T19:23:11.324314 #1298] DEBUG -- : nil
D, [2016-11-29T19:23:11.325471 #1298] DEBUG -- : nil
D, [2016-11-29T19:23:12.834345 #1298] DEBUG -- : 
D, [2016-11-29T19:23:40.682532 #1314] DEBUG -- : nil
eneral Commands Manual                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the "Security Considerations" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.

       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).

       -D debugoptions
              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order
              to protect it from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference

              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which
              characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.

       -ok    Supported.  Interpretation of the response is according to the "yes" and "no" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what
       is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.



D, [2016-11-29T19:23:42.315027 #1314] DEBUG -- : nil
D, [2016-11-29T19:23:48.471808 #1314] DEBUG -- : nil
D, [2016-11-29T19:23:49.887591 #1314] DEBUG -- : nil
D, [2016-11-29T19:23:49.888636 #1314] DEBUG -- : nil
D, [2016-11-29T19:23:51.154482 #1314] DEBUG -- : 
D, [2016-11-29T19:27:43.062381 #1443] DEBUG -- : nil
D, [2016-11-29T19:27:44.744807 #1443] DEBUG -- : nil
D, [2016-11-29T19:27:44.746086 #1443] DEBUG -- : nil
D, [2016-11-29T19:27:46.126054 #1443] DEBUG -- : 
D, [2016-11-29T19:29:08.887863 #27781] DEBUG -- : nil
D, [2016-11-29T19:29:10.938105 #27781] DEBUG -- : 
D, [2016-11-29T19:29:37.934087 #27781] DEBUG -- : 
D, [2016-11-29T19:30:07.836216 #27781] DEBUG -- : 
D, [2016-11-29T19:32:12.196888 #27781] DEBUG -- : 
D, [2016-11-29T19:33:02.554784 #27781] DEBUG -- : nil
D, [2016-11-29T19:33:07.773426 #1604] DEBUG -- : nil
D, [2016-11-29T19:33:10.140211 #1604] DEBUG -- : nil
D, [2016-11-29T19:33:10.141468 #1604] DEBUG -- : nil
D, [2016-11-29T19:33:11.697994 #1604] DEBUG -- : 
D, [2016-11-29T19:34:38.940447 #1647] DEBUG -- : nil
D, [2016-11-29T19:34:40.670663 #1647] DEBUG -- : nil
D, [2016-11-29T19:34:40.671986 #1647] DEBUG -- : nil
D, [2016-11-29T19:34:42.073796 #1647] DEBUG -- : 
D, [2016-11-29T19:34:42.074252 #1647] DEBUG -- : urxvt -hold -e  o.rb
D, [2016-11-29T19:34:42.435781 #1652] DEBUG -- : nil
D, [2016-11-29T19:34:56.021188 #1660] DEBUG -- : nil
D, [2016-11-29T19:34:57.910312 #1660] DEBUG -- : nil
D, [2016-11-29T19:34:57.910783 #1660] DEBUG -- : nil
D, [2016-11-29T19:34:59.558004 #1660] DEBUG -- : 
D, [2016-11-29T19:34:59.558463 #1660] DEBUG -- : urxvt -hold -e  manual.rb
D, [2016-11-29T19:35:15.181111 #1675] DEBUG -- : nil
D, [2016-11-29T19:35:18.285806 #1675] DEBUG -- : nil
D, [2016-11-29T19:35:18.287227 #1675] DEBUG -- : nil
D, [2016-11-29T19:35:19.854194 #1675] DEBUG -- : 
D, [2016-11-29T19:35:19.854657 #1675] DEBUG -- : urxvt -hold -e  o.rb
D, [2016-11-29T19:35:20.212815 #1682] DEBUG -- : nil
D, [2016-11-29T19:35:54.026166 #1682] DEBUG -- : nil
D, [2016-11-29T19:35:54.026865 #1682] DEBUG -- : nil
D, [2016-11-29T19:36:09.672848 #1705] DEBUG -- : nil
eneral Commands Manual                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the "Security Considerations" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.

       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).

       -D debugoptions
              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order
              to protect it from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference

              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which
              characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.

       -ok    Supported.  Interpretation of the response is according to the "yes" and "no" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what
       is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        FIND(1)

D, [2016-11-29T19:36:15.575284 #1705] DEBUG -- : nil
D, [2016-11-29T19:44:33.154015 #1981] DEBUG -- : nil
D, [2016-11-29T19:44:36.262973 #1981] DEBUG -- : nil
D, [2016-11-29T19:44:36.263903 #1981] DEBUG -- : nil
D, [2016-11-29T19:53:44.800933 #2453] DEBUG -- : nil
D, [2016-11-29T19:53:47.270962 #2453] DEBUG -- : nil
D, [2016-11-29T19:53:47.272095 #2453] DEBUG -- : nil
D, [2016-11-29T19:53:53.829434 #2651] DEBUG -- : nil
D, [2016-11-29T19:53:59.974505 #2655] DEBUG -- : nil
D, [2016-11-29T19:54:03.675985 #2659] DEBUG -- : nil
D, [2016-11-29T19:54:05.685959 #2659] DEBUG -- : nil
D, [2016-11-29T19:54:05.686867 #2659] DEBUG -- : nil
D, [2016-11-29T19:55:48.148799 #2709] DEBUG -- : nil
D, [2016-11-29T19:55:51.056849 #2709] DEBUG -- : nil
D, [2016-11-29T19:55:51.059007 #2709] DEBUG -- : nil
D, [2016-11-29T19:55:53.839401 #2709] DEBUG -- : nil
D, [2016-11-29T19:55:55.086862 #2709] DEBUG -- : nil
D, [2016-11-29T19:55:55.087622 #2709] DEBUG -- : nil
D, [2016-11-29T19:55:56.365928 #2709] DEBUG -- : nil
D, [2016-11-29T19:55:57.214828 #2709] DEBUG -- : nil
D, [2016-11-29T19:55:57.215992 #2709] DEBUG -- : nil
D, [2016-11-29T19:55:58.240420 #2709] DEBUG -- : nil
D, [2016-11-29T19:55:58.241315 #2709] DEBUG -- : nil
D, [2016-11-29T19:56:00.598184 #2709] DEBUG -- : 
D, [2016-11-29T19:56:00.598643 #2709] DEBUG -- : urxvt -hold -e  libnsl.so.1
D, [2016-11-29T20:05:33.688978 #2988] DEBUG -- : nil
D, [2016-11-29T20:05:55.261938 #2988] DEBUG -- : nil
D, [2016-11-29T20:05:55.262844 #2988] DEBUG -- : nil
D, [2016-11-29T20:06:09.124819 #3195] DEBUG -- : nil
D, [2016-11-29T20:06:16.847591 #3195] DEBUG -- : nil
D, [2016-11-29T20:06:16.848962 #3195] DEBUG -- : nil
D, [2016-11-29T20:06:22.728701 #3195] DEBUG -- : nil
D, [2016-11-29T20:06:23.705886 #3195] DEBUG -- : nil
D, [2016-11-29T20:06:23.706936 #3195] DEBUG -- : nil
D, [2016-11-29T20:07:03.343427 #3195] DEBUG -- : nil
D, [2016-11-29T20:07:03.344207 #3195] DEBUG -- : nil
D, [2016-11-29T20:08:31.102429 #3259] DEBUG -- : 7
D, [2016-11-29T20:08:33.143287 #3259] DEBUG -- : 20
D, [2016-11-29T20:08:33.145621 #3259] DEBUG -- : 1
D, [2016-11-29T20:08:37.100447 #3259] DEBUG -- : 2
D, [2016-11-29T20:08:37.101338 #3259] DEBUG -- : 39
D, [2016-11-29T20:08:46.358857 #3270] DEBUG -- : 7
eneral Commands Manual                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the "Security Considerations" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.

       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).

       -D debugoptions
              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order
              to protect it from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference

              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which
              characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.

       -ok    Supported.  Interpretation of the response is according to the "yes" and "no" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what
       is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.



D, [2016-11-29T20:08:51.089814 #3270] DEBUG -- : 16
D, [2016-11-29T20:09:22.857151 #3270] DEBUG -- : 7
D, [2016-11-29T20:09:25.901726 #3270] DEBUG -- : 2
D, [2016-11-29T20:09:25.903104 #3270] DEBUG -- : 9
D, [2016-11-29T20:09:31.703615 #3270] DEBUG -- : 7
D, [2016-11-29T20:09:32.790761 #3270] DEBUG -- : 20
D, [2016-11-29T20:09:32.791934 #3270] DEBUG -- : 1
D, [2016-11-29T20:09:54.816056 #3270] DEBUG -- : 15
D, [2016-11-29T20:09:54.817211 #3270] DEBUG -- : 2
D, [2016-11-29T20:09:56.802383 #3270] DEBUG -- : 7
D, [2016-11-29T20:09:58.216122 #3270] DEBUG -- : 20
D, [2016-11-29T20:09:58.217201 #3270] DEBUG -- : 1
D, [2016-11-29T20:14:07.896520 #3449] DEBUG -- : [#<Directory:0x00555850534910 @path="/", @name="root">, #<Directory:0x00555850534870 @path="/home/key", @name="home">, #<Directory:0x005558505347d0 @path="/home/key/out/active/orb", @name="work">, #<Recent:0x005558505347a8 @name="recent">, #<Frequent:0x00555850534730 @name="frequent">, #<Directory:0x00555850534640 @path="/home/key/.hostlist/", @name="web">, #<Executable:0x005558505345f0 @path="/usr/bin/find", @name="find">]
D, [2016-11-29T20:14:09.294629 #3449] DEBUG -- : [#<Directory:0x00555850534910 @path="/", @name="root", @entries={:right=>[#<Executable:0x0055585052c0f8 @path="//lib", @name="lib">], :down=>[#<Directory:0x0055585052ff28 @path="//bin", @name="bin">, #<Directory:0x0055585052f230 @path="//boot", @name="boot">, #<Directory:0x0055585052e470 @path="//dev", @name="dev">, #<Directory:0x0055585052d548 @path="//etc", @name="etc">, #<Directory:0x0055585052cb20 @path="//home", @name="home">, #<Directory:0x0055585052b798 @path="//lib32", @name="lib32">, #<Directory:0x0055585052ad98 @path="//lib64", @name="lib64">, #<Directory:0x0055585052a528 @path="//lost+found", @name="lost+found">, #<Directory:0x00555850529c90 @path="//media", @name="media">, #<Directory:0x005558505293d0 @path="//mnt", @name="mnt">, #<Directory:0x00555850528b38 @path="//opt", @name="opt">, #<Directory:0x00555850528228 @path="//proc", @name="proc">, #<Directory:0x00555850527a80 @path="//root", @name="root">, #<Directory:0x00555850526e00 @path="//run", @name="run">, #<Directory:0x00555850526478 @path="//sbin", @name="sbin">, #<Directory:0x00555850525ac8 @path="//sys", @name="sys">, #<Directory:0x00555850525230 @path="//tmp", @name="tmp">, #<Directory:0x005558505249e8 @path="//usr", @name="usr">, #<Directory:0x00555850524150 @path="//var", @name="var">]}, @active=true>, #<Directory:0x0055585052ff28 @path="//bin", @name="bin">, #<Directory:0x0055585052f230 @path="//boot", @name="boot">, #<Directory:0x0055585052e470 @path="//dev", @name="dev">, #<Directory:0x0055585052d548 @path="//etc", @name="etc">, #<Directory:0x0055585052cb20 @path="//home", @name="home">, #<Directory:0x0055585052b798 @path="//lib32", @name="lib32">, #<Directory:0x0055585052ad98 @path="//lib64", @name="lib64">]
D, [2016-11-29T20:14:09.299420 #3449] DEBUG -- : [#<Executable:0x0055585052c0f8 @path="//lib", @name="lib">]
D, [2016-11-29T20:18:30.873696 #3558] DEBUG -- : 7
D, [2016-11-29T20:18:33.803450 #3558] DEBUG -- : 20
D, [2016-11-29T20:18:33.805997 #3558] DEBUG -- : 1
D, [2016-11-29T20:18:37.916803 #3558] DEBUG -- : 7
D, [2016-11-29T20:18:39.880351 #3558] DEBUG -- : 20
D, [2016-11-29T20:18:39.881378 #3558] DEBUG -- : 1
D, [2016-11-29T20:18:40.770975 #3558] DEBUG -- : 7
D, [2016-11-29T20:18:42.421152 #3558] DEBUG -- : 11
D, [2016-11-29T20:18:42.422008 #3558] DEBUG -- : 46
D, [2016-11-29T20:20:12.977069 #3624] DEBUG -- : 7
D, [2016-11-29T20:20:16.454954 #3624] DEBUG -- : 11
D, [2016-11-29T20:20:16.456029 #3624] DEBUG -- : 46
D, [2016-11-29T20:21:08.360760 #3650] DEBUG -- : 7
eneral Commands Manual                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the "Security Considerations" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.

       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).

       -D debugoptions
              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order
              to protect it from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference

              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which
              characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.

       -ok    Supported.  Interpretation of the response is according to the "yes" and "no" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what
       is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.



D, [2016-11-29T20:21:10.580070 #3650] DEBUG -- : 16
D, [2016-11-29T20:21:12.346648 #3650] DEBUG -- : 7
D, [2016-11-29T20:21:13.846962 #3650] DEBUG -- : 2
D, [2016-11-29T20:21:13.848178 #3650] DEBUG -- : 9
D, [2016-11-29T20:21:14.922495 #3650] DEBUG -- : 7
D, [2016-11-29T20:21:15.701374 #3650] DEBUG -- : 20
D, [2016-11-29T20:21:15.702119 #3650] DEBUG -- : 1
D, [2016-11-29T20:21:17.677410 #3650] DEBUG -- : 2
D, [2016-11-29T20:21:17.678201 #3650] DEBUG -- : 45
D, [2016-11-29T20:21:58.019937 #3700] DEBUG -- : 7
D, [2016-11-29T20:21:58.020159 #3700] DEBUG -- : 7
D, [2016-11-29T20:21:59.871765 #3700] DEBUG -- : 20
D, [2016-11-29T20:21:59.872180 #3700] DEBUG -- : 20
D, [2016-11-29T20:21:59.873835 #3700] DEBUG -- : 1
D, [2016-11-29T20:21:59.874181 #3700] DEBUG -- : 1
D, [2016-11-29T20:22:01.759560 #3700] DEBUG -- : 2
D, [2016-11-29T20:22:01.759786 #3700] DEBUG -- : 2
D, [2016-11-29T20:22:01.760525 #3700] DEBUG -- : 39
D, [2016-11-29T20:22:01.760786 #3700] DEBUG -- : 40
D, [2016-11-29T20:22:07.689716 #3710] DEBUG -- : 7
D, [2016-11-29T20:22:07.689927 #3710] DEBUG -- : 7
D, [2016-11-29T20:22:13.659863 #3710] DEBUG -- : 20
D, [2016-11-29T20:22:13.660276 #3710] DEBUG -- : 20
D, [2016-11-29T20:22:13.662475 #3710] DEBUG -- : 1
D, [2016-11-29T20:22:13.662829 #3710] DEBUG -- : 1
D, [2016-11-29T20:22:25.338212 #3719] DEBUG -- : 7
D, [2016-11-29T20:22:25.338426 #3719] DEBUG -- : 7
D, [2016-11-29T20:22:25.338494 #3719] DEBUG -- : 7
D, [2016-11-29T20:22:26.682725 #3719] DEBUG -- : 20
D, [2016-11-29T20:22:26.683152 #3719] DEBUG -- : 20
D, [2016-11-29T20:22:26.683631 #3719] DEBUG -- : 20
D, [2016-11-29T20:22:26.685563 #3719] DEBUG -- : 1
D, [2016-11-29T20:22:26.685889 #3719] DEBUG -- : 1
D, [2016-11-29T20:22:26.686270 #3719] DEBUG -- : 1
D, [2016-11-29T20:22:38.085532 #3728] DEBUG -- : 7
D, [2016-11-29T20:22:38.085747 #3728] DEBUG -- : 7
D, [2016-11-29T20:22:38.085816 #3728] DEBUG -- : 7
D, [2016-11-29T20:22:45.746756 #3728] DEBUG -- : 20
D, [2016-11-29T20:22:45.747190 #3728] DEBUG -- : 20
D, [2016-11-29T20:22:45.747767 #3728] DEBUG -- : 20
D, [2016-11-29T20:22:45.749866 #3728] DEBUG -- : 1
D, [2016-11-29T20:22:45.750196 #3728] DEBUG -- : 1
D, [2016-11-29T20:22:45.750565 #3728] DEBUG -- : 1
D, [2016-11-29T20:23:30.207035 #3751] DEBUG -- : 7
D, [2016-11-29T20:23:30.207216 #3751] DEBUG -- : 7
D, [2016-11-29T20:23:30.207282 #3751] DEBUG -- : 7
D, [2016-11-29T20:23:32.613207 #3751] DEBUG -- : {:right=>[#<Executable:0x00555f30928238 @path="//lib", @name="lib">], :down=>[#<Directory:0x00555f3092c018 @path="//bin", @name="bin">, #<Directory:0x00555f3092b398 @path="//boot", @name="boot">, #<Directory:0x00555f3092a5d8 @path="//dev", @name="dev">, #<Directory:0x00555f30929610 @path="//etc", @name="etc">, #<Directory:0x00555f30928c10 @path="//home", @name="home">, #<Directory:0x00555f30927860 @path="//lib32", @name="lib32">, #<Directory:0x00555f30926e60 @path="//lib64", @name="lib64">, #<Directory:0x00555f30926618 @path="//lost+found", @name="lost+found">, #<Directory:0x00555f30925d80 @path="//media", @name="media">, #<Directory:0x00555f309254c0 @path="//mnt", @name="mnt">, #<Directory:0x00555f30924c00 @path="//opt", @name="opt">, #<Directory:0x00555f309242f0 @path="//proc", @name="proc">, #<Directory:0x00555f30923be8 @path="//root", @name="root">, #<Directory:0x00555f30922ec8 @path="//run", @name="run">, #<Directory:0x00555f30922590 @path="//sbin", @name="sbin">, #<Directory:0x00555f30921b90 @path="//sys", @name="sys">, #<Directory:0x00555f309212f8 @path="//tmp", @name="tmp">, #<Directory:0x00555f30920ab0 @path="//usr", @name="usr">, #<Directory:0x00555f30920218 @path="//var", @name="var">]}
D, [2016-11-29T20:23:32.615951 #3751] DEBUG -- : 20
D, [2016-11-29T20:23:32.616220 #3751] DEBUG -- : 20
D, [2016-11-29T20:23:32.616416 #3751] DEBUG -- : 20
D, [2016-11-29T20:23:32.618121 #3751] DEBUG -- : 1
D, [2016-11-29T20:23:32.618442 #3751] DEBUG -- : 1
D, [2016-11-29T20:23:32.618820 #3751] DEBUG -- : 1
D, [2016-11-29T20:24:04.472101 #3751] DEBUG -- : {:right=>[#<Executable:0x00555f308a5400 @path="//lib32/ld-2.22.so", @name="ld-2.22.so">, #<Executable:0x00555f308a4b40 @path="//lib32/ld-linux.so.2", @name="ld-linux.so.2">, #<Executable:0x00555f308a4258 @path="//lib32/libanl-2.22.so", @name="libanl-2.22.so">, #<Executable:0x00555f308a3970 @path="//lib32/libanl.so.1", @name="libanl.so.1">, #<Executable:0x00555f308a2f70 @path="//lib32/libBrokenLocale-2.22.so", @name="libBrokenLocale-2.22.so">, #<Executable:0x00555f308a2688 @path="//lib32/libBrokenLocale.so.1", @name="libBrokenLocale.so.1">, #<Executable:0x00555f308a1dc8 @path="//lib32/libc-2.22.so", @name="libc-2.22.so">, #<Executable:0x00555f308a1198 @path="//lib32/libcidn-2.22.so", @name="libcidn-2.22.so">, #<Executable:0x00555f308a06a8 @path="//lib32/libcidn.so.1", @name="libcidn.so.1">, #<Executable:0x00555f3089fc80 @path="//lib32/libcrypt-2.22.so", @name="libcrypt-2.22.so">, #<Executable:0x00555f3089f370 @path="//lib32/libcrypt.so.1", @name="libcrypt.so.1">, #<Executable:0x00555f3089e8f8 @path="//lib32/libc.so.6", @name="libc.so.6">, #<Executable:0x00555f3089def8 @path="//lib32/libdl-2.22.so", @name="libdl-2.22.so">, #<Executable:0x00555f3089d520 @path="//lib32/libdl.so.2", @name="libdl.so.2">, #<Executable:0x00555f3089cb70 @path="//lib32/libm-2.22.so", @name="libm-2.22.so">, #<Executable:0x00555f3089c1e8 @path="//lib32/libmemusage.so", @name="libmemusage.so">, #<Executable:0x00555f3090f4e0 @path="//lib32/libm.so.6", @name="libm.so.6">, #<Executable:0x00555f3090c948 @path="//lib32/libnsl-2.22.so", @name="libnsl-2.22.so">, #<Executable:0x00555f3090c010 @path="//lib32/libnsl.so.1", @name="libnsl.so.1">, #<Executable:0x00555f3090b520 @path="//lib32/libnss_compat-2.22.so", @name="libnss_compat-2.22.so">, #<Executable:0x00555f3090aaa8 @path="//lib32/libnss_compat.so.2", @name="libnss_compat.so.2">, #<Executable:0x00555f3090a148 @path="//lib32/libnss_db-2.22.so", @name="libnss_db-2.22.so">, #<Executable:0x00555f309097c0 @path="//lib32/libnss_db.so.2", @name="libnss_db.so.2">, #<Executable:0x00555f30908cd0 @path="//lib32/libnss_dns-2.22.so", @name="libnss_dns-2.22.so">, #<Executable:0x00555f309082d0 @path="//lib32/libnss_dns.so.2", @name="libnss_dns.so.2">, #<Executable:0x00555f30903988 @path="//lib32/libnss_files-2.22.so", @name="libnss_files-2.22.so">, #<Executable:0x00555f30903028 @path="//lib32/libnss_files.so.2", @name="libnss_files.so.2">, #<Executable:0x00555f30902628 @path="//lib32/libnss_hesiod-2.22.so", @name="libnss_hesiod-2.22.so">, #<Executable:0x00555f30901cf0 @path="//lib32/libnss_hesiod.so.2", @name="libnss_hesiod.so.2">, #<Executable:0x00555f30900df0 @path="//lib32/libnss_nis-2.22.so", @name="libnss_nis-2.22.so">, #<Executable:0x00555f309004b8 @path="//lib32/libnss_nisplus-2.22.so", @name="libnss_nisplus-2.22.so">, #<Executable:0x00555f308fba58 @path="//lib32/libnss_nisplus.so.2", @name="libnss_nisplus.so.2">, #<Executable:0x00555f308fb0d0 @path="//lib32/libnss_nis.so.2", @name="libnss_nis.so.2">, #<Executable:0x00555f308fa6f8 @path="//lib32/libpcprofile.so", @name="libpcprofile.so">, #<Executable:0x00555f308f9e38 @path="//lib32/libpthread-2.22.so", @name="libpthread-2.22.so">, #<Executable:0x00555f308f8f88 @path="//lib32/libpthread.so.0", @name="libpthread.so.0">, #<Executable:0x00555f308f7f48 @path="//lib32/libresolv-2.22.so", @name="libresolv-2.22.so">, #<Executable:0x00555f308f7660 @path="//lib32/libresolv.so.2", @name="libresolv.so.2">, #<Executable:0x00555f308f6968 @path="//lib32/librt-2.22.so", @name="librt-2.22.so">, #<Executable:0x00555f308f5950 @path="//lib32/librt.so.1", @name="librt.so.1">, #<Executable:0x00555f308f4a28 @path="//lib32/libSegFault.so", @name="libSegFault.so">, #<Executable:0x00555f308f30d8 @path="//lib32/libthread_db-1.0.so", @name="libthread_db-1.0.so">, #<Executable:0x00555f308f2228 @path="//lib32/libthread_db.so.1", @name="libthread_db.so.1">, #<Executable:0x00555f308efc58 @path="//lib32/libutil-2.22.so", @name="libutil-2.22.so">, #<Executable:0x00555f308ef050 @path="//lib32/libutil.so.1", @name="libutil.so.1">], :down=>[]}
D, [2016-11-29T20:24:04.474828 #3751] DEBUG -- : 2
D, [2016-11-29T20:24:04.475017 #3751] DEBUG -- : 2
D, [2016-11-29T20:24:04.475285 #3751] DEBUG -- : 2
D, [2016-11-29T20:24:04.476122 #3751] DEBUG -- : 45
D, [2016-11-29T20:24:04.476294 #3751] DEBUG -- : 39
D, [2016-11-29T20:24:04.476457 #3751] DEBUG -- : 40
D, [2016-11-29T20:24:18.341339 #3775] DEBUG -- : 7
D, [2016-11-29T20:24:18.341558 #3775] DEBUG -- : 7
D, [2016-11-29T20:24:18.341624 #3775] DEBUG -- : 7
D, [2016-11-29T20:24:22.067922 #3775] DEBUG -- : {:right=>[#<Entry:0x00562cc9878240 @path="/home/key/out/active/orb/areas.rb", @name="areas.rb">, #<Executable:0x00562cc98773e0 @path="/home/key/out/active/orb/database.rb", @name="database.rb">, #<Entry:0x00562cc9876580 @path="/home/key/out/active/orb/entities.rb", @name="entities.rb">, #<Entry:0x00562cc9875540 @path="/home/key/out/active/orb/helpers.rb", @name="helpers.rb">, #<Entry:0x00562cc9874af0 @path="/home/key/out/active/orb/help.txt", @name="help.txt">, #<Executable:0x00562cc9875b80 @path="/home/key/out/active/orb/manual.rb", @name="manual.rb">, #<Executable:0x00562cc9873600 @path="/home/key/out/active/orb/o.rb", @name="o.rb">, #<Entry:0x00562cc9872bb0 @path="/home/key/out/active/orb/orb.log", @name="orb.log">, #<Entry:0x00562cc9872250 @path="/home/key/out/active/orb/ORDER", @name="ORDER">], :down=>[#<Directory:0x00562cc98718a0 @path="/home/key/out/active/orb/view", @name="view">]}
D, [2016-11-29T20:24:22.069465 #3775] DEBUG -- : 2
D, [2016-11-29T20:24:22.069733 #3775] DEBUG -- : 2
D, [2016-11-29T20:24:22.070007 #3775] DEBUG -- : 2
D, [2016-11-29T20:24:22.071345 #3775] DEBUG -- : 9
D, [2016-11-29T20:24:22.071654 #3775] DEBUG -- : 9
D, [2016-11-29T20:24:22.072065 #3775] DEBUG -- : 9
D, [2016-11-29T20:24:23.257548 #3775] DEBUG -- : {:right=>[#<Executable:0x00562cc986caf8 @path="/home/key/out/active/orb/view/gosu.gl.rb", @name="gosu.gl.rb">, #<Executable:0x00562cc986c120 @path="/home/key/out/active/orb/view/gosu.rb", @name="gosu.rb">, #<Executable:0x00562cc986b6d0 @path="/home/key/out/active/orb/view/sdl.rb", @name="sdl.rb">, #<Entry:0x00562cc986ab68 @path="/home/key/out/active/orb/view/terminal.rb", @name="terminal.rb">], :down=>[]}
D, [2016-11-29T20:24:23.258454 #3775] DEBUG -- : 2
D, [2016-11-29T20:24:23.258711 #3775] DEBUG -- : 2
D, [2016-11-29T20:24:23.259187 #3775] DEBUG -- : 2
D, [2016-11-29T20:24:23.260143 #3775] DEBUG -- : 4
D, [2016-11-29T20:24:23.260419 #3775] DEBUG -- : 4
D, [2016-11-29T20:24:23.260707 #3775] DEBUG -- : 4
D, [2016-11-29T20:24:26.813013 #3775] DEBUG -- : 7
D, [2016-11-29T20:24:26.813390 #3775] DEBUG -- : 7
D, [2016-11-29T20:24:26.813730 #3775] DEBUG -- : 7
D, [2016-11-29T20:24:29.082166 #3775] DEBUG -- : {:right=>[#<Entry:0x00562cc97f1510 @path="/home/key/areas.rb", @name="areas.rb">, #<Executable:0x00562cc97f0390 @path="/home/key/db", @name="db">, #<Executable:0x00562cc97efa80 @path="/home/key/downloads", @name="downloads">, #<Entry:0x00562cc97ef0d0 @path="/home/key/entities.rb", @name="entities.rb">, #<Entry:0x00562cc97ee810 @path="/home/key/evlka_1.jpg", @name="evlka_1.jpg">, #<Entry:0x00562cc97edf50 @path="/home/key/evlka_2.jpg", @name="evlka_2.jpg">, #<Entry:0x00562cc97ed208 @path="/home/key/find.html", @name="find.html">, #<Entry:0x00562cc97ec8d0 @path="/home/key/--Frag0", @name="--Frag0">, #<Entry:0x00562cc97ebef8 @path="/home/key/--Frag1", @name="--Frag1">, #<Entry:0x00562cc97eb610 @path="/home/key/--Frag10", @name="--Frag10">, #<Entry:0x00562cc97eac10 @path="/home/key/--Frag11", @name="--Frag11">, #<Entry:0x00562cc97ea238 @path="/home/key/--Frag12", @name="--Frag12">, #<Entry:0x00562cc97e9860 @path="/home/key/--Frag13", @name="--Frag13">, #<Entry:0x00562cc97e8ed8 @path="/home/key/--Frag14", @name="--Frag14">, #<Entry:0x00562cc97e85a0 @path="/home/key/--Frag15", @name="--Frag15">, #<Entry:0x00562cc985ba00 @path="/home/key/--Frag16", @name="--Frag16">, #<Entry:0x00562cc9858e68 @path="/home/key/--Frag17", @name="--Frag17">, #<Entry:0x00562cc98583c8 @path="/home/key/--Frag18", @name="--Frag18">, #<Entry:0x00562cc9853968 @path="/home/key/--Frag19", @name="--Frag19">, #<Entry:0x00562cc9852f40 @path="/home/key/--Frag2", @name="--Frag2">, #<Entry:0x00562cc9852590 @path="/home/key/--Frag20", @name="--Frag20">, #<Entry:0x00562cc9851c30 @path="/home/key/--Frag21", @name="--Frag21">, #<Entry:0x00562cc9851230 @path="/home/key/--Frag22", @name="--Frag22">, #<Entry:0x00562cc9850808 @path="/home/key/--Frag23", @name="--Frag23">, #<Entry:0x00562cc984bec0 @path="/home/key/--Frag24", @name="--Frag24">, #<Entry:0x00562cc984b510 @path="/home/key/--Frag25.part", @name="--Frag25.part">, #<Entry:0x00562cc984ab88 @path="/home/key/--Frag3", @name="--Frag3">, #<Entry:0x00562cc984a228 @path="/home/key/--Frag4", @name="--Frag4">, #<Entry:0x00562cc98498c8 @path="/home/key/--Frag5", @name="--Frag5">, #<Entry:0x00562cc9848ab8 @path="/home/key/--Frag6", @name="--Frag6">, #<Entry:0x00562cc98480b8 @path="/home/key/--Frag7", @name="--Frag7">, #<Entry:0x00562cc9847758 @path="/home/key/--Frag8", @name="--Frag8">, #<Entry:0x00562cc9846da8 @path="/home/key/--Frag9", @name="--Frag9">, #<Executable:0x00562cc9846470 @path="/home/key/gems", @name="gems">, #<Entry:0x00562cc9845b38 @path="/home/key/helpers.rb", @name="helpers.rb">, #<Entry:0x00562cc98445a8 @path="/home/key/help.txt", @name="help.txt">, #<Entry:0x00562cc9840688 @path="/home/key/man", @name="man">, #<Executable:0x00562cc983ef18 @path="/home/key/mp", @name="mp">, #<Entry:0x00562cc983b048 @path="/home/key/OPTIONS", @name="OPTIONS">, #<Executable:0x00562cc983a558 @path="/home/key/o.rb", @name="o.rb">, #<Entry:0x00562cc9839b08 @path="/home/key/ORDER", @name="ORDER">, #<Entry:0x00562cc98380c8 @path="/home/key/rkhunter.md5", @name="rkhunter.md5">, #<Entry:0x00562cc98374c0 @path="/home/key/rootevo3dnew.zip", @name="rootevo3dnew.zip">, #<Entry:0x00562cc9836930 @path="/home/key/S-Off%20Tools.zip", @name="S-Off%20Tools.zip">, #<Entry:0x00562cc9835918 @path="/home/key/testdisk.log", @name="testdisk.log">, #<Entry:0x00562cc9833820 @path="/home/key/zgrep.html", @name="zgrep.html">], :down=>[#<Directory:0x00562cc97f0c78 @path="/home/key/data", @name="data">, #<Directory:0x00562cc9843d38 @path="/home/key/in", @name="in">, #<Directory:0x00562cc9843400 @path="/home/key/it", @name="it">, #<Directory:0x00562cc9842500 @path="/home/key/mail", @name="mail">, #<Directory:0x00562cc9841588 @path="/home/key/Mail", @name="Mail">, #<Directory:0x00562cc983ce70 @path="/home/key/News", @name="News">, #<Directory:0x00562cc983bc00 @path="/home/key/nicotine-downloads", @name="nicotine-downloads">, #<Directory:0x00562cc9838b68 @path="/home/key/out", @name="out">, #<Directory:0x00562cc9834f90 @path="/home/key/tmp", @name="tmp">, #<Directory:0x00562cc9834388 @path="/home/key/view", @name="view">]}
D, [2016-11-29T20:24:29.085541 #3775] DEBUG -- : 11
D, [2016-11-29T20:24:29.085722 #3775] DEBUG -- : 11
D, [2016-11-29T20:24:29.085912 #3775] DEBUG -- : 11
D, [2016-11-29T20:24:29.086676 #3775] DEBUG -- : 46
D, [2016-11-29T20:24:29.086866 #3775] DEBUG -- : 39
D, [2016-11-29T20:24:29.087069 #3775] DEBUG -- : 40
D, [2016-11-29T20:24:40.869615 #3788] DEBUG -- : 7
D, [2016-11-29T20:24:40.869831 #3788] DEBUG -- : 7
D, [2016-11-29T20:24:40.869896 #3788] DEBUG -- : 7
D, [2016-11-29T20:24:42.503181 #3788] DEBUG -- : {:right=>[#<Entry:0x00557a05af81e0 @path="/home/key/areas.rb", @name="areas.rb">, #<Executable:0x00557a05af6660 @path="/home/key/db", @name="db">, #<Executable:0x00557a05af5670 @path="/home/key/downloads", @name="downloads">, #<Entry:0x00557a05af4c48 @path="/home/key/entities.rb", @name="entities.rb">, #<Entry:0x00557a05af4220 @path="/home/key/evlka_1.jpg", @name="evlka_1.jpg">, #<Entry:0x00557a05af38c0 @path="/home/key/evlka_2.jpg", @name="evlka_2.jpg">, #<Entry:0x00557a05af2e98 @path="/home/key/find.html", @name="find.html">, #<Entry:0x00557a05af25d8 @path="/home/key/--Frag0", @name="--Frag0">, #<Entry:0x00557a05af1ca0 @path="/home/key/--Frag1", @name="--Frag1">, #<Entry:0x00557a05af1390 @path="/home/key/--Frag10", @name="--Frag10">, #<Entry:0x00557a05af0ad0 @path="/home/key/--Frag11", @name="--Frag11">, #<Entry:0x00557a05af0170 @path="/home/key/--Frag12", @name="--Frag12">, #<Entry:0x00557a05aef5b8 @path="/home/key/--Frag13", @name="--Frag13">, #<Entry:0x00557a05aeec08 @path="/home/key/--Frag14", @name="--Frag14">, #<Entry:0x00557a05aee258 @path="/home/key/--Frag15", @name="--Frag15">, #<Entry:0x00557a05aed948 @path="/home/key/--Frag16", @name="--Frag16">, #<Entry:0x00557a05aed060 @path="/home/key/--Frag17", @name="--Frag17">, #<Entry:0x00557a05aec7f0 @path="/home/key/--Frag18", @name="--Frag18">, #<Entry:0x00557a05aebf58 @path="/home/key/--Frag19", @name="--Frag19">, #<Entry:0x00557a05aeb508 @path="/home/key/--Frag2", @name="--Frag2">, #<Entry:0x00557a05aeaa90 @path="/home/key/--Frag20", @name="--Frag20">, #<Entry:0x00557a05aea0e0 @path="/home/key/--Frag21", @name="--Frag21">, #<Entry:0x00557a05ae9758 @path="/home/key/--Frag22", @name="--Frag22">, #<Entry:0x00557a05ae8e98 @path="/home/key/--Frag23", @name="--Frag23">, #<Entry:0x00557a05ae85b0 @path="/home/key/--Frag24", @name="--Frag24">, #<Entry:0x00557a05a73b98 @path="/home/key/--Frag25.part", @name="--Frag25.part">, #<Entry:0x00557a05a73260 @path="/home/key/--Frag3", @name="--Frag3">, #<Entry:0x00557a05a72900 @path="/home/key/--Frag4", @name="--Frag4">, #<Entry:0x00557a05a71f50 @path="/home/key/--Frag5", @name="--Frag5">, #<Entry:0x00557a05a715f0 @path="/home/key/--Frag6", @name="--Frag6">, #<Entry:0x00557a05a70d58 @path="/home/key/--Frag7", @name="--Frag7">, #<Entry:0x00557a05a704c0 @path="/home/key/--Frag8", @name="--Frag8">, #<Entry:0x00557a05a6fbd8 @path="/home/key/--Frag9", @name="--Frag9">, #<Executable:0x00557a05a6f1d8 @path="/home/key/gems", @name="gems">, #<Entry:0x00557a05a6e918 @path="/home/key/helpers.rb", @name="helpers.rb">, #<Entry:0x00557a05a6e080 @path="/home/key/help.txt", @name="help.txt">, #<Entry:0x00557a05a6adb8 @path="/home/key/man", @name="man">, #<Executable:0x00557a05a6a3b8 @path="/home/key/mp", @name="mp">, #<Entry:0x00557a05a68748 @path="/home/key/OPTIONS", @name="OPTIONS">, #<Executable:0x00557a05adbea0 @path="/home/key/o.rb", @name="o.rb">, #<Entry:0x00557a05ada2a8 @path="/home/key/ORDER", @name="ORDER">, #<Entry:0x00557a05ad7b48 @path="/home/key/rkhunter.md5", @name="rkhunter.md5">, #<Entry:0x00557a05ad7170 @path="/home/key/rootevo3dnew.zip", @name="rootevo3dnew.zip">, #<Entry:0x00557a05ad6748 @path="/home/key/S-Off%20Tools.zip", @name="S-Off%20Tools.zip">, #<Entry:0x00557a05ad5dc0 @path="/home/key/testdisk.log", @name="testdisk.log">, #<Entry:0x00557a05ad4038 @path="/home/key/zgrep.html", @name="zgrep.html">], :down=>[#<Directory:0x00557a05af7510 @path="/home/key/data", @name="data">, #<Directory:0x00557a05a6d4a0 @path="/home/key/in", @name="in">, #<Directory:0x00557a05a6ca28 @path="/home/key/it", @name="it">, #<Directory:0x00557a05a6c2d0 @path="/home/key/mail", @name="mail">, #<Directory:0x00557a05a6b808 @path="/home/key/Mail", @name="Mail">, #<Directory:0x00557a05a69a58 @path="/home/key/News", @name="News">, #<Directory:0x00557a05a690d0 @path="/home/key/nicotine-downloads", @name="nicotine-downloads">, #<Directory:0x00557a05ad85c0 @path="/home/key/out", @name="out">, #<Directory:0x00557a05ad5410 @path="/home/key/tmp", @name="tmp">, #<Directory:0x00557a05ad4a10 @path="/home/key/view", @name="view">]}
D, [2016-11-29T20:24:42.506552 #3788] DEBUG -- : 11
D, [2016-11-29T20:24:42.506733 #3788] DEBUG -- : 11
D, [2016-11-29T20:24:42.506934 #3788] DEBUG -- : 11
D, [2016-11-29T20:24:42.507719 #3788] DEBUG -- : 46
D, [2016-11-29T20:24:42.507863 #3788] DEBUG -- : 39
D, [2016-11-29T20:24:42.508009 #3788] DEBUG -- : 40
D, [2016-11-29T22:55:17.158729 #2183] DEBUG -- : 7
D, [2016-11-29T22:55:17.159669 #2183] DEBUG -- : 7
D, [2016-11-29T22:55:17.159740 #2183] DEBUG -- : 7
D, [2016-11-29T22:55:20.093239 #2183] DEBUG -- : {:right=>[#<Executable:0x00563e0b624248 @path="//lib", @name="lib">], :down=>[#<Directory:0x00563e0b628078 @path="//bin", @name="bin">, #<Directory:0x00563e0b6273a8 @path="//boot", @name="boot">, #<Directory:0x00563e0b6265e8 @path="//dev", @name="dev">, #<Directory:0x00563e0b625670 @path="//etc", @name="etc">, #<Directory:0x00563e0b624c48 @path="//home", @name="home">, #<Directory:0x00563e0b6238c0 @path="//lib32", @name="lib32">, #<Directory:0x00563e0b622ec0 @path="//lib64", @name="lib64">, #<Directory:0x00563e0b622678 @path="//lost+found", @name="lost+found">, #<Directory:0x00563e0b621db8 @path="//media", @name="media">, #<Directory:0x00563e0b6214f8 @path="//mnt", @name="mnt">, #<Directory:0x00563e0b620c60 @path="//opt", @name="opt">, #<Directory:0x00563e0b620350 @path="//proc", @name="proc">, #<Directory:0x00563e0b61fba8 @path="//root", @name="root">, #<Directory:0x00563e0b61ef50 @path="//run", @name="run">, #<Directory:0x00563e0b61e5c8 @path="//sbin", @name="sbin">, #<Directory:0x00563e0b61dbf0 @path="//sys", @name="sys">, #<Directory:0x00563e0b61d358 @path="//tmp", @name="tmp">, #<Directory:0x00563e0b61cb38 @path="//usr", @name="usr">, #<Directory:0x00563e0b61c2c8 @path="//var", @name="var">]}
D, [2016-11-29T22:55:20.095742 #2183] DEBUG -- : 20
D, [2016-11-29T22:55:20.096012 #2183] DEBUG -- : 20
D, [2016-11-29T22:55:20.096286 #2183] DEBUG -- : 20
D, [2016-11-29T22:55:20.098070 #2183] DEBUG -- : 1
D, [2016-11-29T22:55:20.098394 #2183] DEBUG -- : 1
D, [2016-11-29T22:55:20.098614 #2183] DEBUG -- : 1
D, [2016-11-29T22:55:21.898763 #2183] DEBUG -- : {:right=>[#<Executable:0x00563e0b5a1488 @path="//lib32/ld-2.22.so", @name="ld-2.22.so">, #<Executable:0x00563e0b5a0bc8 @path="//lib32/ld-linux.so.2", @name="ld-linux.so.2">, #<Executable:0x00563e0b5a02e0 @path="//lib32/libanl-2.22.so", @name="libanl-2.22.so">, #<Executable:0x00563e0b59f9d0 @path="//lib32/libanl.so.1", @name="libanl.so.1">, #<Executable:0x00563e0b59eff8 @path="//lib32/libBrokenLocale-2.22.so", @name="libBrokenLocale-2.22.so">, #<Executable:0x00563e0b59e6e8 @path="//lib32/libBrokenLocale.so.1", @name="libBrokenLocale.so.1">, #<Executable:0x00563e0b59de28 @path="//lib32/libc-2.22.so", @name="libc-2.22.so">, #<Executable:0x00563e0b59d1f8 @path="//lib32/libcidn-2.22.so", @name="libcidn-2.22.so">, #<Executable:0x00563e0b59c730 @path="//lib32/libcidn.so.1", @name="libcidn.so.1">, #<Executable:0x00563e0b59bd08 @path="//lib32/libcrypt-2.22.so", @name="libcrypt-2.22.so">, #<Executable:0x00563e0b59b3f8 @path="//lib32/libcrypt.so.1", @name="libcrypt.so.1">, #<Executable:0x00563e0b59a980 @path="//lib32/libc.so.6", @name="libc.so.6">, #<Executable:0x00563e0b599fd0 @path="//lib32/libdl-2.22.so", @name="libdl-2.22.so">, #<Executable:0x00563e0b5995d0 @path="//lib32/libdl.so.2", @name="libdl.so.2">, #<Executable:0x00563e0b598c20 @path="//lib32/libm-2.22.so", @name="libm-2.22.so">, #<Executable:0x00563e0b598298 @path="//lib32/libmemusage.so", @name="libmemusage.so">, #<Executable:0x00563e0b60b450 @path="//lib32/libm.so.6", @name="libm.so.6">, #<Executable:0x00563e0b6089f8 @path="//lib32/libnsl-2.22.so", @name="libnsl-2.22.so">, #<Executable:0x00563e0b608070 @path="//lib32/libnsl.so.1", @name="libnsl.so.1">, #<Executable:0x00563e0b603570 @path="//lib32/libnss_compat-2.22.so", @name="libnss_compat-2.22.so">, #<Executable:0x00563e0b602aa8 @path="//lib32/libnss_compat.so.2", @name="libnss_compat.so.2">, #<Executable:0x00563e0b602120 @path="//lib32/libnss_db-2.22.so", @name="libnss_db-2.22.so">, #<Executable:0x00563e0b601770 @path="//lib32/libnss_db.so.2", @name="libnss_db.so.2">, #<Executable:0x00563e0b600cd0 @path="//lib32/libnss_dns-2.22.so", @name="libnss_dns-2.22.so">, #<Executable:0x00563e0b600348 @path="//lib32/libnss_dns.so.2", @name="libnss_dns.so.2">, #<Executable:0x00563e0b5fb988 @path="//lib32/libnss_files-2.22.so", @name="libnss_files-2.22.so">, #<Executable:0x00563e0b5fb000 @path="//lib32/libnss_files.so.2", @name="libnss_files.so.2">, #<Executable:0x00563e0b5fa628 @path="//lib32/libnss_hesiod-2.22.so", @name="libnss_hesiod-2.22.so">, #<Executable:0x00563e0b5f9cf0 @path="//lib32/libnss_hesiod.so.2", @name="libnss_hesiod.so.2">, #<Executable:0x00563e0b5f8e18 @path="//lib32/libnss_nis-2.22.so", @name="libnss_nis-2.22.so">, #<Executable:0x00563e0b5f84b8 @path="//lib32/libnss_nisplus-2.22.so", @name="libnss_nisplus-2.22.so">, #<Executable:0x00563e0b5f7a90 @path="//lib32/libnss_nisplus.so.2", @name="libnss_nisplus.so.2">, #<Executable:0x00563e0b5f7108 @path="//lib32/libnss_nis.so.2", @name="libnss_nis.so.2">, #<Executable:0x00563e0b5f6708 @path="//lib32/libpcprofile.so", @name="libpcprofile.so">, #<Executable:0x00563e0b5f5e48 @path="//lib32/libpthread-2.22.so", @name="libpthread-2.22.so">, #<Executable:0x00563e0b5f4fe8 @path="//lib32/libpthread.so.0", @name="libpthread.so.0">, #<Executable:0x00563e0b5f3f58 @path="//lib32/libresolv-2.22.so", @name="libresolv-2.22.so">, #<Executable:0x00563e0b5f3670 @path="//lib32/libresolv.so.2", @name="libresolv.so.2">, #<Executable:0x00563e0b5f28b0 @path="//lib32/librt-2.22.so", @name="librt-2.22.so">, #<Executable:0x00563e0b5f1960 @path="//lib32/librt.so.1", @name="librt.so.1">, #<Executable:0x00563e0b5f0948 @path="//lib32/libSegFault.so", @name="libSegFault.so">, #<Executable:0x00563e0b5ef0e8 @path="//lib32/libthread_db-1.0.so", @name="libthread_db-1.0.so">, #<Executable:0x00563e0b5edea0 @path="//lib32/libthread_db.so.1", @name="libthread_db.so.1">, #<Executable:0x00563e0b5ebcb8 @path="//lib32/libutil-2.22.so", @name="libutil-2.22.so">, #<Executable:0x00563e0b5eb060 @path="//lib32/libutil.so.1", @name="libutil.so.1">], :down=>[]}
D, [2016-11-29T22:55:21.901251 #2183] DEBUG -- : 2
D, [2016-11-29T22:55:21.901394 #2183] DEBUG -- : 2
D, [2016-11-29T22:55:21.901630 #2183] DEBUG -- : 2
D, [2016-11-29T22:55:21.902439 #2183] DEBUG -- : 45
D, [2016-11-29T22:55:21.902614 #2183] DEBUG -- : 39
D, [2016-11-29T22:55:21.902760 #2183] DEBUG -- : 40
D, [2016-11-29T22:55:24.582126 #2183] DEBUG -- : 
D, [2016-11-29T22:55:24.582626 #2183] DEBUG -- : urxvt -hold -e  librt-2.22.so
D, [2016-11-29T22:55:28.027643 #2183] DEBUG -- : nil
D, [2016-11-29T22:55:41.564756 #2223] DEBUG -- : 7
D, [2016-11-29T22:55:41.564920 #2223] DEBUG -- : 7
D, [2016-11-29T22:55:41.564984 #2223] DEBUG -- : 7
D, [2016-11-29T22:55:45.210738 #2223] DEBUG -- : {:right=>[#<Executable:0x00561fac03d550 @path="//lib", @name="lib">], :down=>[#<Directory:0x00561fac040368 @path="//bin", @name="bin">, #<Directory:0x00561fac03f968 @path="//boot", @name="boot">, #<Directory:0x00561fac03ef90 @path="//dev", @name="dev">, #<Directory:0x00561fac03e720 @path="//etc", @name="etc">, #<Directory:0x00561fac03de88 @path="//home", @name="home">, #<Directory:0x00561fac03ccb8 @path="//lib32", @name="lib32">, #<Directory:0x00561fac03c3a8 @path="//lib64", @name="lib64">, #<Directory:0x00561fac03bc78 @path="//lost+found", @name="lost+found">, #<Directory:0x00561fac03afa8 @path="//media", @name="media">, #<Directory:0x00561fac03a648 @path="//mnt", @name="mnt">, #<Directory:0x00561fac039ce8 @path="//opt", @name="opt">, #<Directory:0x00561fac039478 @path="//proc", @name="proc">, #<Directory:0x00561fac038c30 @path="//root", @name="root">, #<Directory:0x00561fac0383e8 @path="//run", @name="run">, #<Directory:0x00561fac037bc8 @path="//sbin", @name="sbin">, #<Directory:0x00561fac037060 @path="//sys", @name="sys">, #<Directory:0x00561fac036688 @path="//tmp", @name="tmp">, #<Directory:0x00561fac035d28 @path="//usr", @name="usr">, #<Directory:0x00561fac035490 @path="//var", @name="var">]}
D, [2016-11-29T22:55:45.212251 #2223] DEBUG -- : 20
D, [2016-11-29T22:55:45.212454 #2223] DEBUG -- : 19
D, [2016-11-29T22:55:45.212708 #2223] DEBUG -- : 20
D, [2016-11-29T22:55:45.213670 #2223] DEBUG -- : 1
D, [2016-11-29T22:55:45.213815 #2223] DEBUG -- : 1
D, [2016-11-29T22:55:45.213911 #2223] DEBUG -- : 1
D, [2016-11-29T22:55:46.861644 #2223] DEBUG -- : {:right=>[#<Executable:0x00561fabfb8080 @path="//usr/lib", @name="lib">, #<Executable:0x00561fac0246e0 @path="//usr/tmp", @name="tmp">], :down=>[#<Directory:0x00561fabfba970 @path="//usr/bin", @name="bin">, #<Directory:0x00561fabfba128 @path="//usr/etc", @name="etc">, #<Directory:0x00561fabfb9520 @path="//usr/games", @name="games">, #<Directory:0x00561fabfb8af8 @path="//usr/include", @name="include">, #<Directory:0x00561fabfb7810 @path="//usr/lib32", @name="lib32">, #<Directory:0x00561fabfb6e38 @path="//usr/lib64", @name="lib64">, #<Directory:0x00561fabfb6488 @path="//usr/libexec", @name="libexec">, #<Directory:0x00561fabfb5ad8 @path="//usr/local", @name="local">, #<Directory:0x00561fabfb51a0 @path="//usr/portage", @name="portage">, #<Directory:0x00561fabfb4818 @path="//usr/sbin", @name="sbin">, #<Directory:0x00561fabfb5b50 @path="//usr/share", @name="share">, #<Directory:0x00561fac0264e0 @path="//usr/src", @name="src">, #<Directory:0x00561fac023d08 @path="//usr/x86_64-pc-linux-gnu", @name="x86_64-pc-linux-gnu">]}
D, [2016-11-29T22:55:46.863603 #2223] DEBUG -- : 15
D, [2016-11-29T22:55:46.863869 #2223] DEBUG -- : 15
D, [2016-11-29T22:55:46.864148 #2223] DEBUG -- : 15
D, [2016-11-29T22:55:46.865030 #2223] DEBUG -- : 2
D, [2016-11-29T22:55:46.865303 #2223] DEBUG -- : 2
D, [2016-11-29T22:55:46.865568 #2223] DEBUG -- : 2
D, [2016-11-29T22:55:51.614176 #2223] DEBUG -- : 7
D, [2016-11-29T22:55:51.614623 #2223] DEBUG -- : 7
D, [2016-11-29T22:55:51.614915 #2223] DEBUG -- : 7
D, [2016-11-29T22:55:53.136823 #2223] DEBUG -- : {:right=>[#<Executable:0x00561fac010190 @path="//lib", @name="lib">], :down=>[#<Directory:0x00561fac013a20 @path="//bin", @name="bin">, #<Directory:0x00561fac013160 @path="//boot", @name="boot">, #<Directory:0x00561fac012850 @path="//dev", @name="dev">, #<Directory:0x00561fac011fe0 @path="//etc", @name="etc">, #<Directory:0x00561fac011428 @path="//home", @name="home">, #<Directory:0x00561fac00f9c0 @path="//lib32", @name="lib32">, #<Directory:0x00561fac00ef98 @path="//lib64", @name="lib64">, #<Directory:0x00561fac00e228 @path="//lost+found", @name="lost+found">, #<Directory:0x00561fac00d328 @path="//media", @name="media">, #<Directory:0x00561fac00c4a0 @path="//mnt", @name="mnt">, #<Directory:0x00561fac00adf8 @path="//opt", @name="opt">, #<Directory:0x00561fac008c38 @path="//proc", @name="proc">, #<Directory:0x00561fac007ae0 @path="//root", @name="root">, #<Directory:0x00561fac007018 @path="//run", @name="run">, #<Directory:0x00561fac0065a0 @path="//sbin", @name="sbin">, #<Directory:0x00561fac005b00 @path="//sys", @name="sys">, #<Directory:0x00561fac004cc8 @path="//tmp", @name="tmp">, #<Directory:0x00561fac004278 @path="//usr", @name="usr">, #<Directory:0x00561fac0036c0 @path="//var", @name="var">]}
D, [2016-11-29T22:55:53.138683 #2223] DEBUG -- : 20
D, [2016-11-29T22:55:53.139082 #2223] DEBUG -- : 19
D, [2016-11-29T22:55:53.139373 #2223] DEBUG -- : 20
D, [2016-11-29T22:55:53.140156 #2223] DEBUG -- : 1
D, [2016-11-29T22:55:53.140431 #2223] DEBUG -- : 1
D, [2016-11-29T22:55:53.140812 #2223] DEBUG -- : 1
D, [2016-11-29T22:56:11.460900 #2223] DEBUG -- : {:right=>[#<Executable:0x00561fabfc25a8 @path="//usr/lib", @name="lib">, #<Executable:0x00561fabfaf9d0 @path="//usr/tmp", @name="tmp">], :down=>[#<Directory:0x00561fabfc6fe0 @path="//usr/bin", @name="bin">, #<Directory:0x00561fabfc4d80 @path="//usr/etc", @name="etc">, #<Directory:0x00561fabfc39d0 @path="//usr/games", @name="games">, #<Directory:0x00561fabfc2fd0 @path="//usr/include", @name="include">, #<Directory:0x00561fabfc1c48 @path="//usr/lib32", @name="lib32">, #<Directory:0x00561fabfc1298 @path="//usr/lib64", @name="lib64">, #<Directory:0x00561fabfc0820 @path="//usr/libexec", @name="libexec">, #<Directory:0x00561fabfc2a80 @path="//usr/local", @name="local">, #<Directory:0x00561fabfb3850 @path="//usr/portage", @name="portage">, #<Directory:0x00561fabfb2f18 @path="//usr/sbin", @name="sbin">, #<Directory:0x00561fabfb1eb0 @path="//usr/share", @name="share">, #<Directory:0x00561fabfb1140 @path="//usr/src", @name="src">, #<Directory:0x00561fabfadc48 @path="//usr/x86_64-pc-linux-gnu", @name="x86_64-pc-linux-gnu">]}
D, [2016-11-29T22:56:11.463059 #2223] DEBUG -- : 15
D, [2016-11-29T22:56:11.463350 #2223] DEBUG -- : 15
D, [2016-11-29T22:56:11.463639 #2223] DEBUG -- : 15
D, [2016-11-29T22:56:11.464527 #2223] DEBUG -- : 2
D, [2016-11-29T22:56:11.464810 #2223] DEBUG -- : 2
D, [2016-11-29T22:56:11.465190 #2223] DEBUG -- : 2
D, [2016-11-29T22:56:18.955493 #2223] DEBUG -- : {:right=>[#<Executable:0x00561fabe3e600 @path="//lib", @name="lib">], :down=>[#<Directory:0x00561fabe4e460 @path="//bin", @name="bin">, #<Directory:0x00561fabe4bf08 @path="//boot", @name="boot">, #<Directory:0x00561fabe47200 @path="//dev", @name="dev">, #<Directory:0x00561fabe44438 @path="//etc", @name="etc">, #<Directory:0x00561fabe40248 @path="//home", @name="home">, #<Directory:0x00561fabe3c940 @path="//lib32", @name="lib32">, #<Directory:0x00561fabe39e20 @path="//lib64", @name="lib64">, #<Directory:0x00561fabe36248 @path="//lost+found", @name="lost+found">, #<Directory:0x00561fabe357d0 @path="//media", @name="media">, #<Directory:0x00561fabe2d7d8 @path="//mnt", @name="mnt">, #<Directory:0x00561fabe2b7d0 @path="//opt", @name="opt">, #<Directory:0x00561fabe2a5b0 @path="//proc", @name="proc">, #<Directory:0x00561fabe2a3f8 @path="//root", @name="root">, #<Directory:0x00561fabe26280 @path="//run", @name="run">, #<Directory:0x00561fabe24340 @path="//sbin", @name="sbin">, #<Directory:0x00561fabe221f8 @path="//sys", @name="sys">, #<Directory:0x00561fabe1f368 @path="//tmp", @name="tmp">, #<Directory:0x00561fabe1d928 @path="//usr", @name="usr">, #<Directory:0x00561fabe1c2a8 @path="//var", @name="var">]}
D, [2016-11-29T22:56:18.957779 #2223] DEBUG -- : 20
D, [2016-11-29T22:56:18.958061 #2223] DEBUG -- : 19
D, [2016-11-29T22:56:18.958380 #2223] DEBUG -- : 20
D, [2016-11-29T22:56:18.959548 #2223] DEBUG -- : 1
D, [2016-11-29T22:56:18.959846 #2223] DEBUG -- : 1
D, [2016-11-29T22:56:18.960215 #2223] DEBUG -- : 1
D, [2016-11-29T22:57:01.395401 #2262] DEBUG -- : 7
D, [2016-11-29T22:57:01.395562 #2262] DEBUG -- : 7
D, [2016-11-29T22:57:01.395627 #2262] DEBUG -- : 7
D, [2016-11-29T22:57:03.182429 #2262] DEBUG -- : {:right=>[#<Executable:0x005630d5ec8270 @path="//lib", @name="lib">], :down=>[#<Directory:0x005630d5ecc0c8 @path="//bin", @name="bin">, #<Directory:0x005630d5ecb380 @path="//boot", @name="boot">, #<Directory:0x005630d5eca5e8 @path="//dev", @name="dev">, #<Directory:0x005630d5ec9670 @path="//etc", @name="etc">, #<Directory:0x005630d5ec8c98 @path="//home", @name="home">, #<Directory:0x005630d5ec7960 @path="//lib32", @name="lib32">, #<Directory:0x005630d5ec6fb0 @path="//lib64", @name="lib64">, #<Directory:0x005630d5ec6740 @path="//lost+found", @name="lost+found">, #<Directory:0x005630d5ec5e58 @path="//media", @name="media">, #<Directory:0x005630d5ec5598 @path="//mnt", @name="mnt">, #<Directory:0x005630d5ec4d00 @path="//opt", @name="opt">, #<Directory:0x005630d5ec43f0 @path="//proc", @name="proc">, #<Directory:0x005630d5ec3ba8 @path="//root", @name="root">, #<Directory:0x005630d5ec2fc8 @path="//run", @name="run">, #<Directory:0x005630d5ec2640 @path="//sbin", @name="sbin">, #<Directory:0x005630d5ec1c68 @path="//sys", @name="sys">, #<Directory:0x005630d5ec13d0 @path="//tmp", @name="tmp">, #<Directory:0x005630d5ec0bb0 @path="//usr", @name="usr">, #<Directory:0x005630d5ec0340 @path="//var", @name="var">]}
D, [2016-11-29T22:57:03.185025 #2262] DEBUG -- : 20
D, [2016-11-29T22:57:03.185422 #2262] DEBUG -- : 19
D, [2016-11-29T22:57:03.185716 #2262] DEBUG -- : 20
D, [2016-11-29T22:57:03.187407 #2262] DEBUG -- : 1
D, [2016-11-29T22:57:03.187722 #2262] DEBUG -- : 1
D, [2016-11-29T22:57:03.188108 #2262] DEBUG -- : 1
D, [2016-11-29T22:59:21.266094 #2326] DEBUG -- : 7
D, [2016-11-29T22:59:21.266264 #2326] DEBUG -- : 7
D, [2016-11-29T22:59:21.266389 #2326] DEBUG -- : 7
D, [2016-11-29T22:59:23.454826 #2326] DEBUG -- : 11
D, [2016-11-29T22:59:23.455072 #2326] DEBUG -- : 11
D, [2016-11-29T22:59:23.455301 #2326] DEBUG -- : 11
D, [2016-11-29T22:59:23.456070 #2326] DEBUG -- : 46
D, [2016-11-29T22:59:23.456262 #2326] DEBUG -- : 19
D, [2016-11-29T22:59:23.456466 #2326] DEBUG -- : 20
D, [2016-11-29T22:59:25.181198 #2326] DEBUG -- : :down
D, [2016-11-29T22:59:38.286138 #2525] DEBUG -- : 7
D, [2016-11-29T22:59:38.286334 #2525] DEBUG -- : 7
D, [2016-11-29T22:59:38.286402 #2525] DEBUG -- : 7
D, [2016-11-29T22:59:39.684047 #2525] DEBUG -- : 20
D, [2016-11-29T22:59:39.684607 #2525] DEBUG -- : 19
D, [2016-11-29T22:59:39.685028 #2525] DEBUG -- : 20
D, [2016-11-29T22:59:39.686725 #2525] DEBUG -- : 1
D, [2016-11-29T22:59:39.686930 #2525] DEBUG -- : 1
D, [2016-11-29T22:59:39.687166 #2525] DEBUG -- : 1
D, [2016-11-29T22:59:41.047064 #2525] DEBUG -- : :down
D, [2016-11-29T23:06:25.852527 #2720] DEBUG -- : 7
D, [2016-11-29T23:06:25.852706 #2720] DEBUG -- : 7
D, [2016-11-29T23:06:25.852772 #2720] DEBUG -- : 7
D, [2016-11-29T23:06:28.556824 #2720] DEBUG -- : true
D, [2016-11-29T23:06:28.582832 #2720] DEBUG -- : 20
D, [2016-11-29T23:06:28.583210 #2720] DEBUG -- : 19
D, [2016-11-29T23:06:28.583479 #2720] DEBUG -- : 20
D, [2016-11-29T23:06:28.585013 #2720] DEBUG -- : 1
D, [2016-11-29T23:06:28.585333 #2720] DEBUG -- : 1
D, [2016-11-29T23:06:28.585586 #2720] DEBUG -- : 1
D, [2016-11-29T23:06:30.782519 #2720] DEBUG -- : :down
D, [2016-11-29T23:06:30.782978 #2720] DEBUG -- : true
D, [2016-11-29T23:06:56.886507 #2735] DEBUG -- : 7
D, [2016-11-29T23:06:56.886682 #2735] DEBUG -- : 7
D, [2016-11-29T23:06:56.886749 #2735] DEBUG -- : 7
D, [2016-11-29T23:06:58.888518 #2735] DEBUG -- : 10
D, [2016-11-29T23:06:58.914076 #2735] DEBUG -- : 20
D, [2016-11-29T23:06:58.914487 #2735] DEBUG -- : 19
D, [2016-11-29T23:06:58.914773 #2735] DEBUG -- : 20
D, [2016-11-29T23:06:58.916447 #2735] DEBUG -- : 1
D, [2016-11-29T23:06:58.916750 #2735] DEBUG -- : 1
D, [2016-11-29T23:06:58.917032 #2735] DEBUG -- : 1
D, [2016-11-29T23:07:00.664738 #2735] DEBUG -- : :down
D, [2016-11-29T23:07:00.665211 #2735] DEBUG -- : true
D, [2016-11-29T23:07:52.038844 #2760] DEBUG -- : 7
D, [2016-11-29T23:07:52.039017 #2760] DEBUG -- : 7
D, [2016-11-29T23:07:52.039083 #2760] DEBUG -- : 7
D, [2016-11-29T23:07:53.842931 #2760] DEBUG -- : nil
D, [2016-11-29T23:07:53.868108 #2760] DEBUG -- : 20
D, [2016-11-29T23:07:53.868474 #2760] DEBUG -- : 19
D, [2016-11-29T23:07:53.868877 #2760] DEBUG -- : 20
D, [2016-11-29T23:07:53.870614 #2760] DEBUG -- : 1
D, [2016-11-29T23:07:53.870943 #2760] DEBUG -- : 1
D, [2016-11-29T23:07:53.871326 #2760] DEBUG -- : 1
D, [2016-11-29T23:07:55.619607 #2760] DEBUG -- : :down
D, [2016-11-29T23:07:59.462063 #2760] DEBUG -- : :down
D, [2016-11-29T23:08:01.100173 #2760] DEBUG -- : nil
D, [2016-11-29T23:08:01.122132 #2760] DEBUG -- : 15
D, [2016-11-29T23:08:01.122533 #2760] DEBUG -- : 15
D, [2016-11-29T23:08:01.122830 #2760] DEBUG -- : 15
D, [2016-11-29T23:08:01.123853 #2760] DEBUG -- : 2
D, [2016-11-29T23:08:01.124150 #2760] DEBUG -- : 2
D, [2016-11-29T23:08:01.124429 #2760] DEBUG -- : 2
D, [2016-11-29T23:08:06.627565 #2760] DEBUG -- : nil
D, [2016-11-29T23:08:06.646284 #2760] DEBUG -- : 7
D, [2016-11-29T23:08:06.646921 #2760] DEBUG -- : 7
D, [2016-11-29T23:08:06.647445 #2760] DEBUG -- : 7
D, [2016-11-29T23:08:06.648608 #2760] DEBUG -- : 0
D, [2016-11-29T23:08:06.648954 #2760] DEBUG -- : 18
D, [2016-11-29T23:08:06.649248 #2760] DEBUG -- : 0
D, [2016-11-29T23:08:14.533635 #2760] DEBUG -- : nil
D, [2016-11-29T23:08:14.534463 #2760] DEBUG -- : 7
D, [2016-11-29T23:08:14.534802 #2760] DEBUG -- : 7
D, [2016-11-29T23:08:14.535200 #2760] DEBUG -- : 7
D, [2016-11-29T23:08:15.734383 #2760] DEBUG -- : nil
D, [2016-11-29T23:08:15.757530 #2760] DEBUG -- : 20
D, [2016-11-29T23:08:15.757784 #2760] DEBUG -- : 19
D, [2016-11-29T23:08:15.757987 #2760] DEBUG -- : 20
D, [2016-11-29T23:08:15.758765 #2760] DEBUG -- : 1
D, [2016-11-29T23:08:15.759061 #2760] DEBUG -- : 1
D, [2016-11-29T23:08:15.759445 #2760] DEBUG -- : 1
D, [2016-11-29T23:08:17.183971 #2760] DEBUG -- : nil
D, [2016-11-29T23:08:17.251691 #2760] DEBUG -- : 2
D, [2016-11-29T23:08:17.251949 #2760] DEBUG -- : 2
D, [2016-11-29T23:08:17.252101 #2760] DEBUG -- : 2
D, [2016-11-29T23:08:17.252750 #2760] DEBUG -- : 45
D, [2016-11-29T23:08:17.252924 #2760] DEBUG -- : 19
D, [2016-11-29T23:08:17.253083 #2760] DEBUG -- : 20
D, [2016-11-29T23:08:18.925264 #2760] DEBUG -- : :down
D, [2016-11-29T23:08:20.085513 #2760] DEBUG -- : :down
D, [2016-11-29T23:08:23.839265 #2760] DEBUG -- : nil
D, [2016-11-29T23:08:23.839830 #2760] DEBUG -- : 7
D, [2016-11-29T23:08:23.840106 #2760] DEBUG -- : 7
D, [2016-11-29T23:08:23.840389 #2760] DEBUG -- : 7
D, [2016-11-29T23:08:24.973502 #2760] DEBUG -- : nil
D, [2016-11-29T23:08:24.995214 #2760] DEBUG -- : 20
D, [2016-11-29T23:08:24.996042 #2760] DEBUG -- : 19
D, [2016-11-29T23:08:24.996252 #2760] DEBUG -- : 20
D, [2016-11-29T23:08:24.996710 #2760] DEBUG -- : 1
D, [2016-11-29T23:08:24.996905 #2760] DEBUG -- : 1
D, [2016-11-29T23:08:24.997047 #2760] DEBUG -- : 1
D, [2016-11-29T23:08:27.288645 #2760] DEBUG -- : nil
D, [2016-11-29T23:08:27.359426 #2760] DEBUG -- : 17
D, [2016-11-29T23:08:27.359574 #2760] DEBUG -- : 17
D, [2016-11-29T23:08:27.359652 #2760] DEBUG -- : 17
D, [2016-11-29T23:08:27.360082 #2760] DEBUG -- : 188
D, [2016-11-29T23:08:27.360200 #2760] DEBUG -- : 19
D, [2016-11-29T23:08:27.360276 #2760] DEBUG -- : 20
D, [2016-11-29T23:08:50.206750 #2760] DEBUG -- : nil
D, [2016-11-29T23:08:50.220650 #2760] DEBUG -- : 3
D, [2016-11-29T23:08:50.221050 #2760] DEBUG -- : 3
D, [2016-11-29T23:08:50.221315 #2760] DEBUG -- : 3
D, [2016-11-29T23:08:50.222077 #2760] DEBUG -- : 0
D, [2016-11-29T23:08:50.222374 #2760] DEBUG -- : 18
D, [2016-11-29T23:08:50.222637 #2760] DEBUG -- : 0
D, [2016-11-29T23:08:53.841762 #2760] DEBUG -- : nil
D, [2016-11-29T23:08:53.915698 #2760] DEBUG -- : 17
D, [2016-11-29T23:08:53.915832 #2760] DEBUG -- : 17
D, [2016-11-29T23:08:53.915900 #2760] DEBUG -- : 17
D, [2016-11-29T23:08:53.916282 #2760] DEBUG -- : 188
D, [2016-11-29T23:08:53.916368 #2760] DEBUG -- : 19
D, [2016-11-29T23:08:53.916437 #2760] DEBUG -- : 20
D, [2016-11-29T23:08:55.080885 #2760] DEBUG -- : nil
D, [2016-11-29T23:08:55.098033 #2760] DEBUG -- : 3
D, [2016-11-29T23:08:55.098410 #2760] DEBUG -- : 3
D, [2016-11-29T23:08:55.098679 #2760] DEBUG -- : 3
D, [2016-11-29T23:08:55.099544 #2760] DEBUG -- : 1
D, [2016-11-29T23:08:55.099810 #2760] DEBUG -- : 1
D, [2016-11-29T23:08:55.100071 #2760] DEBUG -- : 1
D, [2016-11-29T23:08:56.567750 #2760] DEBUG -- : nil
D, [2016-11-29T23:08:56.640602 #2760] DEBUG -- : 17
D, [2016-11-29T23:08:56.640730 #2760] DEBUG -- : 17
D, [2016-11-29T23:08:56.640800 #2760] DEBUG -- : 17
D, [2016-11-29T23:08:56.641155 #2760] DEBUG -- : 188
D, [2016-11-29T23:08:56.641238 #2760] DEBUG -- : 19
D, [2016-11-29T23:08:56.641307 #2760] DEBUG -- : 20
D, [2016-11-29T23:08:57.786943 #2760] DEBUG -- : nil
D, [2016-11-29T23:08:57.804608 #2760] DEBUG -- : 3
D, [2016-11-29T23:08:57.804934 #2760] DEBUG -- : 3
D, [2016-11-29T23:08:57.805202 #2760] DEBUG -- : 3
D, [2016-11-29T23:08:57.806029 #2760] DEBUG -- : 1
D, [2016-11-29T23:08:57.806294 #2760] DEBUG -- : 1
D, [2016-11-29T23:08:57.806614 #2760] DEBUG -- : 1
D, [2016-11-29T23:08:59.500280 #2760] DEBUG -- : nil
D, [2016-11-29T23:08:59.572341 #2760] DEBUG -- : 17
D, [2016-11-29T23:08:59.572492 #2760] DEBUG -- : 17
D, [2016-11-29T23:08:59.572580 #2760] DEBUG -- : 17
D, [2016-11-29T23:08:59.573083 #2760] DEBUG -- : 188
D, [2016-11-29T23:08:59.573200 #2760] DEBUG -- : 19
D, [2016-11-29T23:08:59.573286 #2760] DEBUG -- : 20
D, [2016-11-29T23:09:01.193520 #2760] DEBUG -- : nil
D, [2016-11-29T23:09:01.210623 #2760] DEBUG -- : 3
D, [2016-11-29T23:09:01.210836 #2760] DEBUG -- : 3
D, [2016-11-29T23:09:01.210986 #2760] DEBUG -- : 3
D, [2016-11-29T23:09:01.211510 #2760] DEBUG -- : 7
D, [2016-11-29T23:09:01.211660 #2760] DEBUG -- : 7
D, [2016-11-29T23:09:01.211808 #2760] DEBUG -- : 7
D, [2016-11-29T23:09:03.588839 #2760] DEBUG -- : nil
D, [2016-11-29T23:09:03.664082 #2760] DEBUG -- : 17
D, [2016-11-29T23:09:03.664219 #2760] DEBUG -- : 17
D, [2016-11-29T23:09:03.664291 #2760] DEBUG -- : 17
D, [2016-11-29T23:09:03.664642 #2760] DEBUG -- : 188
D, [2016-11-29T23:09:03.664751 #2760] DEBUG -- : 19
D, [2016-11-29T23:09:03.664824 #2760] DEBUG -- : 20
D, [2016-11-29T23:09:05.149608 #2760] DEBUG -- : nil
D, [2016-11-29T23:09:05.174790 #2760] DEBUG -- : 20
D, [2016-11-29T23:09:05.175132 #2760] DEBUG -- : 19
D, [2016-11-29T23:09:05.175404 #2760] DEBUG -- : 20
D, [2016-11-29T23:09:05.176247 #2760] DEBUG -- : 1
D, [2016-11-29T23:09:05.176517 #2760] DEBUG -- : 1
D, [2016-11-29T23:09:05.176779 #2760] DEBUG -- : 1
D, [2016-11-29T23:09:06.677991 #2760] DEBUG -- : nil
D, [2016-11-29T23:09:06.694560 #2760] DEBUG -- : 2
D, [2016-11-29T23:09:06.694907 #2760] DEBUG -- : 2
D, [2016-11-29T23:09:06.695174 #2760] DEBUG -- : 2
D, [2016-11-29T23:09:06.696236 #2760] DEBUG -- : 0
D, [2016-11-29T23:09:06.696507 #2760] DEBUG -- : 18
D, [2016-11-29T23:09:06.696769 #2760] DEBUG -- : 0
D, [2016-11-29T23:09:07.706081 #2760] DEBUG -- : nil
D, [2016-11-29T23:09:07.733245 #2760] DEBUG -- : 20
D, [2016-11-29T23:09:07.733588 #2760] DEBUG -- : 19
D, [2016-11-29T23:09:07.733860 #2760] DEBUG -- : 20
D, [2016-11-29T23:09:07.734976 #2760] DEBUG -- : 1
D, [2016-11-29T23:09:07.735163 #2760] DEBUG -- : 1
D, [2016-11-29T23:09:07.735320 #2760] DEBUG -- : 1
D, [2016-11-29T23:09:10.389183 #2760] DEBUG -- : nil
D, [2016-11-29T23:09:10.405654 #2760] DEBUG -- : 2
D, [2016-11-29T23:09:10.405994 #2760] DEBUG -- : 2
D, [2016-11-29T23:09:10.406256 #2760] DEBUG -- : 2
D, [2016-11-29T23:09:10.407099 #2760] DEBUG -- : 0
D, [2016-11-29T23:09:10.407368 #2760] DEBUG -- : 18
D, [2016-11-29T23:09:10.407628 #2760] DEBUG -- : 0
D, [2016-11-29T23:09:13.112642 #2760] DEBUG -- : nil
D, [2016-11-29T23:09:13.138763 #2760] DEBUG -- : 20
D, [2016-11-29T23:09:13.139095 #2760] DEBUG -- : 19
D, [2016-11-29T23:09:13.139366 #2760] DEBUG -- : 20
D, [2016-11-29T23:09:13.140603 #2760] DEBUG -- : 1
D, [2016-11-29T23:09:13.140897 #2760] DEBUG -- : 1
D, [2016-11-29T23:09:13.141159 #2760] DEBUG -- : 1
D, [2016-11-29T23:09:15.023714 #2760] DEBUG -- : nil
D, [2016-11-29T23:09:15.040249 #2760] DEBUG -- : 2
D, [2016-11-29T23:09:15.040588 #2760] DEBUG -- : 2
D, [2016-11-29T23:09:15.040852 #2760] DEBUG -- : 2
D, [2016-11-29T23:09:15.041642 #2760] DEBUG -- : 0
D, [2016-11-29T23:09:15.041902 #2760] DEBUG -- : 18
D, [2016-11-29T23:09:15.042163 #2760] DEBUG -- : 0
D, [2016-11-29T23:09:28.021756 #2760] DEBUG -- : nil
D, [2016-11-29T23:09:28.047734 #2760] DEBUG -- : 20
D, [2016-11-29T23:09:28.048068 #2760] DEBUG -- : 19
D, [2016-11-29T23:09:28.048552 #2760] DEBUG -- : 20
D, [2016-11-29T23:09:28.049641 #2760] DEBUG -- : 1
D, [2016-11-29T23:09:28.049936 #2760] DEBUG -- : 1
D, [2016-11-29T23:09:28.050198 #2760] DEBUG -- : 1
D, [2016-11-29T23:09:29.715347 #2760] DEBUG -- : nil
D, [2016-11-29T23:09:29.732687 #2760] DEBUG -- : 3
D, [2016-11-29T23:09:29.733016 #2760] DEBUG -- : 3
D, [2016-11-29T23:09:29.733280 #2760] DEBUG -- : 3
D, [2016-11-29T23:09:29.734068 #2760] DEBUG -- : 0
D, [2016-11-29T23:09:29.734403 #2760] DEBUG -- : 18
D, [2016-11-29T23:09:29.734670 #2760] DEBUG -- : 0
D, [2016-11-29T23:11:19.458813 #2760] DEBUG -- : nil
D, [2016-11-29T23:11:19.484420 #2760] DEBUG -- : 20
D, [2016-11-29T23:11:19.484836 #2760] DEBUG -- : 19
D, [2016-11-29T23:11:19.485106 #2760] DEBUG -- : 20
D, [2016-11-29T23:11:19.486099 #2760] DEBUG -- : 1
D, [2016-11-29T23:11:19.486416 #2760] DEBUG -- : 1
D, [2016-11-29T23:11:19.486788 #2760] DEBUG -- : 1
D, [2016-11-29T23:11:21.197079 #2760] DEBUG -- : nil
D, [2016-11-29T23:11:21.197619 #2760] DEBUG -- : 7
D, [2016-11-29T23:11:21.197868 #2760] DEBUG -- : 7
D, [2016-11-29T23:11:21.198127 #2760] DEBUG -- : 7
D, [2016-11-29T23:11:38.397623 #2760] DEBUG -- : nil
eneral Commands Manual                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the "Security Considerations" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.

       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).

       -D debugoptions
              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order
              to protect it from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference

              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which
              characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.

       -ok    Supported.  Interpretation of the response is according to the "yes" and "no" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what
       is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.



D, [2016-11-29T23:11:38.843852 #2760] DEBUG -- : 16
D, [2016-11-29T23:11:38.844038 #2760] DEBUG -- : 16
D, [2016-11-29T23:11:38.844168 #2760] DEBUG -- : 16
D, [2016-11-29T23:11:40.192108 #2760] DEBUG -- : nil
D, [2016-11-29T23:11:40.966451 #2760] DEBUG -- : nil
D, [2016-11-29T23:11:41.817616 #2760] DEBUG -- : nil
D, [2016-11-29T23:11:42.916401 #2760] DEBUG -- : nil
D, [2016-11-29T23:11:45.099822 #2760] DEBUG -- : nil
D, [2016-11-29T23:11:46.223735 #2760] DEBUG -- : nil
D, [2016-11-29T23:11:46.972695 #2760] DEBUG -- : nil
D, [2016-11-29T23:11:50.795922 #2760] DEBUG -- : nil
D, [2016-11-29T23:11:51.544171 #2760] DEBUG -- : nil
D, [2016-11-29T23:11:52.754754 #2760] DEBUG -- : nil
D, [2016-11-29T23:14:31.868754 #3074] DEBUG -- : 7
D, [2016-11-29T23:14:31.868911 #3074] DEBUG -- : 7
D, [2016-11-29T23:14:31.868975 #3074] DEBUG -- : 7
D, [2016-11-29T23:14:46.091094 #3082] DEBUG -- : 7
D, [2016-11-29T23:14:46.091250 #3082] DEBUG -- : 7
D, [2016-11-29T23:14:46.091313 #3082] DEBUG -- : 7
D, [2016-11-29T23:15:15.097464 #3082] DEBUG -- : urxvt -hold -e  
D, [2016-11-29T23:15:16.337912 #3082] DEBUG -- : urxvt -hold -e  
D, [2016-11-29T23:15:16.901780 #3082] DEBUG -- : urxvt -hold -e  
D, [2016-11-29T23:15:18.619803 #3082] DEBUG -- : urxvt -hold -e  
D, [2016-11-29T23:15:19.266623 #3082] DEBUG -- : urxvt -hold -e  
D, [2016-11-29T23:15:19.855724 #3082] DEBUG -- : urxvt -hold -e  
D, [2016-11-29T23:15:23.496535 #3082] DEBUG -- : urxvt -hold -e  
eneral Commands Manual                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the "Security Considerations" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.

       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).

       -D debugoptions
              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order
              to protect it from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference

              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which
              characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.

       -ok    Supported.  Interpretation of the response is according to the "yes" and "no" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what
       is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.



D, [2016-11-29T23:15:28.416233 #3082] DEBUG -- : 16
D, [2016-11-29T23:15:28.416412 #3082] DEBUG -- : 16
D, [2016-11-29T23:15:28.416538 #3082] DEBUG -- : 16
D, [2016-11-29T23:16:09.538743 #3151] DEBUG -- : 7
D, [2016-11-29T23:16:09.538900 #3151] DEBUG -- : 7
D, [2016-11-29T23:16:09.538966 #3151] DEBUG -- : 7
D, [2016-11-29T23:16:12.671227 #3153] DEBUG -- : 7
D, [2016-11-29T23:16:12.671386 #3153] DEBUG -- : 7
D, [2016-11-29T23:16:12.671451 #3153] DEBUG -- : 7
eneral Commands Manual                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the "Security Considerations" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.

       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).

       -D debugoptions
              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order
              to protect it from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference

              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which
              characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.

       -ok    Supported.  Interpretation of the response is according to the "yes" and "no" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what
       is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.



D, [2016-11-29T23:16:14.745479 #3153] DEBUG -- : 16
D, [2016-11-29T23:16:14.745623 #3153] DEBUG -- : 16
D, [2016-11-29T23:16:14.745709 #3153] DEBUG -- : 16
D, [2016-11-29T23:21:58.956002 #3153] DEBUG -- : :down
D, [2016-11-29T23:22:01.143876 #3153] DEBUG -- : :down
D, [2016-11-29T23:22:01.752536 #3153] DEBUG -- : :down
D, [2016-11-29T23:22:16.365525 #3153] DEBUG -- : :down
D, [2016-11-29T23:22:17.097505 #3153] DEBUG -- : :down
D, [2016-11-29T23:22:17.606944 #3153] DEBUG -- : :down
D, [2016-11-29T23:22:17.791835 #3153] DEBUG -- : :down
D, [2016-11-29T23:22:36.628609 #3359] DEBUG -- : 7
D, [2016-11-29T23:22:36.628773 #3359] DEBUG -- : 7
D, [2016-11-29T23:22:36.628840 #3359] DEBUG -- : 7
eneral Commands Manual                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the "Security Considerations" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.

       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).

       -D debugoptions
              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order
              to protect it from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference

              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which
              characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.

       -ok    Supported.  Interpretation of the response is according to the "yes" and "no" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what
       is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        FIND(1)

D, [2016-11-29T23:22:38.425943 #3359] DEBUG -- : 16
D, [2016-11-29T23:22:38.426114 #3359] DEBUG -- : 16
D, [2016-11-29T23:22:38.426200 #3359] DEBUG -- : 16
D, [2016-11-29T23:22:43.555563 #3359] DEBUG -- : :down
D, [2016-11-29T23:22:45.368693 #3359] DEBUG -- : :down
D, [2016-11-29T23:22:46.075228 #3359] DEBUG -- : :down
D, [2016-11-29T23:22:46.689399 #3359] DEBUG -- : :down
D, [2016-11-29T23:22:47.087419 #3359] DEBUG -- : :down
D, [2016-11-29T23:22:50.614275 #3359] DEBUG -- : :down
D, [2016-11-29T23:22:51.352964 #3359] DEBUG -- : :down
D, [2016-11-29T23:22:51.894290 #3359] DEBUG -- : :down
D, [2016-11-29T23:28:41.691303 #3359] DEBUG -- : :down
D, [2016-11-29T23:29:08.270956 #3548] DEBUG -- : 7
D, [2016-11-29T23:29:08.271130 #3548] DEBUG -- : 7
D, [2016-11-29T23:29:08.271198 #3548] DEBUG -- : 7
eneral Commands Manual                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the "Security Considerations" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.

       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).

       -D debugoptions
              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order
              to protect it from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference

              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which
              characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.

       -ok    Supported.  Interpretation of the response is according to the "yes" and "no" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what
       is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.



D, [2016-11-29T23:29:10.771274 #3548] DEBUG -- : 16
D, [2016-11-29T23:29:10.771420 #3548] DEBUG -- : 16
D, [2016-11-29T23:29:10.771512 #3548] DEBUG -- : 16
D, [2016-11-29T23:29:13.185958 #3548] DEBUG -- : :down
D, [2016-11-29T23:29:13.987474 #3548] DEBUG -- : :down
D, [2016-11-29T23:29:15.336653 #3548] DEBUG -- : :down
D, [2016-11-29T23:29:43.696293 #3587] DEBUG -- : 7
D, [2016-11-29T23:29:43.696466 #3587] DEBUG -- : 7
D, [2016-11-29T23:29:43.696534 #3587] DEBUG -- : 7
eneral Commands Manual                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the "Security Considerations" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.

       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).

       -D debugoptions
              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order
              to protect it from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference

              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which
              characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.

       -ok    Supported.  Interpretation of the response is according to the "yes" and "no" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what
       is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.



D, [2016-11-29T23:29:45.585683 #3587] DEBUG -- : 16
D, [2016-11-29T23:29:45.600751 #3587] DEBUG -- : 16
D, [2016-11-29T23:29:45.600903 #3587] DEBUG -- : 16
D, [2016-11-29T23:29:49.698884 #3587] DEBUG -- : :down
D, [2016-11-29T23:29:51.459637 #3587] DEBUG -- : :down
D, [2016-11-29T23:29:52.189743 #3587] DEBUG -- : :down
D, [2016-11-29T23:29:53.516217 #3587] DEBUG -- : :down
D, [2016-11-29T23:29:54.247534 #3587] DEBUG -- : :down
D, [2016-11-29T23:29:54.780093 #3587] DEBUG -- : :down
D, [2016-11-29T23:29:55.321379 #3587] DEBUG -- : :down
D, [2016-11-29T23:29:56.068984 #3587] DEBUG -- : :down
D, [2016-11-29T23:29:56.624451 #3587] DEBUG -- : :down
D, [2016-11-29T23:29:57.270295 #3587] DEBUG -- : :down
D, [2016-11-29T23:29:57.849147 #3587] DEBUG -- : :down
D, [2016-11-29T23:29:58.319008 #3587] DEBUG -- : :down
D, [2016-11-29T23:30:51.626658 #3587] DEBUG -- : #<MatchData "-P  " 1:"-P" 2:"P" 3:" " 4:" ">
D, [2016-11-29T23:30:51.627519 #3587] DEBUG -- : #<MatchData "-L  " 1:"-L" 2:"L" 3:" " 4:" ">
D, [2016-11-29T23:30:51.627968 #3587] DEBUG -- : #<MatchData "-H  " 1:"-H" 2:"H" 3:" " 4:" ">
D, [2016-11-29T23:30:51.628387 #3587] DEBUG -- : #<MatchData "-D debugoptions" 1:"-D" 2:"D" 3:" " 4:"debugoptions">
D, [2016-11-29T23:30:51.628809 #3587] DEBUG -- : #<MatchData "-Olevel" 1:"-Olevel" 2:"Olevel" 3:"" 4:"">
D, [2016-11-29T23:30:51.630074 #3587] DEBUG -- : 5
D, [2016-11-29T23:30:51.630442 #3587] DEBUG -- : 18
D, [2016-11-29T23:30:51.630840 #3587] DEBUG -- : 5
D, [2016-11-29T23:34:56.700236 #3759] DEBUG -- : 7
D, [2016-11-29T23:34:56.700402 #3759] DEBUG -- : 7
D, [2016-11-29T23:34:56.700468 #3759] DEBUG -- : 7
eneral Commands Manual                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the "Security Considerations" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.

       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).

       -D debugoptions
              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order
              to protect it from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference

              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which
              characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.

       -ok    Supported.  Interpretation of the response is according to the "yes" and "no" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what
       is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.



D, [2016-11-29T23:34:58.433267 #3759] DEBUG -- : 16
D, [2016-11-29T23:34:58.433421 #3759] DEBUG -- : 16
D, [2016-11-29T23:34:58.433514 #3759] DEBUG -- : 16
D, [2016-11-29T23:36:03.109557 #3815] DEBUG -- : 7
D, [2016-11-29T23:36:03.109718 #3815] DEBUG -- : 7
D, [2016-11-29T23:36:03.109784 #3815] DEBUG -- : 7
D, [2016-11-29T23:41:39.807580 #3979] DEBUG -- : 7
D, [2016-11-29T23:41:39.807747 #3979] DEBUG -- : 7
D, [2016-11-29T23:41:39.807812 #3979] DEBUG -- : 7
D, [2016-11-29T23:41:52.690180 #3987] DEBUG -- : 7
D, [2016-11-29T23:41:52.690370 #3987] DEBUG -- : 7
D, [2016-11-29T23:41:52.690439 #3987] DEBUG -- : 7
D, [2016-11-29T23:42:12.827127 #3997] DEBUG -- : 7
D, [2016-11-29T23:42:12.827295 #3997] DEBUG -- : 7
D, [2016-11-29T23:42:12.827361 #3997] DEBUG -- : 7
D, [2016-11-29T23:43:21.691467 #4038] DEBUG -- : 7
D, [2016-11-29T23:43:21.691635 #4038] DEBUG -- : 7
D, [2016-11-29T23:43:21.691703 #4038] DEBUG -- : 7
D, [2016-11-29T23:44:14.353340 #4064] DEBUG -- : 7
D, [2016-11-29T23:44:14.353535 #4064] DEBUG -- : 7
D, [2016-11-29T23:44:14.353604 #4064] DEBUG -- : 7
D, [2016-11-29T23:45:33.474017 #4101] DEBUG -- : 7
D, [2016-11-29T23:45:33.474189 #4101] DEBUG -- : 7
D, [2016-11-29T23:45:33.474255 #4101] DEBUG -- : 7
D, [2016-11-29T23:45:51.056863 #4111] DEBUG -- : 0
D, [2016-11-29T23:45:51.057467 #4111] DEBUG -- : 7
D, [2016-11-29T23:45:51.057585 #4111] DEBUG -- : 7
D, [2016-11-29T23:45:51.057649 #4111] DEBUG -- : 7
D, [2016-11-29T23:45:51.057911 #4111] DEBUG -- : 21
D, [2016-11-29T23:45:51.058080 #4111] DEBUG -- : 21
D, [2016-11-29T23:46:03.040800 #4121] DEBUG -- : 0
D, [2016-11-29T23:46:03.041374 #4121] DEBUG -- : 7
D, [2016-11-29T23:46:03.041479 #4121] DEBUG -- : 7
D, [2016-11-29T23:46:03.041543 #4121] DEBUG -- : 7
D, [2016-11-29T23:46:03.041819 #4121] DEBUG -- : 21
D, [2016-11-29T23:46:03.042046 #4121] DEBUG -- : 21
D, [2016-11-29T23:46:10.877071 #4128] DEBUG -- : 0
D, [2016-11-29T23:46:16.233756 #4133] DEBUG -- : 0
D, [2016-11-29T23:46:26.816088 #4139] DEBUG -- : 0
D, [2016-11-29T23:46:32.898334 #4143] DEBUG -- : 0
D, [2016-11-29T23:46:32.898944 #4143] DEBUG -- : 7
D, [2016-11-29T23:46:32.899060 #4143] DEBUG -- : 7
D, [2016-11-29T23:46:32.899123 #4143] DEBUG -- : 7
D, [2016-11-29T23:46:32.899419 #4143] DEBUG -- : 21
D, [2016-11-29T23:46:32.899590 #4143] DEBUG -- : 21
D, [2016-11-29T23:46:37.658356 #4147] DEBUG -- : 0
D, [2016-11-29T23:46:37.658938 #4147] DEBUG -- : 7
D, [2016-11-29T23:46:37.659047 #4147] DEBUG -- : 7
D, [2016-11-29T23:46:37.659109 #4147] DEBUG -- : 7
D, [2016-11-29T23:46:37.659395 #4147] DEBUG -- : 21
D, [2016-11-29T23:46:37.659593 #4147] DEBUG -- : 21
D, [2016-11-29T23:47:03.973292 #4159] DEBUG -- : lines : 0
D, [2016-11-29T23:47:03.973887 #4159] DEBUG -- : 7
D, [2016-11-29T23:47:03.973996 #4159] DEBUG -- : 7
D, [2016-11-29T23:47:03.974060 #4159] DEBUG -- : 7
D, [2016-11-29T23:47:03.974350 #4159] DEBUG -- : lines : 21
D, [2016-11-29T23:47:03.974645 #4159] DEBUG -- : lines : 21
D, [2016-11-29T23:47:26.305952 #4171] DEBUG -- : lines : Fixnum
D, [2016-11-29T23:47:26.306593 #4171] DEBUG -- : 7
D, [2016-11-29T23:47:26.306724 #4171] DEBUG -- : 7
D, [2016-11-29T23:47:26.306828 #4171] DEBUG -- : 7
D, [2016-11-29T23:47:26.307114 #4171] DEBUG -- : lines : Fixnum
D, [2016-11-29T23:47:26.307342 #4171] DEBUG -- : lines : Fixnum
D, [2016-11-29T23:47:39.956411 #4179] DEBUG -- : lines : 0
D, [2016-11-29T23:48:17.909816 #4195] DEBUG -- : lines : 0
D, [2016-11-29T23:48:17.910502 #4195] DEBUG -- : 7
D, [2016-11-29T23:48:17.910630 #4195] DEBUG -- : 7
D, [2016-11-29T23:48:17.910693 #4195] DEBUG -- : 7
D, [2016-11-29T23:48:17.911026 #4195] DEBUG -- : lines : 21
D, [2016-11-29T23:48:17.911339 #4195] DEBUG -- : lines : 21
D, [2016-11-29T23:53:29.002215 #4345] DEBUG -- : lines : 0
D, [2016-11-29T23:53:29.002837 #4345] DEBUG -- : 7
D, [2016-11-29T23:53:29.002948 #4345] DEBUG -- : 7
D, [2016-11-29T23:53:29.003029 #4345] DEBUG -- : 7
D, [2016-11-29T23:53:29.003817 #4345] DEBUG -- : lines : 21
D, [2016-11-29T23:53:29.004057 #4345] DEBUG -- : lines : 21
D, [2016-11-29T23:53:32.970905 #4349] DEBUG -- : lines : 0
D, [2016-11-29T23:53:32.971564 #4349] DEBUG -- : 7
D, [2016-11-29T23:53:32.971686 #4349] DEBUG -- : 7
D, [2016-11-29T23:53:32.971749 #4349] DEBUG -- : 7
D, [2016-11-29T23:53:32.972864 #4349] DEBUG -- : lines : 21
D, [2016-11-29T23:53:32.973112 #4349] DEBUG -- : lines : 21
D, [2016-11-29T23:54:00.578877 #4364] DEBUG -- : lines : 0
D, [2016-11-29T23:54:00.579474 #4364] DEBUG -- : 7
D, [2016-11-29T23:54:00.579599 #4364] DEBUG -- : 7
D, [2016-11-29T23:54:00.579662 #4364] DEBUG -- : 7
D, [2016-11-29T23:54:00.580318 #4364] DEBUG -- : lines : 21
D, [2016-11-29T23:54:00.580593 #4364] DEBUG -- : lines : 21
D, [2016-11-29T23:54:00.580778 #4364] DEBUG -- : lines : 21
D, [2016-11-29T23:54:03.678487 #4366] DEBUG -- : lines : 0
D, [2016-11-29T23:54:03.679076 #4366] DEBUG -- : 7
D, [2016-11-29T23:54:03.679186 #4366] DEBUG -- : 7
D, [2016-11-29T23:54:03.679250 #4366] DEBUG -- : 7
D, [2016-11-29T23:54:03.679835 #4366] DEBUG -- : lines : 21
D, [2016-11-29T23:54:03.680054 #4366] DEBUG -- : lines : 21
D, [2016-11-29T23:54:03.680288 #4366] DEBUG -- : lines : 21
D, [2016-11-29T23:54:10.786583 #4372] DEBUG -- : 7
D, [2016-11-29T23:54:10.786750 #4372] DEBUG -- : 7
D, [2016-11-29T23:54:10.786817 #4372] DEBUG -- : 7
D, [2016-11-29T23:54:10.787564 #4372] DEBUG -- : lines : 21
D, [2016-11-29T23:54:13.960737 #4374] DEBUG -- : 7
D, [2016-11-29T23:54:13.960909 #4374] DEBUG -- : 7
D, [2016-11-29T23:54:13.960975 #4374] DEBUG -- : 7
D, [2016-11-29T23:54:13.961615 #4374] DEBUG -- : lines : 21
D, [2016-11-29T23:55:07.052007 #4402] DEBUG -- : 7
D, [2016-11-29T23:55:07.052173 #4402] DEBUG -- : 7
D, [2016-11-29T23:55:07.052240 #4402] DEBUG -- : 7
D, [2016-11-29T23:55:07.052986 #4402] DEBUG -- : lines : 21
D, [2016-11-29T23:55:57.571405 #4426] DEBUG -- : 7
D, [2016-11-29T23:55:57.571572 #4426] DEBUG -- : 7
D, [2016-11-29T23:55:57.571638 #4426] DEBUG -- : 7
D, [2016-11-29T23:55:57.571799 #4426] DEBUG -- : lines : 21
D, [2016-11-29T23:56:08.329199 #4432] DEBUG -- : 7
D, [2016-11-29T23:56:08.329366 #4432] DEBUG -- : 7
D, [2016-11-29T23:56:08.329433 #4432] DEBUG -- : 7
D, [2016-11-29T23:56:08.329607 #4432] DEBUG -- : lines : 21
D, [2016-11-30T00:02:06.269605 #4606] DEBUG -- : 7
D, [2016-11-30T00:02:06.269791 #4606] DEBUG -- : 7
D, [2016-11-30T00:02:06.269863 #4606] DEBUG -- : 7
D, [2016-11-30T00:02:06.270041 #4606] DEBUG -- : lines : 21
D, [2016-11-30T00:02:11.375952 #4606] DEBUG -- : 20
D, [2016-11-30T00:02:11.376331 #4606] DEBUG -- : 19
D, [2016-11-30T00:02:11.376613 #4606] DEBUG -- : 20
D, [2016-11-30T00:02:11.378750 #4606] DEBUG -- : 1
D, [2016-11-30T00:02:11.379053 #4606] DEBUG -- : 1
D, [2016-11-30T00:02:11.379327 #4606] DEBUG -- : 1
D, [2016-11-30T00:02:15.819117 #4606] DEBUG -- : 15
D, [2016-11-30T00:02:15.819461 #4606] DEBUG -- : 15
D, [2016-11-30T00:02:15.819740 #4606] DEBUG -- : 15
D, [2016-11-30T00:02:15.820622 #4606] DEBUG -- : 2
D, [2016-11-30T00:02:15.820911 #4606] DEBUG -- : 2
D, [2016-11-30T00:02:15.821195 #4606] DEBUG -- : 2
D, [2016-11-30T00:02:18.163799 #4606] DEBUG -- : 7
D, [2016-11-30T00:02:18.164006 #4606] DEBUG -- : 7
D, [2016-11-30T00:02:18.164146 #4606] DEBUG -- : 7
D, [2016-11-30T00:02:18.164712 #4606] DEBUG -- : 77
D, [2016-11-30T00:02:18.164855 #4606] DEBUG -- : 19
D, [2016-11-30T00:02:18.164995 #4606] DEBUG -- : 20
D, [2016-11-30T00:02:22.716923 #4606] DEBUG -- : 20
D, [2016-11-30T00:02:22.717287 #4606] DEBUG -- : 19
D, [2016-11-30T00:02:22.717688 #4606] DEBUG -- : 20
D, [2016-11-30T00:02:22.718764 #4606] DEBUG -- : 1
D, [2016-11-30T00:02:22.719074 #4606] DEBUG -- : 1
D, [2016-11-30T00:02:22.719358 #4606] DEBUG -- : 1
D, [2016-11-30T00:02:23.625788 #4606] DEBUG -- : 7
D, [2016-11-30T00:02:23.626172 #4606] DEBUG -- : 7
D, [2016-11-30T00:02:23.626531 #4606] DEBUG -- : 7
eneral Commands Manual                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the "Security Considerations" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.

       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).

       -D debugoptions
              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order
              to protect it from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference

              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which
              characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.

       -ok    Supported.  Interpretation of the response is according to the "yes" and "no" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what
       is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.



D, [2016-11-30T00:02:25.326975 #4606] DEBUG -- : 16
D, [2016-11-30T00:02:25.327109 #4606] DEBUG -- : 16
D, [2016-11-30T00:02:25.327193 #4606] DEBUG -- : 16
D, [2016-11-30T00:02:32.214927 #4606] DEBUG -- : :down
D, [2016-11-30T00:02:33.737308 #4606] DEBUG -- : :down
D, [2016-11-30T00:02:35.149521 #4606] DEBUG -- : :down
D, [2016-11-30T00:04:14.872713 #4690] DEBUG -- : 7
D, [2016-11-30T00:04:14.872911 #4690] DEBUG -- : 7
D, [2016-11-30T00:04:14.872976 #4690] DEBUG -- : 7
D, [2016-11-30T00:04:14.873218 #4690] DEBUG -- : lines : 21
D, [2016-11-30T00:04:25.390685 #4690] DEBUG -- : :down
D, [2016-11-30T00:04:45.329668 #4706] DEBUG -- : 7
D, [2016-11-30T00:04:45.329900 #4706] DEBUG -- : 7
D, [2016-11-30T00:04:45.329981 #4706] DEBUG -- : 7
D, [2016-11-30T00:04:45.330157 #4706] DEBUG -- : lines : 21
D, [2016-11-30T00:05:12.784308 #4718] DEBUG -- : 7
D, [2016-11-30T00:05:12.784478 #4718] DEBUG -- : 7
D, [2016-11-30T00:05:12.784545 #4718] DEBUG -- : 7
D, [2016-11-30T00:05:12.784765 #4718] DEBUG -- : lines : 21
D, [2016-11-30T00:12:43.942375 #4927] DEBUG -- : 7
D, [2016-11-30T00:12:43.942558 #4927] DEBUG -- : 7
D, [2016-11-30T00:12:43.942630 #4927] DEBUG -- : 7
D, [2016-11-30T00:12:43.942840 #4927] DEBUG -- : lines : 21
D, [2016-11-30T00:12:47.619693 #4927] DEBUG -- : FIND(1)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     General Commands Manual                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the "Security Considerations" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.

       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).

       -D debugoptions
              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order
              to protect it from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference

              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which
              characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.

       -ok    Supported.  Interpretation of the response is according to the "yes" and "no" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what
       is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        FIND(1)

D, [2016-11-30T00:12:47.628912 #4927] DEBUG -- : 16
D, [2016-11-30T00:12:47.629088 #4927] DEBUG -- : 16
D, [2016-11-30T00:12:47.629178 #4927] DEBUG -- : 16
D, [2016-11-30T00:12:50.077185 #4927] DEBUG -- : :down
D, [2016-11-30T00:12:51.742753 #4927] DEBUG -- : :down
D, [2016-11-30T00:21:12.738822 #5190] DEBUG -- : 7
D, [2016-11-30T00:21:12.738991 #5190] DEBUG -- : 7
D, [2016-11-30T00:21:12.739057 #5190] DEBUG -- : 7
D, [2016-11-30T00:21:12.739246 #5190] DEBUG -- : lines : 21
D, [2016-11-30T00:21:14.567320 #5190] DEBUG -- : 11
D, [2016-11-30T00:21:14.567603 #5190] DEBUG -- : 11
D, [2016-11-30T00:21:14.567873 #5190] DEBUG -- : 11
D, [2016-11-30T00:21:14.568679 #5190] DEBUG -- : 46
D, [2016-11-30T00:21:14.568890 #5190] DEBUG -- : 19
D, [2016-11-30T00:21:14.569152 #5190] DEBUG -- : 20
D, [2016-11-30T00:21:21.597879 #5190] DEBUG -- : 2
D, [2016-11-30T00:21:21.598234 #5190] DEBUG -- : 2
D, [2016-11-30T00:21:21.598691 #5190] DEBUG -- : 2
D, [2016-11-30T00:21:21.599603 #5190] DEBUG -- : 4
D, [2016-11-30T00:21:21.599924 #5190] DEBUG -- : 4
D, [2016-11-30T00:21:21.600307 #5190] DEBUG -- : 4
D, [2016-11-30T00:21:22.923746 #5190] DEBUG -- : 7
D, [2016-11-30T00:21:22.924142 #5190] DEBUG -- : 7
D, [2016-11-30T00:21:22.924542 #5190] DEBUG -- : 7
eneral Commands Manual                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the "Security Considerations" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.

       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).

       -D debugoptions
              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order
              to protect it from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference

              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which
              characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.

       -ok    Supported.  Interpretation of the response is according to the "yes" and "no" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what
       is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.



D, [2016-11-30T00:21:24.779342 #5190] DEBUG -- : 16
D, [2016-11-30T00:21:24.779501 #5190] DEBUG -- : 16
D, [2016-11-30T00:21:24.779599 #5190] DEBUG -- : 16
D, [2016-11-30T00:21:29.292859 #5190] DEBUG -- : :down
D, [2016-11-30T00:21:29.929715 #5190] DEBUG -- : :down
D, [2016-11-30T00:21:36.144164 #5190] DEBUG -- : #<MatchData "-P  " 1:"-P" 2:"P" 3:" " 4:" ">
D, [2016-11-30T00:21:36.144955 #5190] DEBUG -- : #<MatchData "-L  " 1:"-L" 2:"L" 3:" " 4:" ">
D, [2016-11-30T00:21:36.145414 #5190] DEBUG -- : #<MatchData "-H  " 1:"-H" 2:"H" 3:" " 4:" ">
D, [2016-11-30T00:21:36.145840 #5190] DEBUG -- : #<MatchData "-D debugoptions" 1:"-D" 2:"D" 3:" " 4:"debugoptions">
D, [2016-11-30T00:21:36.146263 #5190] DEBUG -- : #<MatchData "-Olevel" 1:"-Olevel" 2:"Olevel" 3:"" 4:"">
D, [2016-11-30T00:21:36.147249 #5190] DEBUG -- : 5
D, [2016-11-30T00:21:36.149940 #5190] DEBUG -- : 18
D, [2016-11-30T00:21:36.150275 #5190] DEBUG -- : 5
D, [2016-11-30T00:23:04.724764 #5267] DEBUG -- : 7
D, [2016-11-30T00:23:04.724949 #5267] DEBUG -- : 7
D, [2016-11-30T00:23:04.725018 #5267] DEBUG -- : 7
D, [2016-11-30T00:23:04.725240 #5267] DEBUG -- : lines : 21
D, [2016-11-30T00:23:06.485231 #5267] DEBUG -- : FIND(1)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     General Commands Manual                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the "Security Considerations" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.

       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).

       -D debugoptions
              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order
              to protect it from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference

              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which
              characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.

       -ok    Supported.  Interpretation of the response is according to the "yes" and "no" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what
       is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.



D, [2016-11-30T00:23:06.500187 #5267] DEBUG -- : 16
D, [2016-11-30T00:23:06.500367 #5267] DEBUG -- : 16
D, [2016-11-30T00:23:06.500466 #5267] DEBUG -- : 16
D, [2016-11-30T00:23:07.454219 #5267] DEBUG -- : #<MatchData "-P  " 1:"-P" 2:"P" 3:" " 4:" ">
D, [2016-11-30T00:23:07.455087 #5267] DEBUG -- : #<MatchData "-L  " 1:"-L" 2:"L" 3:" " 4:" ">
D, [2016-11-30T00:23:07.455539 #5267] DEBUG -- : #<MatchData "-H  " 1:"-H" 2:"H" 3:" " 4:" ">
D, [2016-11-30T00:23:07.456097 #5267] DEBUG -- : #<MatchData "-D debugoptions" 1:"-D" 2:"D" 3:" " 4:"debugoptions">
D, [2016-11-30T00:23:07.456532 #5267] DEBUG -- : #<MatchData "-Olevel" 1:"-Olevel" 2:"Olevel" 3:"" 4:"">
D, [2016-11-30T00:23:07.457481 #5267] DEBUG -- : 5
D, [2016-11-30T00:23:07.457764 #5267] DEBUG -- : 18
D, [2016-11-30T00:23:07.458052 #5267] DEBUG -- : 5
D, [2016-11-30T00:32:43.024522 #5551] DEBUG -- : 7
D, [2016-11-30T00:32:43.024687 #5551] DEBUG -- : 7
D, [2016-11-30T00:32:43.024752 #5551] DEBUG -- : 7
D, [2016-11-30T00:32:43.024913 #5551] DEBUG -- : lines : 21
eneral Commands Manual                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the "Security Considerations" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.

       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).

       -D debugoptions
              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order
              to protect it from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference

              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which
              characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.

       -ok    Supported.  Interpretation of the response is according to the "yes" and "no" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what
       is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.



D, [2016-11-30T00:32:45.230525 #5551] DEBUG -- : 16
D, [2016-11-30T00:32:45.230685 #5551] DEBUG -- : 16
D, [2016-11-30T00:32:45.230749 #5551] DEBUG -- : 16
D, [2016-11-30T00:32:46.216623 #5551] DEBUG -- : #<MatchData "-P  " 1:"-P" 2:"P" 3:" " 4:" ">
D, [2016-11-30T00:32:46.217470 #5551] DEBUG -- : #<MatchData "-L  " 1:"-L" 2:"L" 3:" " 4:" ">
D, [2016-11-30T00:32:46.217937 #5551] DEBUG -- : #<MatchData "-H  " 1:"-H" 2:"H" 3:" " 4:" ">
D, [2016-11-30T00:32:46.218541 #5551] DEBUG -- : #<MatchData "-D debugoptions" 1:"-D" 2:"D" 3:" " 4:"debugoptions">
D, [2016-11-30T00:32:46.218984 #5551] DEBUG -- : #<MatchData "-Olevel" 1:"-Olevel" 2:"Olevel" 3:"" 4:"">
D, [2016-11-30T00:32:46.219831 #5551] DEBUG -- : 5
D, [2016-11-30T00:32:46.220128 #5551] DEBUG -- : 18
D, [2016-11-30T00:32:46.220461 #5551] DEBUG -- : 5
D, [2016-11-30T00:36:39.503252 #5679] DEBUG -- : 7
D, [2016-11-30T00:36:39.503427 #5679] DEBUG -- : 7
D, [2016-11-30T00:36:39.503495 #5679] DEBUG -- : 7
D, [2016-11-30T00:36:39.503668 #5679] DEBUG -- : lines : 21
eneral Commands Manual                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the "Security Considerations" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.

       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).

       -D debugoptions
              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order
              to protect it from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference

              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which
              characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.

       -ok    Supported.  Interpretation of the response is according to the "yes" and "no" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what
       is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.



D, [2016-11-30T00:36:41.566939 #5679] DEBUG -- : 16
D, [2016-11-30T00:36:41.567092 #5679] DEBUG -- : 16
D, [2016-11-30T00:36:41.567180 #5679] DEBUG -- : 16
D, [2016-11-30T00:36:42.651117 #5679] DEBUG -- : #<MatchData "-P  " 1:"-P" 2:"P" 3:" " 4:" ">
D, [2016-11-30T00:36:42.651906 #5679] DEBUG -- : #<MatchData "-L  " 1:"-L" 2:"L" 3:" " 4:" ">
D, [2016-11-30T00:36:42.652349 #5679] DEBUG -- : #<MatchData "-H  " 1:"-H" 2:"H" 3:" " 4:" ">
D, [2016-11-30T00:36:42.652925 #5679] DEBUG -- : #<MatchData "-D debugoptions" 1:"-D" 2:"D" 3:" " 4:"debugoptions">
D, [2016-11-30T00:36:42.653353 #5679] DEBUG -- : #<MatchData "-Olevel" 1:"-Olevel" 2:"Olevel" 3:"" 4:"">
D, [2016-11-30T00:36:42.654286 #5679] DEBUG -- : 5
D, [2016-11-30T00:36:42.654659 #5679] DEBUG -- : 18
D, [2016-11-30T00:36:42.654943 #5679] DEBUG -- : 5
D, [2016-11-30T00:36:53.777671 #5708] DEBUG -- : 7
D, [2016-11-30T00:36:53.777840 #5708] DEBUG -- : 7
D, [2016-11-30T00:36:53.777906 #5708] DEBUG -- : 7
D, [2016-11-30T00:36:53.778090 #5708] DEBUG -- : lines : 21
eneral Commands Manual                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the "Security Considerations" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.

       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).

       -D debugoptions
              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order
              to protect it from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference

              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which
              characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.

       -ok    Supported.  Interpretation of the response is according to the "yes" and "no" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what
       is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.



D, [2016-11-30T00:36:55.294142 #5708] DEBUG -- : 16
D, [2016-11-30T00:36:55.294327 #5708] DEBUG -- : 16
D, [2016-11-30T00:36:55.294432 #5708] DEBUG -- : 16
D, [2016-11-30T00:36:56.183127 #5708] DEBUG -- : #<MatchData "-P  " 1:"-P" 2:"P" 3:" " 4:" ">
D, [2016-11-30T00:36:56.183901 #5708] DEBUG -- : #<MatchData "-L  " 1:"-L" 2:"L" 3:" " 4:" ">
D, [2016-11-30T00:36:56.184320 #5708] DEBUG -- : #<MatchData "-H  " 1:"-H" 2:"H" 3:" " 4:" ">
D, [2016-11-30T00:36:56.184865 #5708] DEBUG -- : #<MatchData "-D debugoptions" 1:"-D" 2:"D" 3:" " 4:"debugoptions">
D, [2016-11-30T00:36:56.185293 #5708] DEBUG -- : #<MatchData "-Olevel" 1:"-Olevel" 2:"Olevel" 3:"" 4:"">
D, [2016-11-30T00:36:56.186227 #5708] DEBUG -- : 5
D, [2016-11-30T00:36:56.186588 #5708] DEBUG -- : 18
D, [2016-11-30T00:36:56.186860 #5708] DEBUG -- : 5
D, [2016-11-30T00:37:10.950265 #5744] DEBUG -- : 7
D, [2016-11-30T00:37:10.950484 #5744] DEBUG -- : 7
D, [2016-11-30T00:37:10.950550 #5744] DEBUG -- : 7
D, [2016-11-30T00:37:10.950765 #5744] DEBUG -- : lines : 21
eneral Commands Manual                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     FIND(1)

NAME
       find - search for files in a directory hierarchy

SYNOPSIS
       find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

DESCRIPTION
       This manual page documents the GNU version of find.  GNU find searches the directory tree rooted at each given starting-point by evaluating the given expression from left to right, according to the rules of precedence (see section OPERATORS), until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.  If no starting-point is specified, `.' is assumed.

       If you are using find in an environment where security is important (for example if you are using it to search directories that are writable by other users), you should read the "Security Considerations" chapter of the findutils documentation, which is called Finding Files and comes with findutils.   That document also includes a lot more detail and discussion than this manual page, so you may find it a more useful source of information.

OPTIONS
       The -H, -L and -P options control the treatment of symbolic links.  Command-line arguments following these are taken to be names of files or directories to be examined, up to the first argument that begins with `-', or the argument `(' or `!'.  That argument and any following arguments are taken to be the expression describing what is to be searched for.  If no paths are given, the current directory is used.  If no expression is given, the expression -print is used (but you should probably consider using -print0 instead, anyway).

       This manual page talks about `options' within the expression list.  These options control the behaviour of find but are specified immediately after the last path name.  The five `real' options -H, -L, -P, -D and -O must appear before the first path name, if at all.  A double dash -- can also be used to signal that any remaining arguments are not options (though ensuring that all start points begin with either `./' or `/' is generally safer if you use wildcards in the list of start points).

       -P     Never follow symbolic links.  This is the default behaviour.  When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.

       -L     Follow symbolic links.  When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points).  Use of this option implies -noleaf.  If you later use the -P option, -noleaf will still be in effect.  If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.

              When the -L option is in effect, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself (unless the symbolic link is broken).  Actions that can cause symbolic links to become broken while find is executing (for example -delete) can give rise to confusing behaviour.  Using -L causes the -lname and -ilname predicates always to return false.

       -H     Do not follow symbolic links, except while processing the command line arguments.  When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself.   The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.  For that situation, the information used is taken from whatever the link points to (that is, the link is followed).  The information about the link itself is used as a fallback if the file pointed to by the symbolic link cannot be examined.  If -H is in effect and one of the paths specified on the command line is a symbolic link to a directory, the contents of that directory will be examined (though of course -maxdepth 0 would prevent this).

       If more than one of -H, -L and -P is specified, each overrides the others; the last one appearing on the command line takes effect.  Since it is the default, the -P option should be considered to be in effect unless either -H or -L is specified.

       GNU find frequently stats files during the processing of the command line itself, before any searching has begun.  These options also affect how those arguments are processed.  Specifically, there are a number of tests that compare files listed on the command line against a file we are currently considering.  In each case, the file specified on the command line will have been examined and some of its properties will have been saved.  If the named file is in fact a symbolic link, and the -P option is in effect (or if neither -H nor -L were specified), the information used for the comparison will be taken from the properties of the symbolic link.  Otherwise, it will be taken from the properties of the file the link points to.  If find cannot follow the link (for example because it has insufficient privileges or the link points to a nonexistent file) the properties of the link itself will be used.

       When the -H or -L options are in effect, any symbolic links listed as the argument of -newer will be dereferenced, and the timestamp will be taken from the file to which the symbolic link points.  The same consideration applies to -newerXY, -anewer and -cnewer.

       The -follow option has a similar effect to -L, though it takes effect at the point where it appears (that is, if -L is not used but -follow is, any symbolic links appearing after -follow on the command line will be dereferenced, and those before it will not).

       -D debugoptions
              Print diagnostic information; this can be helpful to diagnose problems with why find is not doing what you want.  The list of debug options should be comma separated.  Compatibility of the debug options is not guaranteed between releases of findutils.  For a complete list of valid debug options, see the output of find -D help.  Valid debug options include

              help   Explain the debugging options

              tree   Show the expression tree in its original and optimised form.

              stat   Print messages as files are examined with the stat and lstat system calls.  The find program tries to minimise such calls.

              opt    Prints diagnostic information relating to the optimisation of the expression tree; see the -O option.

              rates  Prints a summary indicating how often each predicate succeeded or failed.

       -Olevel
              Enables query optimisation.   The find program reorders tests to speed up execution while preserving the overall effect; that is, predicates with side effects are not reordered relative to each other.  The optimisations performed at each optimisation level are as follows.

              0      Equivalent to optimisation level 1.

              1      This is the default optimisation level and corresponds to the traditional behaviour.  Expressions are reordered so that tests based only on the names of files (for example -name and -regex) are performed first.

              2      Any -type or -xtype tests are performed after any tests based only on the names of files, but before any tests that require information from the inode.  On many modern versions of Unix, file types are returned by readdir() and so these predicates are faster to evaluate than predicates which need to stat the file first.  If you use the -fstype FOO predicate and specify a filesystem type FOO which is not known (that is, present in `/etc/mtab') at the time find starts, that predicate is equivalent to -false.

              3      At this optimisation level, the full cost-based query optimiser is enabled.  The order of tests is modified so that cheap (i.e. fast) tests are performed first and more expensive ones are performed later, if necessary.  Within each cost band, predicates are evaluated earlier or later according to whether they are likely to succeed or not.  For -o, predicates which are likely to succeed are evaluated earlier, and for -a, predicates which are likely to fail are evaluated earlier.

              The cost-based optimiser has a fixed idea of how likely any given test is to succeed.  In some cases the probability takes account of the specific nature of the test (for example, -type f is assumed to be more likely to succeed than -type c).  The cost-based optimiser is currently being evaluated.   If it does not actually improve the performance of find, it will be removed again.  Conversely, optimisations that prove to be reliable, robust and effective may be enabled at lower optimisation levels over time.  However, the default behaviour (i.e. optimisation level 1) will not be changed in the 4.3.x release series.  The findutils test suite runs all the tests on find at each optimisation level and ensures that the result is the same.

EXPRESSION
       The part of the command line after the list of starting points is the expression.  This is a kind of query specification describing how we match files and what we do with the files that were matched.  An expression is composed of a sequence of things:

       Tests  Tests return a true or false value, usually on the basis of some property of a file we are considering.  The -empty test for example is true only when the current file is empty.

       Actions
              Actions have side effects (such as printing something on the standard output) and return either true or false, usually based on whether or not they are successful.  The -print action for example prints the name of the current file on the standard output.

       Global options
              Global options affect the operation of tests and actions specified on any part of the command line.  Global options always return true.  The -depth option for example makes find traverse the file system in a depth-first order.

       Positional options
              Positional optiona affect only tests or actions which follow them.  Positional options always return true.  The -regextype option for example is positional, specifying the regular expression dialect for regulat expressions occurring later on the command line.

       Operators
              Operators join together the other items within the expression.  They include for example -o (meaning logical OR) and -a (meaning logical AND).  Where an operator is missing, -a is assumed.

       If the whole expression contains no actions other than -prune or -print, -print is performed on all files for which the whole expression is true.

       The -delete action also acts like an option (since it implies -depth).

   POSITIONAL OPTIONS
       Positional options always return true.  They affect only tests occurring later on the command line.

       -daystart
              Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from the beginning of today rather than from 24 hours ago.  This option only affects tests which appear later on the command line.

       -follow
              Deprecated; use the -L option instead.  Dereference symbolic links.  Implies -noleaf.  The -follow option affects only those tests which appear after it on the command line.  Unless the -H or -L option has been specified, the position of the -follow option changes the behaviour of the -newer predicate; any files listed as the argument of -newer will be dereferenced if they are symbolic links.  The same consideration applies to -newerXY, -anewer and -cnewer.  Similarly, the -type predicate will always match against the type of the file that a symbolic link points to rather than the link itself.  Using -follow causes the -lname and -ilname predicates always to return false.

       -regextype type
              Changes the regular expression syntax understood by -regex and -iregex tests which occur later on the command line.  To see which regular expression types are known, use -regextype help.  The Texinfo documentation (see SEE ALSO) explains the meaning of and differences between the various types of regular expression.

       -warn, -nowarn
              Turn warning messages on or off.  These warnings apply only to the command line usage, not to any conditions that find might encounter when it searches directories.  The default behaviour corresponds to -warn if standard input is a tty, and to -nowarn otherwise.  If a warning message relating to command-line usage is produced, the exit status of find is not affected.  If the POSIXLY_CORRECT environment variable is set, and -warn is also used, it is not specified which, if any, warnings will be active.

   GLOBAL OPTIONS
       Global options always return true.  Global options take effect even for tests which occurr earlier on the command line.  To prevent confusion, global options should specified on the command-line after the list of start points, just before the first test, positional option or action. If you specify a global option in some other place, find will issue a warning message explaining that this can be confusing.

       The global options occur after the list of start points, and so are not the same kind of option as -L, for example.

       -d     A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.

       -depth Process each directory's contents before the directory itself.  The -delete action also implies -depth.

       -help, --help
              Print a summary of the command-line usage of find and exit.

       -ignore_readdir_race
              Normally, find will emit an error message when it fails to stat a file.  If you give this option and a file is deleted between the time find reads the name of the file from the directory and the time it tries to stat the file, no error message will be issued.    This also applies to files or directories whose names are given on the command line.  This option takes effect at the time the command line is read, which means that you cannot search one part of the filesystem with this option on and part of it with this option off (if you need to do that, you will need to issue two find commands instead, one with the option and one without it).

       -maxdepth levels
              Descend at most levels (a non-negative integer) levels of directories below the starting-points.  -maxdepth 0
               means only apply the tests and actions to the starting-points themselves.

       -mindepth levels
              Do not apply any tests or actions at levels less than levels (a non-negative integer).  -mindepth 1 means process all files except the starting-points.

       -mount Don't descend directories on other filesystems.  An alternate name for -xdev, for compatibility with some other versions of find.

       -noignore_readdir_race
              Turns off the effect of -ignore_readdir_race.

       -noleaf
              Do not optimize by assuming that directories contain 2 fewer subdirectories than their hard link count.  This option is needed when searching filesystems that do not follow the Unix directory-link convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount points.  Each directory on a normal Unix filesystem has at least 2 hard links: its name and its `.'  entry.  Additionally, its subdirectories (if any) each have a `..' entry linked to that directory.  When find is examining a directory, after it has statted 2 fewer subdirectories than the directory's link count, it knows that the rest of the entries in the directory are non-directories (`leaf' files in the directory tree).  If only the files' names need to be examined, there is no need to stat them; this gives a significant increase in search speed.

       -version, --version
              Print the find version number and exit.

       -xdev  Don't descend directories on other filesystems.

   TESTS
       Some tests, for example -newerXY and -samefile, allow comparison between the file currently being examined and some reference file specified on the command line.  When these tests are used, the interpretation of the reference file is determined by the options -H, -L and -P and any previous -follow, but the reference file is only examined once, at the time the command line is parsed.  If the reference file cannot be examined (for example, the stat(2) system call fails for it), an error message is issued, and find exits with a nonzero status.

       Numeric arguments can be specified as

       +n     for greater than n,

       -n     for less than n,

       n      for exactly n.

       -amin n
              File was last accessed n minutes ago.

       -anewer file
              File was last accessed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the access time of the file it points to is always used.

       -atime n
              File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file has to have been accessed at least two days ago.

       -cmin n
              File's status was last changed n minutes ago.

       -cnewer file
              File's status was last changed more recently than file was modified.  If file is a symbolic link and the -H option or the -L option is in effect, the status-change time of the file it points to is always used.

       -ctime n
              File's status was last changed n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file status change times.

       -empty File is empty and is either a regular file or a directory.

       -executable
              Matches files which are executable and directories which are searchable (in a file name resolution sense).  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.  Because this test is based only on the result of the access(2) system call, there is no guarantee that a file for which this test succeeds can actually be executed.

       -false Always false.

       -fstype type
              File is on a filesystem of type type.  The valid filesystem types vary among different versions of Unix; an incomplete list of filesystem types that are accepted on some version of Unix or another is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf with the %F directive to see the types of your filesystems.

       -gid n File's numeric group ID is n.

       -group gname
              File belongs to group gname (numeric group ID allowed).

       -ilname pattern
              Like -lname, but the match is case insensitive.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the patterns `fo*' and `F??' match the file names `Foo', `FOO', `foo', `fOo', etc.   The pattern `*foo*` will also match a file called '.foobar'.

       -inum n
              File has inode number n.  It is normally easier to use the -samefile test instead.

       -ipath pattern
              Like -path.  but the match is case insensitive.

       -iregex pattern
              Like -regex, but the match is case insensitive.

       -iwholename pattern
              See -ipath.  This alternative is less portable than -ipath.

       -links n
              File has n links.

       -lname pattern
              File is a symbolic link whose contents match shell pattern pattern.  The metacharacters do not treat `/' or `.' specially.  If the -L option or the -follow option is in effect, this test returns false unless the symbolic link is broken.

       -mmin n
              File's data was last modified n minutes ago.

       -mtime n
              File's data was last modified n*24 hours ago.  See the comments for -atime to understand how rounding affects the interpretation of file modification times.

       -name pattern
              Base of file name (the path with the leading directories removed) matches shell pattern pattern.  Because the leading directories are removed, the file names considered for a match with -name will never include a slash, so `-name a/b' will never match anything (you probably need to use -path instead).  A warning is issued if you try to do this, unless the environment variable POSIXLY_CORRECT is set.  The metacharacters (`*', `?', and `[]') match a `.' at the start of the base name (this is a change in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a directory and the files under it, use -prune; see an example in the description of -path.  Braces are not recognised as being special, despite the fact that some shells including Bash imbue braces with a special meaning in shell patterns.  The filename matching is performed with the use of the fnmatch(3) library function.   Don't forget to enclose the pattern in quotes in order
              to protect it from expansion by the shell.

       -newer file
              File was modified more recently than file.  If file is a symbolic link and the -H option or the -L option is in effect, the modification time of the file it points to is always used.

       -newerXY reference
              Succeeds if timestamp X of the file being considered is newer than timestamp Y of the file reference.   The letters X and Y can be any of the following letters:

              a   The access time of the file reference

              B   The birth time of the file reference
              c   The inode status change time of reference
              m   The modification time of the file reference
              t   reference is interpreted directly as a time

              Some combinations are invalid; for example, it is invalid for X to be t.  Some combinations are not implemented on all systems; for example B is not supported on all systems.  If an invalid or unsupported combination of XY is specified, a fatal error results.  Time specifications are interpreted as for the argument to the -d option of GNU date.  If you try to use the birth time of a reference file, and the birth time cannot be determined, a fatal error message results.  If you specify a test which refers to the birth time of files being examined, this test will fail for any files where the birth time is unknown.

       -nogroup
              No group corresponds to file's numeric group ID.

       -nouser
              No user corresponds to file's numeric user ID.

       -path pattern
              File name matches shell pattern pattern.  The metacharacters do not treat `/' or `.' specially; so, for example,
                        find . -path "./sr*sc"
              will print an entry for a directory called `./src/misc' (if one exists).  To ignore a whole directory tree, use -prune rather than checking every file in the tree.  For example, to skip the directory `src/emacs' and all files and directories under it, and print the names of the other files found, do something like this:
                        find . -path ./src/emacs -prune -o -print
              Note that the pattern match test applies to the whole file name, starting from one of the start points named on the command line.  It would only make sense to use an absolute path name here if the relevant start point is also an absolute path.  This means that this command will never match anything:
                        find bar -path /foo/bar/myfile -print
              Find compares the -path argument with the concatenation of a directory name and the base name of the file it's examining.  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).  The predicate -path is also supported by HP-UX find and will be in a forthcoming version of the POSIX standard.

       -perm mode
              File's permission bits are exactly mode (octal or symbolic).  Since an exact match is required, if you want to use this form for symbolic modes, you may have to specify a rather complex mode string.  For example `-perm g=w' will only match files which have mode 0020 (that is, ones for which group write permission is the only permission set).  It is more likely that you will want to use the `/' or `-' forms, for example `-perm -g=w', which matches any file with group write permission.  See the EXAMPLES section for some illustrative examples.

       -perm -mode
              All of the permission bits mode are set for the file.  Symbolic modes are accepted in this form, and this is usually the way in which you would want to use them.  You must specify `u', `g' or `o' if you use a symbolic mode.   See the EXAMPLES section for some illustrative examples.

       -perm /mode
              Any of the permission bits mode are set for the file.  Symbolic modes are accepted in this form.  You must specify `u', `g' or `o' if you use a symbolic mode.  See the EXAMPLES section for some illustrative examples.  If no permission bits in mode are set, this test matches any file (the idea here is to be consistent with the behaviour of -perm -000).

       -perm +mode
              This is no longer supported (and has been deprecated since 2005).  Use -perm /mode instead.

       -readable
              Matches files which are readable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -regex pattern
              File name matches regular expression pattern.  This is a match on the whole path, not a search.  For example, to match a file named `./fubar3', you can use the regular expression `.*bar.' or `.*b.*3', but not `f.*r3'.  The regular expressions understood by find are by default Emacs Regular Expressions, but this can be changed with the -regextype option.

       -samefile name
              File refers to the same inode as name.   When -L is in effect, this can include symbolic links.

       -size n[cwbkMG]
              File uses n units of space, rounding up.  The following suffixes can be used:

              `b'    for 512-byte blocks (this is the default if no suffix is used)

              `c'    for bytes

              `w'    for two-byte words

              `k'    for Kilobytes (units of 1024 bytes)

              `M'    for Megabytes (units of 1048576 bytes)

              `G'    for Gigabytes (units of 1073741824 bytes)

              The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.  Bear in mind that the `%k' and `%b' format specifiers of -printf handle sparse files differently.  The `b' suffix always denotes 512-byte blocks and never 1 Kilobyte blocks, which is different to the behaviour of -ls.  The + and - prefixes signify greater than and less than, as usual, but bear in mind that the size is rounded up to the next unit (so a 1-byte file is not matched by -size -1M).

       -true  Always true.

       -type c
              File is of type c:

              b      block (buffered) special

              c      character (unbuffered) special

              d      directory

              p      named pipe (FIFO)

              f      regular file

              l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.

              s      socket

              D      door (Solaris)

       -uid n File's numeric user ID is n.

       -used n
              File was last accessed n days after its status was last changed.

       -user uname
              File is owned by user uname (numeric user ID allowed).

       -wholename pattern
              See -path.  This alternative is less portable than -path.

       -writable
              Matches files which are writable.  This takes into account access control lists and other permissions artefacts which the -perm test ignores.  This test makes use of the access(2) system call, and so can be fooled by NFS servers which do UID mapping (or root-squashing), since many systems implement access(2) in the client's kernel and so cannot make use of the UID mapping information held on the server.

       -xtype c
              The same as -type unless the file is a symbolic link.  For symbolic links: if the -H or -P option was specified, true if the file is a link to a file of type c; if the -L option has been given, true if c is `l'.  In other words, for symbolic links, -xtype checks the type of the file that -type does not check.

       -context pattern
              (SELinux only) Security context of the file matches glob pattern.

   ACTIONS
       -delete
              Delete files; true if removal succeeded.  If the removal failed, an error message is issued.  If -delete fails, find's exit status will be nonzero (when it eventually exits).  Use of -delete automatically turns on the `-depth' option.

              Warnings: Don't forget that the find command line is evaluated as an expression, so putting -delete first will make find try to delete everything below the starting points you specified.  When testing a find command line that you later intend to use with -delete, you should explicitly specify -depth in order to avoid later surprises.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -exec command ;
              Execute command; true if 0 status is returned.  All following arguments to find are taken to be arguments to the command until an argument consisting of `;' is encountered.  The string `{}' is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find.  Both of these constructions might need to be escaped (with a `\') or quoted to protect them from expansion by the shell.  See the EXAMPLES section for examples of the use of the -exec option.  The specified command is run once for each matched file.  The command is executed in the starting directory.   There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.

       -exec command {} +
              This variant of the -exec action runs the specified command on the selected files, but the command line is built by appending each selected file name at the end; the total number of invocations of the command will be much less than the number of matched files.  The command line is built in much the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the command.  The command is executed in the starting directory.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not be run at all.  This variant of -exec always returns true.

       -execdir command ;

       -execdir command {} +
              Like -exec, but the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find.  This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files.  As with the -exec action, the `+' form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory.  If you use this option, you must ensure that your $PATH environment variable does not reference `.'; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir.  The same applies to having entries in $PATH which are empty or which are not absolute directory names.  If find encounters an error, this can sometimes cause an immediate exit, so some pending commands may not
              be run at all. The result of the action depends on whether the + or the ; variant is being used; -execdir command {} + always returns true, while -execdir command {} ; returns true only if command returns 0.

       -fls file
              True; like -ls but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint file
              True; print the full file name into file file.  If file does not exist when find is run, it is created; if it does exist, it is truncated.  The file names `/dev/stdout' and `/dev/stderr' are handled specially; they refer to the standard output and standard error output, respectively.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprint0 file
              True; like -print0 but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -fprintf file format
              True; like -printf but write to file like -fprint.  The output file is always created, even if the predicate is never matched.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ls    True; list current file in ls -dils format on standard output.  The block counts are of 1K blocks, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -ok command ;
              Like -exec but ask the user first.  If the user agrees, run the command.  Otherwise just return false.  If the command is run, its standard input is redirected from /dev/null.

              The response to the prompt is matched against a pair of regular expressions to determine if it is an affirmative or negative response.  This regular expression is obtained from the system if the `POSIXLY_CORRECT' environment variable is set, or otherwise from find's message translations.  If the system has no suitable definition, find's own definition will be used.   In either case, the interpretation of the regular expression itself will be affected by the environment variables 'LC_CTYPE' (character classes) and 'LC_COLLATE' (character ranges and equivalence classes).

       -okdir command ;
              Like -execdir but ask the user first in the same way as for -ok.  If the user does not agree, just return false.  If the command is run, its standard input is redirected from /dev/null.

       -print True; print the full file name on the standard output, followed by a newline.   If you are piping the output of find into another program and there is the faintest possibility that the files which you are searching for might contain a newline, then you should seriously consider using the -print0 option instead of -print.  See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -print0
              True; print the full file name on the standard output, followed by a null character (instead of the newline character that -print uses).  This allows file names that contain newlines or other types of white space to be correctly interpreted by programs that process the find output.  This option corresponds to the -0 option of xargs.

       -printf format
              True; print format on the standard output, interpreting `\' escapes and `%' directives.  Field widths and precisions can be specified as with the `printf' C function.  Please note that many of the fields are printed as %s rather than %d, and this may mean that flags don't work as you might expect.  This also means that the `-' flag does work (it forces fields to be left-aligned).  Unlike -print, -printf does not add a newline at the end of the string.  The escapes and directives are:

              \a     Alarm bell.

              \b     Backspace.

              \c     Stop printing from this format immediately and flush the output.

              \f     Form feed.

              \n     Newline.

              \r     Carriage return.

              \t     Horizontal tab.

              \v     Vertical tab.

              \0     ASCII NUL.

              \\     A literal backslash (`\').

              \NNN   The character whose ASCII code is NNN (octal).

              A `\' character followed by any other character is treated as an ordinary character, so they both are printed.

              %%     A literal percent sign.

              %a     File's last access time in the format returned by the C `ctime' function.

              %Ak    File's last access time in the format specified by k, which is either `@' or a directive for the C `strftime' function.  The possible values for k are listed below; some of them might not be available on all systems, due to differences in `strftime' between systems.

                     @      seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.

                     Time fields:

                     H      hour (00..23)

                     I      hour (01..12)

                     k      hour ( 0..23)

                     l      hour ( 1..12)

                     M      minute (00..59)

                     p      locale's AM or PM

                     r      time, 12-hour (hh:mm:ss [AP]M)

                     S      Second (00.00 .. 61.00).  There is a fractional part.

                     T      time, 24-hour (hh:mm:ss)

                     +      Date and time, separated by `+', for example `2004-04-28+22:22:05.0'.  This is a GNU extension.  The time is given in the current timezone (which may be affected by setting the TZ environment variable).  The seconds field includes a fractional part.

                     X      locale's time representation (H:M:S)

                     Z      time zone (e.g., EDT), or nothing if no time zone is determinable

                     Date fields:

                     a      locale's abbreviated weekday name (Sun..Sat)

                     A      locale's full weekday name, variable length (Sunday..Saturday)

                     b      locale's abbreviated month name (Jan..Dec)

                     B      locale's full month name, variable length (January..December)

                     c      locale's date and time (Sat Nov 04 12:02:33 EST 1989).  The format is the same as for ctime(3) and so to preserve compatibility with that format, there is no fractional part in the seconds field.

                     d      day of month (01..31)

                     D      date (mm/dd/yy)

                     h      same as b

                     j      day of year (001..366)

                     m      month (01..12)

                     U      week number of year with Sunday as first day of week (00..53)

                     w      day of week (0..6)

                     W      week number of year with Monday as first day of week (00..53)

                     x      locale's date representation (mm/dd/yy)

                     y      last two digits of year (00..99)

                     Y      year (1970...)

              %b     The amount of disk space used for this file in 512-byte blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/512, but it can also be smaller if the file is a sparse file.

              %c     File's last status change time in the format returned by the C `ctime' function.

              %Ck    File's last status change time in the format specified by k, which is the same as for %A.

              %d     File's depth in the directory tree; 0 means the file is a starting-point.

              %D     The device number on which the file exists (the st_dev field of struct stat), in decimal.

              %f     File's name with any leading directories removed (only the last element).

              %F     Type of the filesystem the file is on; this value can be used for -fstype.

              %g     File's group name, or numeric group ID if the group has no name.

              %G     File's numeric group ID.

              %h     Leading directories of file's name (all but the last element).  If the file name contains no slashes (since it is in the current directory) the %h specifier expands to ".".

              %H     Starting-point under which file was found.

              %i     File's inode number (in decimal).

              %k     The amount of disk space used for this file in 1K blocks.  Since disk space is allocated in multiples of the filesystem block size this is usually greater than %s/1024, but it can also be smaller if the file is a sparse file.

              %l     Object of symbolic link (empty string if file is not a symbolic link).

              %m     File's permission bits (in octal).  This option uses the `traditional' numbers which most Unix implementations use, but if your particular implementation uses an unusual ordering of octal permissions bits, you will see a difference between the actual value of the file's mode and the output of %m.   Normally you will want to have a leading zero on this number, and to do this, you should use the # flag (as in, for example, `%#m').

              %M     File's permissions (in symbolic form, as for ls).  This directive is supported in findutils 4.2.5 and later.

              %n     Number of hard links to file.

              %p     File's name.

              %P     File's name with the name of the starting-point under which it was found removed.

              %s     File's size in bytes.

              %S     File's sparseness.  This is calculated as (BLOCKSIZE*st_blocks / st_size).  The exact value you will get for an ordinary file of a certain length is system-dependent.  However, normally sparse files will have values less than 1.0, and files which use indirect blocks may have a value which is greater than 1.0.   The value used for BLOCKSIZE is system-dependent, but is usually 512 bytes.   If the file size is zero, the value printed is undefined.  On systems which lack support for st_blocks, a file's sparseness is assumed to be 1.0.

              %t     File's last modification time in the format returned by the C `ctime' function.

              %Tk    File's last modification time in the format specified by k, which is the same as for %A.

              %u     File's user name, or numeric user ID if the user has no name.

              %U     File's numeric user ID.

              %y     File's type (like in ls -l), U=unknown type (shouldn't happen)

              %Y     File's type (like %y), plus follow symlinks: L=loop, N=nonexistent

              %Z     (SELinux only) file's security context.

              %{ %[ %(
                     Reserved for future use.

              A `%' character followed by any other character is discarded, but the other character is printed (don't rely on this, as further format characters may be introduced).  A `%' at the end of the format argument causes undefined behaviour since there is no following character.  In some locales, it may hide your door keys, while in others it may remove the final page from the novel you are reading.

              The %m and %d directives support the # , 0 and + flags, but the other directives do not, even if they print numbers.  Numeric directives that do not support these flags include G, U, b, D, k and n.  The `-' format flag is supported and changes the alignment of a field from right-justified (which is the default) to left-justified.

              See the UNUSUAL FILENAMES section for information about how unusual characters in filenames are handled.

       -prune True; if the file is a directory, do not descend into it.  If -depth is given, false; no effect.  Because -delete implies -depth, you cannot usefully use -prune and -delete together.

       -quit  Exit immediately.  No child processes will be left running, but no more paths specified on the command line will be processed.  For example, find /tmp/foo /tmp/bar -print -quit will print only /tmp/foo.  Any command lines which have been built up with -execdir ... {} + will be invoked before find exits.   The exit status may or may not be zero, depending on whether an error has already occurred.

   OPERATORS
       Listed in order of decreasing precedence:

       ( expr )
              Force precedence.  Since parentheses are special to the shell, you will normally need to quote them.  Many of the examples in this manual page use backslashes for this purpose: `\(...\)' instead of `(...)'.

       ! expr True if expr is false.  This character will also usually need protection from interpretation by the shell.

       -not expr
              Same as ! expr, but not POSIX compliant.

       expr1 expr2
              Two expressions in a row are taken to be joined with an implied "and"; expr2 is not evaluated if expr1 is false.

       expr1 -a expr2
              Same as expr1 expr2.

       expr1 -and expr2
              Same as expr1 expr2, but not POSIX compliant.

       expr1 -o expr2
              Or; expr2 is not evaluated if expr1 is true.

       expr1 -or expr2
              Same as expr1 -o expr2, but not POSIX compliant.

       expr1 , expr2
              List; both expr1 and expr2 are always evaluated.  The value of expr1 is discarded; the value of the list is the value of expr2.  The comma operator can be useful for searching for several different types of thing, but traversing the filesystem hierarchy only once.  The -fprintf action can be used to list the various matched items into several different output files.

UNUSUAL FILENAMES
       Many of the actions of find result in the printing of data which is under the control of other users.  This includes file names, sizes, modification times and so forth.  File names are a potential problem since they can contain any character except `\0' and `/'.  Unusual characters in file names can do unexpected and often undesirable things to your terminal (for example, changing the settings of your function keys on some terminals).  Unusual characters are handled differently by various actions, as described below.

       -print0, -fprint0
              Always print the exact filename, unchanged, even if the output is going to a terminal.

       -ls, -fls
              Unusual characters are always escaped.  White space, backslash, and double quote characters are printed using C-style escaping (for example `\f', `\"').  Other unusual characters are printed using an octal escape.  Other printable characters (for -ls and -fls these are the characters between octal 041 and 0176) are printed as-is.

       -printf, -fprintf
              If the output is not going to a terminal, it is printed as-is.  Otherwise, the result depends on which directive is in use.  The directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are not under control of files' owners, and so are printed as-is.  The directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have values which are under the control of files' owners but which cannot be used to send arbitrary data to the terminal, and so these are printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This quoting is performed in the same way as for GNU ls.  This is not the same quoting mechanism as the one used for -ls and -fls.  If you are able to decide what format to use for the output of find then it is normally better to use `\0' as a terminator than to use newline, as file names can contain white space and newline characters.  The setting of the `LC_CTYPE' environment variable is used to determine which
              characters need to be quoted.

       -print, -fprint
              Quoting is handled in the same way as for -printf and -fprintf.  If you are using find in a script or in a situation where the matched files might have arbitrary names, you should consider using -print0 instead of -print.

       The -ok and -okdir actions print the current filename as-is.  This may change in a future release.

STANDARDS CONFORMANCE
       For closest compliance to the POSIX standard, you should set the POSIXLY_CORRECT environment variable.  The following options are specified in the POSIX standard (IEEE Std 1003.1, 2003 Edition):

       -H     This option is supported.

       -L     This option is supported.

       -name  This option is supported, but POSIX conformance depends on the POSIX conformance of the system's fnmatch(3) library function.  As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) will match a leading `.', because IEEE PASC interpretation 126 requires this.   This is a change from previous versions of findutils.

       -type  Supported.   POSIX specifies `b', `c', `d', `l', `p', `f' and `s'.  GNU find also supports `D', representing a Door, where the OS provides these.

       -ok    Supported.  Interpretation of the response is according to the "yes" and "no" patterns selected by setting the `LC_MESSAGES' environment variable.  When the `POSIXLY_CORRECT' environment variable is set, these patterns are taken system's definition of a positive (yes) or negative (no) response.  See the system's documentation for nl_langinfo(3), in particular YESEXPR and NOEXPR.    When `POSIXLY_CORRECT' is not set, the patterns are instead taken from find's own message catalogue.

       -newer Supported.  If the file specified is a symbolic link, it is always dereferenced.  This is a change from previous behaviour, which used to take the relevant time from the symbolic link; see the HISTORY section below.

       -perm  Supported.  If the POSIXLY_CORRECT environment variable is not set, some mode arguments (for example +a+x) which are not valid in POSIX are supported for backward-compatibility.

       Other predicates
              The predicates -atime, -ctime, -depth, -group, -links, -mtime, -nogroup, -nouser, -print, -prune, -size, -user and -xdev `-atime', `-ctime', `-depth', `-group', `-links', `-mtime', `-nogroup', `-nouser', `-perm', `-print', `-prune', `-size', `-user' and `-xdev', are all supported.

       The POSIX standard specifies parentheses `(', `)', negation `!' and the `and' and `or' operators ( -a, -o).

       All other options, predicates, expressions and so forth are extensions beyond the POSIX standard.  Many of these extensions are not unique to GNU find, however.

       The POSIX standard requires that find detects loops:

              The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered.  When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.

       GNU find complies with these requirements.  The link count of directories which contain entries which are hard links to an ancestor will often be lower than they otherwise should be.  This can mean that GNU find will sometimes optimise away the visiting of a subdirectory which is actually a link to an ancestor.  Since find does not actually enter such a subdirectory, it is allowed to avoid emitting a diagnostic message.  Although this behaviour may be somewhat confusing, it is unlikely that anybody actually depends on this behaviour.  If the leaf optimisation has been turned off with -noleaf, the directory entry will always be examined and the diagnostic message will be issued where it is appropriate.  Symbolic links cannot be used to create filesystem cycles as such, but if the -L option or the -follow option is in use, a diagnostic message is issued when find encounters a loop of symbolic links.  As with loops containing hard links, the leaf
       optimisation will often mean that find knows that it doesn't need to call stat() or chdir() on the symbolic link, so this diagnostic is frequently not necessary.

       The -d option is supported for compatibility with various BSD systems, but you should use the POSIX-compliant option -depth instead.

       The POSIXLY_CORRECT environment variable does not affect the behaviour of the -regex or -iregex tests because those tests aren't specified in the POSIX standard.

ENVIRONMENT VARIABLES
       LANG   Provides a default value for the internationalization variables that are unset or null.

       LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
              The POSIX standard specifies that this variable affects the pattern matching to be used for the -name option.   GNU find uses the fnmatch(3) library function, and so support for `LC_COLLATE' depends on the system library.    This variable also affects the interpretation of the response to -ok; while the `LC_MESSAGES' variable selects the actual pattern used to interpret the response to -ok, the interpretation of any bracket expressions in the pattern will be affected by `LC_COLLATE'.

       LC_CTYPE
              This variable affects the treatment of character classes used in regular expressions and also with the -name test, if the system's fnmatch(3) library function supports this.  This variable also affects the interpretation of any character classes in the regular expressions used to interpret the response to the prompt issued by -ok.  The `LC_CTYPE' environment variable will also affect which characters are considered to be unprintable when filenames are printed; see the section UNUSUAL FILENAMES.

       LC_MESSAGES
              Determines the locale to be used for internationalised messages.  If the `POSIXLY_CORRECT' environment variable is set, this also determines the interpretation of the response to the prompt made by the -ok action.

       NLSPATH
              Determines the location of the internationalisation message catalogues.

       PATH   Affects the directories which are searched to find the executables invoked by -exec, -execdir, -ok and -okdir.

       POSIXLY_CORRECT
              Determines the block size used by -ls and -fls.  If POSIXLY_CORRECT is set, blocks are units of 512 bytes.  Otherwise they are units of 1024 bytes.

              Setting this variable also turns off warning messages (that is, implies -nowarn) by default, because POSIX requires that apart from the output for -ok, all messages printed on stderr are diagnostics and must result in a non-zero exit status.

              When POSIXLY_CORRECT is not set, -perm +zzz is treated just like -perm /zzz if +zzz is not a valid symbolic mode.  When POSIXLY_CORRECT is set, such constructs are treated as an error.

              When POSIXLY_CORRECT is set, the response to the prompt made by the -ok action is interpreted according to the system's message catalogue, as opposed to according to find's own message translations.

       TZ     Affects the time zone used for some of the time-related format directives of -printf and -fprintf.

EXAMPLES
       find /tmp -name core -type f -print | xargs /bin/rm -f

       Find files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.

       find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f

       Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.  The -name test comes before the -type test in order to avoid having to call stat(2) on every file.

       find . -type f -exec file '{}' \;

       Runs `file' on every file in or below the current directory.  Notice that the braces are enclosed in single quote marks to protect them from interpretation as shell script punctuation.  The semicolon is similarly protected by the use of a backslash, though single quotes could have been used in that case also.

       find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
       \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

       Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.

       find $HOME -mtime 0

       Search for files in your home directory which have been modified in the last twenty-four hours.  This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded.  That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.

       find /sbin /usr/sbin -executable \! -readable -print

       Search for files which are executable but not readable.

       find . -perm 664

       Search for files which have read and write permission for their owner, and group, but which other users can read but not write to.  Files which meet these criteria but have other permissions bits set (for example if someone can execute the file) will not be matched.

       find . -perm -664

       Search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits (for example the executable bit).  This will match a file which has mode 0777, for example.

       find . -perm /222

       Search for files which are writable by somebody (their owner, or their group, or anybody else).

       find . -perm /220
       find . -perm /u+w,g+w
       find . -perm /u=w,g=w

       All three of these commands do the same thing, but the first one uses the octal representation of the file mode, and the other two use the symbolic form.  These commands all search for files which are writable by either their owner or their group.  The files don't have to be writable by both the owner and group to be matched; either will do.

       find . -perm -220
       find . -perm -g+w,u+w

       Both these commands do the same thing; search for files which are writable by both their owner and their group.

       find . -perm -444 -perm /222 ! -perm /111
       find . -perm -a+r -perm /a+w ! -perm /a+x

       These two commands both search for files that are readable for everybody ( -perm -444 or -perm -a+r), have at least one write bit set ( -perm /222 or -perm /a+w) but are not executable for anybody ( ! -perm /111 and ! -perm /a+x respectively).

       cd /source-dir
       find . -name .snapshot -prune -o \( \! -name *~ -print0 \)|
       cpio -pmd0 /dest-dir

       This command copies the contents of /source-dir to /dest-dir, but omits files and directories named .snapshot (and anything in them).  It also omits files or directories whose name ends in ~, but not their contents.  The construct -prune -o \( ... -print0 \) is quite common.  The idea here is that the expression before -prune matches things which are to be pruned.  However, the -prune action itself returns true, so the following -o ensures that the right hand side is evaluated only for those directories which didn't get pruned (the contents of the pruned directories are not even visited, so their contents are irrelevant).  The expression on the right hand side of the -o is in parentheses only for clarity.  It emphasises that the -print0 action takes place only for things that didn't have -prune applied to them.  Because the default `and' condition between tests binds more tightly than -o, this is the default anyway, but the parentheses help to show what
       is going on.

       find repo/ -exec test -d {}/.svn \; -or \
       -exec test -d {}/.git \; -or -exec test -d {}/CVS \; \
       -print -prune

       Given the following directory of projects and their associated SCM administrative directories, perform an efficient search for the projects' roots:

       repo/project1/CVS
       repo/gnu/project2/.svn
       repo/gnu/project3/.svn
       repo/gnu/project3/src/.svn
       repo/project4/.git

       In this example, -prune prevents unnecessary descent into directories that have already been discovered (for example we do not search project3/src because we already found project3/.svn), but ensures sibling directories (project2 and project3) are found.

EXIT STATUS
       find exits with status 0 if all files are processed successfully, greater than 0 if errors occur.   This is deliberately a very broad description, but if the return value is non-zero, you should not rely on the correctness of the results of find.

       When some error occurs, find may stop immediately, without completing all the actions specified.  For example, some starting points may not have been examined or some pending program invocations for -exec ... {} + or -execdir ... {} + may not have been performed.

SEE ALSO
       locate(1), locatedb(5), updatedb(1), xargs(1), chmod(1), fnmatch(3), regex(7), stat(2), lstat(2), ls(1), printf(3), strftime(3), ctime(3)

       The full documentation for find is maintained as a Texinfo manual.  If the info and find programs are properly installed at your site, the command info find should give you access to the complete manual.

HISTORY
       As of findutils-4.2.2, shell metacharacters (`*', `?' or `[]' for example) used in filename patterns will match a leading `.', because IEEE POSIX interpretation 126 requires this.

       As of findutils-4.3.3, -perm /000 now matches all files instead of none.

       Nanosecond-resolution timestamps were implemented in findutils-4.3.3.

       As of findutils-4.3.11, the -delete action sets find's exit status to a nonzero value when it fails.  However, find will not exit immediately.  Previously, find's exit status was unaffected by the failure of -delete.

       Feature                Added in   Also occurs in
       -newerXY               4.3.3      BSD
       -D                     4.3.1
       -O                     4.3.1
       -readable              4.3.0
       -writable              4.3.0
       -executable            4.3.0
       -regextype             4.2.24
       -exec ... +            4.2.12     POSIX
       -execdir               4.2.12     BSD
       -okdir                 4.2.12
       -samefile              4.2.11
       -H                     4.2.5      POSIX
       -L                     4.2.5      POSIX
       -P                     4.2.5      BSD
       -delete                4.2.3
       -quit                  4.2.3
       -d                     4.2.3      BSD
       -wholename             4.2.0
       -iwholename            4.2.0
       -ignore_readdir_race   4.2.0
       -fls                   4.0
       -ilname                3.8
       -iname                 3.8
       -ipath                 3.8
       -iregex                3.8

       The syntax -perm +MODE was removed in findutils-4.5.12, in favour of -perm /MODE.  The +MODE syntax had been deprecated since findutils-4.2.21 which was released in 2005.

NON-BUGS
       $ find . -name *.c -print
       find: paths must precede expression
       Usage: find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]

       This happens because *.c has been expanded by the shell resulting in find actually receiving a command line like this:

       find . -name bigram.c code.c frcode.c locate.c -print

       That command is of course not going to work.  Instead of doing things this way, you should enclose the pattern in quotes or escape the wildcard:
       $ find . -name '*.c' -print
       $ find . -name \*.c -print

BUGS
       There are security problems inherent in the behaviour that the POSIX standard specifies for find, which therefore cannot be fixed.  For example, the -exec action is inherently insecure, and -execdir should be used instead.  Please see Finding Files for more information.

       The environment variable LC_COLLATE has no effect on the -ok action.

       The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is that you will then be able to track progress in fixing the problem.   Other comments about find(1) and about the findutils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-request@gnu.org.



D, [2016-11-30T00:37:13.607574 #5744] DEBUG -- : 16
D, [2016-11-30T00:37:13.607730 #5744] DEBUG -- : 16
D, [2016-11-30T00:37:13.607828 #5744] DEBUG -- : 16
D, [2016-11-30T00:37:14.607244 #5744] DEBUG -- : #<MatchData "-P  " 1:"-P" 2:"P" 3:" " 4:" ">
D, [2016-11-30T00:37:14.608019 #5744] DEBUG -- : #<MatchData "-L  " 1:"-L" 2:"L" 3:" " 4:" ">
D, [2016-11-30T00:37:14.608443 #5744] DEBUG -- : #<MatchData "-H  " 1:"-H" 2:"H" 3:" " 4:" ">
D, [2016-11-30T00:37:14.608990 #5744] DEBUG -- : #<MatchData "-D debugoptions" 1:"-D" 2:"D" 3:" " 4:"debugoptions">
D, [2016-11-30T00:37:14.609415 #5744] DEBUG -- : #<MatchData "-Olevel" 1:"-Olevel" 2:"Olevel" 3:"" 4:"">
D, [2016-11-30T00:37:14.610456 #5744] DEBUG -- : 5
D, [2016-11-30T00:37:14.610742 #5744] DEBUG -- : 18
D, [2016-11-30T00:37:14.611013 #5744] DEBUG -- : 5
