#!/usr/bin/env ruby
$LOAD_PATH << "#{File.dirname __FILE__}/lib/"

require 'rubygems'
require 'curses'
#require 'sdl2'
include Curses
require "dbmanager.rb"

CONF = { 	:SPACING => 2,
				 		:PADDING => 1 }
UILOG = Logger.new("ui.log")
COLORS = { 	:default =>  [ 100, 100, 100 ],
						:type => 				[ 700, 700, 300 ],
						:executable => 	[ 700, 300, 300 ],
						:item => 				[ 300, 700, 300 ],
						:chardevice => 	[ 300, 700, 700 ],
						:blockdevice =>	[ 700, 300, 700 ],
						#:special 		=>	[ 700, 300, 700 ],
						:directory => 	[ 300, 300, 700 ] }

module Visual
	attr_accessor :x, :y
	def draw x,y,win
		to_s.draw x,y,color,win
		#UILOG.debug color.to_s
	end	
	def show entries
		last =  SESSION.last
		SESSION << List.new( entries, last.x+last.width+CONF[:PADDING] )
	end
end	

class Type;	include Visual
	def to_s;	name;	end
	def color; :type; end
	def click; show items; end		
end
class Item;	include Visual
	def to_s;	path.split("/")[-1]; end	
	def color; COLORS.keys.grep( type.name.to_sym ).first || :item; end
	def click
		
		case type.name
		when "directory"
			show children
		end
	end
end

class String
	def draw x, y, color, win
		win.setpos y ,x
#		win.attron( color_pair(COLORS.keys.index(color))|A_BOLD )
		win.attron( color_pair(COLORS.keys.index(color)) )
		#win.color_set COLORS.keys.index(color)
		win.addstr self
	end
end
class Window
	def child
		SESSION[SESSION.index(self) + 1]
	end
	def prune
		close
		child.prune if child
		SESSION.delete self
	end
end
class CMDBuilder < Window
	def initialize cmd
		@page = ManPage.new cmd
		
	end
	def draw
		@page[:options].keys.each_with_index do |option, i|
			option.draw 0, i, COLOR[:default], self
		end
		refresh
	end
end
class List < Window #Pad
	#include Enumerable
	attr_accessor :x, :y, :width, :height, :entries
	def initialize e=[], x=CONF[:PADDING],y=CONF[:PADDING]
		@x, @y = x, y
		@height =  e.length * CONF[:SPACING]
		@width = e.max{ |a,b| a.to_s.length <=> b.to_s.length }.to_s.length	
		super  @height, @width, @y, @x
		keypad = true
		@entries = e
		box '|', '-'
		#refresh
	end	
	def draw
		@entries.each_with_index do |entry, i|
			entry.draw 0, i * CONF[:SPACING], self
			#UILOG.debug "x: %s y: %s" % [curx, cury]
			#entry.draw @x, @y + i * CONF[:FONT_SIZE]
		end
   	#UILOG.debug getch #Event.poll 
		refresh
	end
	def click x,y
		child.prune if child
		@entries[ (y-@y) / CONF[:SPACING] ].click
	end

end
class TextWindow < Window
	def initialize text, align
		super 0,0,CONF[:PADDING],MENU.width #*MAINRECT
		box '|', '-'
#		refresh
	end
end
		
MENU = List.new ([ Item[:path=>"/home/key/fun"],
										Type[:name=>"plain"] ])
#SESSION = [ MENU ]
#MAINRECT = lines - CONF[:PADDING], cols - MENU.width-CONF[:PADDING], CONF[:PADDING], CONF[:PADDING]
HELP = TextWindow.new " Welcome, left is the menu ", :center
MAIN = HELP

class SIA # < Window
  
  def initialize colortest = false
    #self.caption = "SIA UI"
		init_screen
		start_color
		COLORS.each_with_index do |color,i|
			UILOG.debug "col=  %s i= %s" % [color, i]
			init_color i, *color[1]
			init_pair i, i, 0#COLOR_BLACK
			"#{color[0]} - #{color_content i}".to_s.draw 0,i,color[0],Curses if colortest
		end	
		crmode
		noecho
  	curs_set 0
  	mousemask(ALL_MOUSE_EVENTS)
		stdscr.keypad(true)
  	#mousemask(BUTTON1_CLICKED|BUTTON2_CLICKED|BUTTON3_CLICKED|BUTTON4_CLICKED)
 end
	  
  def draw
		#clear
		#refresh
		
		#SESSION.each( &:draw )
  end
	
	def run
		loop do
			draw
    	input = getch #Event.poll 
			#refresh  
    	case input
    		when KEY_MOUSE
    			mouse = getmouse
					UILOG.debug "x: %s y: %s SESSION: %s" % [mouse.x, mouse.y, SESSION.length]
					window = SESSION.select{ |w| 
					 		 mouse.x >= w.x \
						&& mouse.x <  w.x + w.width \
						&& mouse.y >= w.y \
						&& mouse.y <  w.y + w.height 
					}.last
					window.click mouse.x, mouse.y if window
					#UILOG.debug "win: %s" % [window]
				#when 27 
				when KEY_EXIT
        	exit
    	end
    end
  end

begin
		SIA.new.run if __FILE__ == $0
	end
ensure
  close_screen
end
